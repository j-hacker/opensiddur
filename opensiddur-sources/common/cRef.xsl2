<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
	version="2.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:tei="http://www.tei-c.org/ns/1.0"
	xmlns:ref="http://jewishliturgy.org/ns/ref/1.0"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
	xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
	xmlns:xd="http://www.pnp-software.com/XSLTdoc"
	exclude-result-prefixes="xs xd func"
>
	<xsl:import href="common.xsl2"/>
	<xsl:import href="params.xsl2"/>
	<xd:doc type="stylesheet">
		<xd:short>Converts canonical references into appropriate printable references.</xd:short>
		<xd:author>$Author: efraim.feinstein $</xd:author>
		<xd:copyright>Copyright 2009 Efraim Feinstein &lt;efraim.feinstein@gmail.com&gt; (LGPL 3+)</xd:copyright>
		<xd:detail>
			<p>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
			<p>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.</p>
			<p>You should have received a copy of the GNU Lesser General Public License
				along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</p>
		</xd:detail>
		<xd:svnId>$Id: cRef.xsl2 510 2010-06-03 01:33:46Z efraim.feinstein $</xd:svnId>
	</xd:doc>
	
	<xd:doc>
		<xd:short>Function to resolve a reference from a cRef.  If it can't be resolved, just return it.</xd:short>
		<xd:param name="reference-system">Which reference system to use.  Valid values are: Biblical</xd:param>
		<xd:param name="cRef">The reference</xd:param>
		<xd:param name="lang">Language the reference should be written in.</xd:param>
	</xd:doc>
	<xsl:function name="func:resolve-cRef" as="xs:string">
		<xsl:param name="reference-system" as="xs:string"/>
		<xsl:param name="cRef" as="xs:string"/>
		<xsl:param name="lang" as="xs:string"/>
		
		<xsl:choose>
			<xsl:when test="$reference-system='Biblical'">
				<xsl:call-template name="cRef-Biblical">
					<xsl:with-param name="cRef" select="$cRef" as="xs:string"/>
					<xsl:with-param name="lang" select="$lang" as="xs:string"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$reference-system=('SA','Rama','Tur','MB')">
				<xsl:call-template name="cRef-SA">
					<xsl:with-param name="cRef" select="$cRef" as="xs:string"/>
					<xsl:with-param name="work" select="$reference-system" as="xs:string"/>
					<xsl:with-param name="lang" select="$lang" as="xs:string"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="msg">func:resolve-cRef(<xsl:value-of select="$reference-system"/>,<xsl:value-of select="$cRef"/>): reference system "<xsl:value-of select="$reference-system"/>" unknown.  Returning the reference as-is.</xsl:variable>
				<xsl:sequence select="func:debug($msg, 'func:resolve-cRef', $debug-warn)"/>
				<xsl:value-of select="$cRef"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>

  <xd:doc>
    <xd:short>Format a number and convert it into a string.  
    Corrects traditional hebrew numbering (only 1 &lt;= $num &lt;= 9999 is defined).
    </xd:short>
    <xd:param name="num">The number</xd:param>
    <xd:param name="format">Format specifier, similar to @format in xsl:number
    </xd:param>
    <xd:param name="lang">Language</xd:param>
  </xd:doc>
  <xsl:function name="func:number-format" as="xs:string?">
    <xsl:param name="num" as="xs:decimal"/>
    <xsl:param name="format" as="xs:string" />
    <xsl:param name="lang" as="xs:string" />

    <xsl:choose>
      <xsl:when test="starts-with($lang, 'he') and $format eq '&#x05d0;'">
        <xsl:variable name="group-separator" as="xs:string" 
          select="'&#x05f3;'"/> 
        <xsl:if test="$num &gt; 0">
          <xsl:variable name="triplet" as="xs:integer" 
            select="$num mod 1000"/>
          <xsl:variable name="thousand" as="xs:integer"
            select="$num idiv 1000"/>
          
          <xsl:variable name="thousand-he" as="xs:string"
            select="if ($thousand &gt; 0) 
              then concat(
              func:number-format($thousand, $format, $lang),
              $group-separator)
              else ''"/>
          
          <!-- special exceptions:
          344: shin-mem-dalet
          298: resh-tzadi-het -->
          <xsl:variable name="triplet-he" as="xs:string+"> 
            <xsl:choose>
              <xsl:when test="$num=344">
                <xsl:value-of select="'&#x05e9;&#x05d3;&#x05de;'"/>
              </xsl:when>
              <xsl:when test="$num=298">
                <xsl:value-of select="'&#x05e8;&#x05d7;&#x05e6;'"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="ten" as="xs:integer"
                  select="($triplet idiv 10) mod 10" />
                <xsl:variable name="teen" as="xs:integer"
                  select="xs:integer($triplet mod 100)"/>
                <xsl:variable name="hundred" as="xs:integer"
                  select="$triplet idiv 100"/>
                <!-- output the hundreds digit -->
                <xsl:value-of select="
                  if ($hundred=0) then ''
                  else if ($hundred &lt; 5) 
                  then codepoints-to-string(1510 + $hundred)
                  else if ($hundred=5)
                  then '&#x05ea;&#x05e7;'
                  else if ($hundred=6)
                  then '&#x05ea;&#x05e8;'
                  else if ($hundred=7)
                  then '&#x05ea;&#x05e9;'
                  else if ($hundred=8)
                  then '&#x05ea;&#x05ea;'
                  else if ($hundred=9)
                  then '&#x05ea;&#x05ea;&#x05e7;'
                  else '' "/>
                <!-- output the ten and unit digits where
                 15 and 16 are exceptions -->
                <xsl:variable name="unit" as="xs:integer"
                  select="$triplet mod 10"/>
                <xsl:value-of select="
                  if ($teen=15) then '&#x05d8;&#x05d5;'
                  else if ($teen=16) then '&#x05d8;&#x05d6;'
                  else
                  concat(
                  if ($ten=1) 
                  then '&#x05d9;'
                  else if ($ten=2)
                  then '&#x05db;'
                  else if ($ten=3)
                  then '&#x05dc;'
                  else if ($ten=4)
                  then '&#x05de;'
                  else if ($ten=5)
                  then '&#x05e0;'
                  else if ($ten=6)
                  then '&#x05e1;'
                  else if ($ten=7)
                  then '&#x05e2;'
                  else if ($ten=8)
                  then '&#x05e4;'
                  else if ($ten=9)
                  then '&#x05e6;'
                  else '',
                  if ($unit &gt; 0) 
                  then codepoints-to-string(1487 + $unit)
                  else ''
                  )"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:value-of 
            select="string-join(($thousand-he, $triplet-he), '')"/>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:number format="{$format}" value="$num" lang="{$lang}" 
          letter-value="traditional"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>
	
	<xd:doc>
		Reference table to convert canonical biblical references into language-dependent full references.
		ref:from/@source is a regular expression defining the book name.  Special sources are used for the correct separator between chapter and verse(source=:) and numeric format (source=1)
		ref:to/lang(X) is is the name of the book as it should be displayed in the given language.
	</xd:doc>
	<xsl:param name="biblical-reference-table" as="element(ref:table)">
		<ref:table>
			<ref:from source="[Gg]en([.]|esis)?">
				<ref:to xml:lang="en">Genesis</ref:to>
				<ref:to xml:lang="he">בְּרֵאשִׁית</ref:to>
			</ref:from>
			<ref:from source="[Ee]x([.]|(od(\.|us)?))?">
				<ref:to xml:lang="en">Exodus</ref:to>
				<ref:to xml:lang="he">שְׁמוֹת</ref:to>
			</ref:from>
			<ref:from source="[Ll]ev([.]|iticus)?">
				<ref:to xml:lang="en">Leviticus</ref:to>
				<ref:to xml:lang="he">וַיִּקְרָא</ref:to>
			</ref:from>
			<ref:from source="[Nn]um([.]|bers)?">
				<ref:to xml:lang="en">Numbers</ref:to>
				<ref:to xml:lang="he">בְּמִדְבָּר</ref:to>
			</ref:from>
			<ref:from source="[Dd]eu(t([.]|eronomy)?)?">
				<ref:to xml:lang="en">Deuteronomy</ref:to>
				<ref:to xml:lang="he">דְּבָרִים</ref:to>
			</ref:from>
			<ref:from source="[Jj]os(h([.]|ua))?">
				<ref:to xml:lang="en">Joshua</ref:to>
				<ref:to xml:lang="he">יְהוֹשׁוּעַ</ref:to>
			</ref:from>
			<ref:from source="(jdg)|([Jj]ud(g([.]|es))?)">
				<ref:to xml:lang="en">Judges</ref:to>
				<ref:to xml:lang="he">שׁוֹפְטִים</ref:to>
			</ref:from>
			<ref:from source="(sa1)|((1|I)\s[Ss]am([.]|uel)?)">
				<ref:to xml:lang="en">1 Samuel</ref:to>
				<ref:to xml:lang="he">שְׁמוּאֶל א׳</ref:to>
			</ref:from>
			<ref:from source="(sa2)|((2|II)\s[Ss]am([.]|uel)?)">
				<ref:to xml:lang="en">2 Samuel</ref:to>
				<ref:to xml:lang="he">שְׁמוּאֶל ב׳</ref:to>
			</ref:from>
			<ref:from source="(kg1)|((1|I)\s[Kk]ings)">
				<ref:to xml:lang="en">1 Kings</ref:to>
				<ref:to xml:lang="he">מְלָכִים א׳</ref:to>
			</ref:from>
			<ref:from source="(kg2)|((2|II)\s[Kk]ings)">
				<ref:to xml:lang="en">2 Kings</ref:to>
				<ref:to xml:lang="he">מְלָכִים ב׳</ref:to>
			</ref:from>
			<ref:from source="[Ii]sa([.]|iah)?">
				<ref:to xml:lang="en">Isaiah</ref:to>
				<ref:to xml:lang="he">יְשַׁעְיָהוּ</ref:to>
			</ref:from>
			<ref:from source="[Jj]er([.]|emiah)?">
				<ref:to xml:lang="en">Jeremiah</ref:to>
				<ref:to xml:lang="he">יִרְמְיָהוּ</ref:to>
			</ref:from>
			<ref:from source="[Ee]ze(k([.]|iel)?)?">
				<ref:to xml:lang="en">Ezekiel</ref:to>
				<ref:to xml:lang="he">יְחֶזְקֵאל</ref:to>
			</ref:from>
			<ref:from source="[Hh]os([.]|ea)?">
				<ref:to xml:lang="en">Hosea</ref:to>
				<ref:to xml:lang="he">הוֹשֵׁעַ</ref:to>
			</ref:from>
			<ref:from source="[Jj]oe(l)?">
				<ref:to xml:lang="en">Joel</ref:to>
				<ref:to xml:lang="he">יוֹאֵל</ref:to>
			</ref:from>
			<ref:from source="[Aa]mo(s)?">
				<ref:to xml:lang="en">Amos</ref:to>
				<ref:to xml:lang="he">עָמוֹס</ref:to>
			</ref:from>
			<ref:from source="[Oo]ba(d(\.|iah)?)?">
				<ref:to xml:lang="en">Obadiah</ref:to>
				<ref:to xml:lang="he">עֹבַדְיָה</ref:to>
			</ref:from>
			<ref:from source="[Jj]on([.]|ah)?">
				<ref:to xml:lang="en">Jonah</ref:to>
				<ref:to xml:lang="he">יוֹנָה</ref:to>
			</ref:from>
			<ref:from source="[Mm]ic([.]|ah)?">
				<ref:to xml:lang="en">Micah</ref:to>
				<ref:to xml:lang="he">מִיכָה</ref:to>
			</ref:from>
			<ref:from source="[Nn]ah([.]|um)?">
				<ref:to xml:lang="en">Nahum</ref:to>
				<ref:to xml:lang="he">נַחוּם</ref:to>
			</ref:from>
			<ref:from source="[Hh]ab([.]|akkuk)?">
				<ref:to xml:lang="en">Habakkuk</ref:to>
				<ref:to xml:lang="he">חֲבַקּוּק</ref:to>
			</ref:from>
			<ref:from source="[Zz]ep(h([.]|aniah)?)?">
				<ref:to xml:lang="en">Zephaniah</ref:to>
				<ref:to xml:lang="he">צְפַנְיָה</ref:to>
			</ref:from>
			<ref:from source="[Hh]ag([.]|gai)?">
				<ref:to xml:lang="en">Haggai</ref:to>
				<ref:to xml:lang="he">חַגַּי</ref:to>
			</ref:from>
			<ref:from source="[Zz][ae]c(h([.]|ariah)?)?">
				<ref:to xml:lang="en">Zachariah</ref:to>
				<ref:to xml:lang="he">זְכַרְיָה</ref:to>
			</ref:from>
			<ref:from source="[Mm]al([.]|achi)?">
				<ref:to xml:lang="en">Malachi</ref:to>
				<ref:to xml:lang="he">מַלְאָכִי</ref:to>
			</ref:from>
			<ref:from source="[Ee]zr(a)?">
				<ref:to xml:lang="en">Ezra</ref:to>
				<ref:to xml:lang="he">עֶזְרָא</ref:to>
			</ref:from>
			<ref:from source="[Nn]eh([.]|emiah)?">
				<ref:to xml:lang="en">Nehemiah</ref:to>
				<ref:to xml:lang="he">נְחֶמְיָה</ref:to>
			</ref:from>
			<ref:from source="[Dd]an([.]|iel)?">
				<ref:to xml:lang="en">Daniel</ref:to>
				<ref:to xml:lang="he">דָּנִיֵּאל</ref:to>
			</ref:from>
			<ref:from source="[Pp]sa([.]|lms)?">
				<ref:to xml:lang="en">Psalms</ref:to>
				<ref:to xml:lang="he">תְּהִלִּים</ref:to>
			</ref:from>
			<ref:from source="[Jj]ob">
				<ref:to xml:lang="en">Job</ref:to>
				<ref:to xml:lang="he">אִיּוֹב</ref:to>
			</ref:from>
			<ref:from source="[Pp]ro(v([.]|erbs)?)?">
				<ref:to xml:lang="en">Proverbs</ref:to>
				<ref:to xml:lang="he">מִשְׁלֵי</ref:to>
			</ref:from>
			<ref:from source="[Rr]ut(h)?">
				<ref:to xml:lang="en">Ruth</ref:to>
				<ref:to xml:lang="he">רוּת</ref:to>
			</ref:from>
			<ref:from source="([Ss][Oo][Ssl])|(Song of (Songs|Solomon))">
				<ref:to xml:lang="en">Song of Songs</ref:to>
				<ref:to xml:lang="he">שִׁיר הַשִּׁירִים</ref:to>
			</ref:from>
			<ref:from source="[Ee]cc([.]|lesiastes)?">
				<ref:to xml:lang="en">Ecclesiastes</ref:to>
				<ref:to xml:lang="he">קֹהֶלֶת</ref:to>
			</ref:from>
			<ref:from source="[Ll]am([.]|entations)?">
				<ref:to xml:lang="en">Lamentations</ref:to>
				<ref:to xml:lang="he">אֵיכָה</ref:to>
			</ref:from>
			<ref:from source="[Ee]st(h([.]|er)?)?">
				<ref:to xml:lang="en">Esther</ref:to>
				<ref:to xml:lang="he">אֶסְתֵּר</ref:to>
			</ref:from>
			<ref:from source="(ch1)|((I|1)\s[Cc]hr([.]|onicles)?)">
				<ref:to xml:lang="en">1 Chronicles</ref:to>
				<ref:to xml:lang="he">דִּבְרֵי הַיָּמִים א׳</ref:to>
			</ref:from>
			<ref:from source="(ch2)|((II|2)\s[Cc]hr([.]|onicles)?)">
				<ref:to xml:lang="en">2 Chronicles</ref:to>
				<ref:to xml:lang="he">דִּבְרֵי הַיָּמִים ב׳</ref:to>
			</ref:from>
			<ref:from source=":"><!-- chapter-verse separator -->
				<ref:to xml:lang="en">:</ref:to>
				<ref:to xml:lang="he">,</ref:to>
			</ref:from>
			<ref:from source="123"><!-- numbering scheme -->
				<ref:to xml:lang="en">1</ref:to>
				<ref:to xml:lang="he">&#x05D0;</ref:to>
			</ref:from>
		</ref:table>
	</xsl:param>
	
    <xd:doc>
      <xd:short>Convert a cRef to a set of pointers</xd:short>
    </xd:doc>
    <xsl:function name="func:cRef-to-ptr" as="element(tei:ptr)*">
      <xsl:param name="ref-system" as="xs:string"/>
      <xsl:param name="cRef" as="xs:string"/>
      
      <xsl:choose>
        <xsl:when test="$ref-system='Biblical'">
          <xsl:variable name="split-cRef" as="element()+">
            <xsl:call-template name="split-cRef-Biblical">
              <xsl:with-param name="cRef" select="$cRef" as="xs:string"/>
              <xsl:with-param name="lang" select="'en'" as="xs:string"/>
            </xsl:call-template>
          </xsl:variable>
          <xsl:variable name="book-uri" as="xs:string"
            select="translate($split-cRef/self::begin/book,' ','_')"/>
          <xsl:choose>
            <xsl:when test="$split-cRef/self::begin/verse or $split-cRef/self::end">
              <xsl:message><xsl:sequence select="$split-cRef"/></xsl:message>
              <xsl:for-each select="
                if ($split-cRef/self::end/chap) 
                then xs:integer($split-cRef/self::begin/chap) to xs:integer($split-cRef/self::end/chap)
                else xs:integer($split-cRef/self::begin/chap)">
                <xsl:variable name="current-chapter" as="xs:integer" select="."/>
                <xsl:variable name="book-chap-uri" as="xs:string" 
                  select="string-join((translate($split-cRef/self::begin/book,' ','_'),
                  format-number(number($current-chapter), '000'),
                  '.xml'),'')"/>
                <xsl:message><xsl:value-of select="$current-chapter"/></xsl:message>
                
                <tei:ptr target="{string-join((
                  $book-chap-uri,
                  '#',
                  if ($current-chapter=$split-cRef/self::begin/chap and $split-cRef/self::begin/verse)
                  then if (not($split-cRef/self::end))
                    then ('v', $split-cRef/self::begin/verse) 
                    else ('range(v',$split-cRef/self::begin/verse,',',
                      if ($current-chapter=$split-cRef/self::end/chap or not($split-cRef/self::end/chap))
                      then ('v', $split-cRef/self::end/verse) 
                      else doc($book-chap-uri)//j:view[@type='s']/tei:s[last()]/@xml:id 
                        (: need to know last verse number :),')')
                  else if ($current-chapter=$split-cRef/self::end/chap and $split-cRef/self::end/verse)
                  then ('range(v1,v',$split-cRef/self::end/verse,')')
                  else 'main'),'')
            }"/>
            </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
              <!-- whole book or whole chapter -->
              <tei:ptr target="{$book-uri}{
                if ($split-cRef/self::begin/chap) 
                then format-number(number($split-cRef/self::begin/chap), '000')
                else ()}.xml#main"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="func:debug(('Reference system ', $ref-system, ' is not supported.'),'func:cRef-to-id()', $debug-error)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:function>
  
	<xd:doc>
		<xd:short>Convert a canonical biblical reference $cRef to an XML representation
        of the beginning and ending book, chapter, verse in language $lang</xd:short>
		<xd:param name="cRef">The canonical reference</xd:param>
		<xd:param name="lang">Language the reference should be in</xd:param>
		<xd:param name="reference-table">Table that contains the names of the books</xd:param>
	</xd:doc>
	<xsl:template name="split-cRef-Biblical" as="element()*">
		<xsl:param name="cRef" required="yes" as="xs:string"/>
		<xsl:param name="lang" required="yes" as="xs:string"/>
		<xsl:param name="reference-table" as="element(ref:table)" select="$biblical-reference-table"/>
		
		<!-- Biblical references are in the form:
		book [chap:verse[-chap:verse]]
		space possibility is needed in the book name for "Song of Songs"
		-->
		<xsl:variable name="regex" select="'(((I|II|1|2)\s)?([ ]?[a-zA-Z.])+(1|2)?)(\s([0-9]+)(:([0-9]+)([a-z]?))?(-(([0-9]+)(:(([0-9]+)([a-z]?)))?))?)?'" as="xs:string"/>
		<xsl:analyze-string select="$cRef" regex="{$regex}">
			<xsl:matching-substring>
				<xsl:variable name="book-ref" select="regex-group(1)"/>
				<xsl:variable name="chap-ref-begin" select="regex-group(7)"/>
				<xsl:variable name="verse-ref-begin" select="regex-group(9)" 
          as="xs:string"/>
				<xsl:variable name="chap-ref-end" select="regex-group(13)"
          as="xs:string"/>
				<xsl:variable name="verse-ref-end" select="regex-group(16)"/>
				<xsl:variable name="msg">
				b=<xsl:value-of select="$book-ref"/>
				<xsl:sequence select="$reference-table/ref:from[matches($book-ref,@source)]"/>
				c-r-b=<xsl:value-of select="$chap-ref-begin"/>
				c-r-e=<xsl:value-of select="$chap-ref-end"/>
				v-r-b=<xsl:value-of select="$verse-ref-begin"/>
				v-r-e=<xsl:value-of select="$verse-ref-end"/>
				</xsl:variable>
				<xsl:sequence select="func:debug($msg, 'cRef-Biblical', $debug-detail)"/>
				<!-- need to add ^ (beginning of string check) to @source to prevent numbers from universally matching 1 -->
				<xsl:variable name="book-ref-lang" as="xs:string?"
				select="$reference-table/ref:from[matches($book-ref,string-join(('^',@source),''))]/ref:to[lang($lang)]"/>
				<xsl:variable name="numbering-scheme" select="$reference-table/ref:from[@source='123']/ref:to[lang($lang)]" as="xs:string"/>
				
				<xsl:variable name="msg">book="<xsl:value-of select="$book-ref"/>" is unknown.</xsl:variable>
				<xsl:sequence select="if (empty($book-ref-lang)) then func:debug($msg,'cRef-Biblical',$debug-warn) else ()"/>
				<xsl:variable name="chap-ref-begin-lang" as="xs:string">
					<xsl:choose>
						<xsl:when test="string-length($chap-ref-begin) &gt; 0">
              <xsl:value-of select="func:number-format(
                xs:integer($chap-ref-begin), 
                $numbering-scheme, $lang)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="chap-ref-end-lang" as="xs:string">
					<xsl:choose>
						<xsl:when test="string-length($chap-ref-end) &gt; 0">
              <xsl:value-of select="func:number-format(
                xs:integer($chap-ref-end), $numbering-scheme, $lang)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="verse-ref-begin-lang" as="xs:string">
					<xsl:choose>
						<xsl:when test="string-length($verse-ref-begin) &gt; 0">
              <xsl:value-of select="func:number-format(
                xs:integer($verse-ref-begin), $numbering-scheme, $lang)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="verse-ref-end-lang" as="xs:string">
					<xsl:choose>
						<xsl:when test="string-length($verse-ref-end) &gt; 0">
              <xsl:value-of select="func:number-format(
                xs:integer($verse-ref-end), $numbering-scheme, $lang)"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="''"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				
                <begin>
                  <book><xsl:value-of select="$book-ref-lang"/></book>
					<xsl:if test="$chap-ref-begin">
                      <chap><xsl:value-of select="$chap-ref-begin-lang"/></chap>
                    </xsl:if>
					<xsl:if test="$verse-ref-begin-lang">
						<verse><xsl:value-of select="$verse-ref-begin-lang"/></verse>
					</xsl:if>
                    </begin>
                    <xsl:if test="$verse-ref-end-lang or $chap-ref-end-lang">
                      <end>
                        <xsl:choose>
                          <xsl:when test="$chap-ref-end-lang and not($verse-ref-end-lang) and $chap-ref-begin and not($verse-ref-begin)">
                            <chap><xsl:value-of select="$chap-ref-end-lang"/></chap>
                          </xsl:when>
                          <xsl:when test="$chap-ref-end-lang and not($verse-ref-end-lang) and $chap-ref-begin and $verse-ref-begin">
                            <verse><xsl:value-of select="$chap-ref-end-lang"/></verse>
                          </xsl:when>
                          <xsl:otherwise>
                            <!-- "$chap-ref-end-lang and $verse-ref-end-lang"-->
                            <chap><xsl:value-of select="$chap-ref-end-lang"/></chap>
                            <verse><xsl:value-of select="$verse-ref-end-lang"/></verse>
                          </xsl:otherwise>
                        </xsl:choose>
                      </end>
                    </xsl:if>
		</xsl:matching-substring>
			<xsl:non-matching-substring>
				<xsl:variable name="msg">$cRef="<xsl:value-of select="$cRef"/>" is not recognized as a Biblical reference.</xsl:variable>
				<xsl:sequence select="func:debug($msg,'cRef-Biblical', $debug-warn)"/>
			</xsl:non-matching-substring>
		</xsl:analyze-string>
	</xsl:template>
	
    <xd:doc>
      <xd:short>Front end to split-cRef-Biblical to return a string</xd:short>
    </xd:doc>
    <xsl:template name="cRef-Biblical" as="xs:string">
        <xsl:param name="cRef" required="yes" as="xs:string"/>
		<xsl:param name="lang" required="yes" as="xs:string"/>
		<xsl:param name="reference-table" as="element(ref:table)" select="$biblical-reference-table"/>
    
        <xsl:variable name="cv-separator" select="$reference-table/ref:from[@source=':']/ref:to[lang($lang)]"/>
        
        <xsl:variable name="split-cRef" as="element()+">
          <xsl:call-template name="split-cRef-Biblical">
            <xsl:with-param name="cRef" as="xs:string" select="$cRef"/>
            <xsl:with-param name="lang" as="xs:string" select="$lang"/>
            <xsl:with-param name="reference-table" as="element(ref:table)" select="$reference-table"/>
          </xsl:call-template>
        </xsl:variable>

        <xsl:value-of select="string-join(
          ($split-cRef/self::begin/book, 
          if ($split-cRef/self::begin/chap) 
          then (' ',$split-cRef/self::begin/chap, 
            if ($split-cRef/self::begin/verse) then ($cv-separator, $split-cRef/self::begin/verse)
            else ())
          else (),
          if ($split-cRef/self::end) then '-' else (),
          $split-cRef/self::end/chap,
          if ($split-cRef/self::end/chap) then $cv-separator else (),
          $split-cRef/self::end/verse
          ),'')"/>
    </xsl:template>
  
	<xsl:variable name="SA-reference-table" as="element(ref:table)">
		<ref:table>
			<ref:from source="S(hulchan )?A(ruch)?">
				<ref:to xml:lang="en">SA</ref:to>
				<ref:to xml:lang="he">שו״ע</ref:to>
			</ref:from>
			<ref:from source="M(ishna(h)? )?B(rura(h)?)?">
				<ref:to xml:lang="en">MB</ref:to>
				<ref:to xml:lang="he">מ״ב</ref:to>
			</ref:from>
			<ref:from source="O(ra(c)?h )?(H|C(h?))(aim)?">
				<ref:to xml:lang="en">OH</ref:to>
				<ref:to xml:lang="he">א״ח</ref:to>
			</ref:from>
			<ref:from source="Y(oreh )?D(eah)?">
				<ref:to xml:lang="en">YD</ref:to>
				<ref:to xml:lang="he">י״ד</ref:to>
			</ref:from>
			<ref:from source="H(oshen )?M(ishpat(h)?)?">
				<ref:to xml:lang="en">HM</ref:to>
				<ref:to xml:lang="he">ח״מ</ref:to>
			</ref:from>
			<ref:from source="E([bv]en )?H(aezer)?">
				<ref:to xml:lang="en">EH</ref:to>
				<ref:to xml:lang="he">א״ע</ref:to>
			</ref:from>
			<ref:from source=":"><!-- chapter-verse separator -->
				<ref:to xml:lang="en">:</ref:to>
				<ref:to xml:lang="he">,</ref:to>
			</ref:from>
			<ref:from source="123"><!-- numbering scheme -->
				<ref:to xml:lang="en">1</ref:to>
				<ref:to xml:lang="he">&#x05D0;</ref:to>
			</ref:from>
		</ref:table>
	</xsl:variable>
	
	<xd:doc>
		<xd:short>Canonical references for Shulchan Aruch and similar books</xd:short>
		<xd:param name="work">The name of the work. </xd:param>
		<xd:param name="cRef">The canonical reference</xd:param>
		<xd:param name="lang">Language the reference should be in</xd:param>
		<xd:param name="reference-table">Table that contains the names of the books</xd:param>
	</xd:doc>
	<xsl:template name="cRef-SA">
		<xsl:param name="work" as="xs:string" select="'SA'"/>
		<xsl:param name="cRef" required="yes" as="xs:string"/>
		<xsl:param name="lang" required="yes" as="xs:string"/>
		<xsl:param name="reference-table" as="element(ref:table)" select="$SA-reference-table"/>
		
		<xsl:variable name="regex" as="xs:string"
		select="'([a-zA-Z]+)\s*([0-9]+)(:([0-9]+))?(-([0-9]+)(:([0-9]+)?)?)?'"/>
		<xsl:analyze-string select="$cRef" regex="{$regex}">
			<xsl:matching-substring>
				<xsl:variable name="book" as="xs:string" select="regex-group(1)" />
				<xsl:variable name="chapter-begin" as="xs:string" select="regex-group(2)"/>
				<xsl:variable name="paragraph-begin" as="xs:string" select="regex-group(4)"/>
				<xsl:variable name="chapter-end" as="xs:string" select="regex-group(6)"/>
				<xsl:variable name="paragraph-end" as="xs:string" select="regex-group(8)"/>
				<xsl:variable name="number-format" as="xs:string" 
				select="$reference-table/ref:from[@source='123']/ref:to[lang($lang)]"/>
				<xsl:variable name="separator" as="xs:string" 
				select="$reference-table/ref:from[@source=':']/ref:to[lang($lang)]"/>
				
				<xsl:variable name="result">
					<xsl:value-of select="$reference-table/ref:from[matches($work,@source)]/ref:to[lang($lang)]" />
					<xsl:text> </xsl:text>
					<xsl:value-of 	select="$reference-table/ref:from[matches($book,@source)]/ref:to[lang($lang)]"/>
					<xsl:text> </xsl:text>
					
					<xsl:if test="string-length($chapter-begin) &gt; 0">
            <xsl:value-of select="func:number-format(
              xs:integer($chapter-begin), $number-format, $lang)"/>
					</xsl:if>
						
					<xsl:if test="string-length($paragraph-begin) &gt; 0">
						<xsl:value-of select="$separator"/>
						<xsl:value-of select="func:number-format(
              xs:integer($paragraph-begin), $number-format, $lang)"/>
					</xsl:if>
					
					<xsl:if test="string-length($chapter-end) &gt; 0">
						<xsl:text>-</xsl:text>
            <xsl:value-of select="func:number-format(
              xs:integer($chapter-end), $number-format, $lang)"/>
					</xsl:if>
					
					<xsl:if test="string-length($paragraph-end) &gt; 0">
						<xsl:value-of select="$separator"/>
            <xsl:value-of select="func:number-format(
              xs:integer($paragraph-end), $number-format, $lang)"/>
					</xsl:if>
				</xsl:variable>
				<xsl:value-of select="string-join($result,'')"/>
			</xsl:matching-substring>
			<xsl:non-matching-substring>
				<xsl:variable name="debug-msg">
					Cannot match the cRef "<xsl:value-of select="$cRef"/>" to the pattern "<xsl:value-of select="$regex"/>", returning the original cRef unmodified.
				</xsl:variable>
				<xsl:sequence select="func:debug($debug-msg, 'cRef-SA', $debug-warn)"/>
				<xsl:value-of select="concat($work, ' ', $cRef)"/>
			</xsl:non-matching-substring>
		</xsl:analyze-string>
	</xsl:template>
	
	<xd:doc>
		tests for the reference mechanism
	</xd:doc>
	<xsl:template name="test">
		<xsl:value-of select="func:resolve-cRef('Biblical', '1 Samuel', 'en')"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="func:resolve-cRef('Biblical', '1 Samuel 1', 'en')"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="func:resolve-cRef('Biblical', '1 Samuel 1:1-2:2', 'en')"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="func:resolve-cRef('Biblical', 'Song of Songs 1', 'en')"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="func:resolve-cRef('Biblical', 'Deut 16:3', 'he')"/>
		<xsl:text> </xsl:text>
		<xsl:number format="&#x5d0;" value="20" lang="en" letter-value="traditional"/>
		<xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(1, '&#x5d0;', 'he')"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(20, '&#x5d0;', 'he')"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(15, '&#x5d0;', 'he')"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(16, '&#x5d0;', 'he')"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(344, '&#x5d0;', 'he')"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(100, '&#x5d0;', 'he')"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="func:number-format(298, '&#x5d0;', 'he')"/>
    
    <xsl:sequence select="func:cRef-to-ptr('Biblical', 'Genesis 1:1-5')"/>
    <xsl:sequence select="func:cRef-to-ptr('Biblical', 'Genesis 2-3')"/>
    <xsl:sequence select="func:cRef-to-ptr('Biblical', 'Genesis 2-3:2')"/>
    <xsl:sequence select="func:cRef-to-ptr('Biblical', 'Genesis 3:1')"/>
	</xsl:template>
</xsl:stylesheet>
