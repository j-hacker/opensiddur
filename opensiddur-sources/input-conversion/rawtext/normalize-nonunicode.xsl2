<?xml version="1.0" encoding="UTF-8"?>
<!-- 
TODO: 
- port correct typing conventions code to XSLT 2.0
- prose/poetry/segment breakdown based on trope
-->
<xsl:stylesheet
	version="2.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:tei="http://www.tei-c.org/ns/1.0"
	xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
	xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
	xmlns:tmp="http://jewishliturgy.org/ns/tmp"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xd="http://www.pnp-software.com/XSLTdoc"
	exclude-result-prefixes="tmp xs xd"
	>
	<xsl:import href="../../common/params.xsl2"/>
	<xsl:import href="../../common/common.xsl2"/>
	<xsl:output indent="yes" encoding="utf-8" method="xml"/>
	<xd:doc type="stylesheet">
		<xd:short>and conversion of Unicodedata.txt (or similar) to an XML-form.</xd:short>
		<xd:copyright>Copyright 2009-2010 Efraim Feinstein</xd:copyright>
		<xd:detail>
				<p>This program is free software: you can redistribute it and/or modify
				it under the terms of the GNU Lesser General Public License as published by
				the Free Software Foundation, either version 3 of the License, or
				(at your option) any later version.</p>

				<p>This program is distributed in the hope that it will be useful,
				but WITHOUT ANY WARRANTY; without even the implied warranty of
				MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
				GNU Lesser General Public License for more details.</p>

				<p>You should have received a copy of the GNU Lesser General Public License
				along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</p>
			</xd:detail>
			<xd:svnId>$Id: normalize-nonunicode.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
	</xd:doc>
	
	<xd:doc>
		Filename containing the equivalent of UnicodeData.txt
	</xd:doc>
	<xsl:param as="xs:string" name="unidata-filename" select="'NotUnicodeData.txt'"/>
	
	<xd:doc>
		Original "UnicodeData.txt" like string
	</xd:doc>
	<xsl:param name="unidata-original" select="unparsed-text($unidata-filename)" as="xs:string"/>
	
	<xd:doc>
		Combining class table.  Holds tmp:convert elements which define (as XML) the combining classes
to be used for each code point.	</xd:doc>
	<xsl:param name="unidata-xml" as="document-node()">
		<xsl:document>
			<xsl:for-each select="tokenize($unidata-original,'\n')">
				<xsl:if test="string-length(.) &gt; 0">
					<xsl:variable name="unidata-field" as="xs:string+" select="tokenize(.,';')"/>
					<!-- field 1 is the code point #, field 4 is the combining class -->
					<!--xsl:message><xsl:sequence select="$unidata-field"/></xsl:message-->
					<tmp:convert from="{xs:string(func:hex-string-to-integer($unidata-field[1]))}"><xsl:value-of select="$unidata-field[4]"/></tmp:convert>
				</xsl:if>
			</xsl:for-each>
		</xsl:document>
	</xsl:param>
	
	<xd:doc>Conversion using a combining-class table.</xd:doc>
	<xsl:key name="combining-class" match="tmp:convert" use="@from"/>
	
	<xd:doc>
		<xd:short>Convert a string representing a hexadecimal integer to an integer</xd:short>
		<xd:param name="input-string">The string (must only contain [0-9A-Fa-f]+)</xd:param>
	</xd:doc>
	<xsl:function name="func:hex-string-to-integer" as="xs:integer">
		<xsl:param name="input-string" as="xs:string"/>
		<xsl:variable name="input-length" select="string-length($input-string)"/>
		<xsl:choose>
			<xsl:when test="$input-length &gt; 0">
				<xsl:variable name="this-digit" as="xs:integer">
					<xsl:variable name="hex-digit" select= "upper-case(substring($input-string, $input-length,$input-length))"/>
					<xsl:choose>
						<xsl:when test="matches($hex-digit,'[0-9]')">
							<xsl:sequence select="xs:integer(string-to-codepoints($hex-digit) - string-to-codepoints('0'))"/>
						</xsl:when>
						<xsl:when test="matches($hex-digit,'[A-F]')">
							<xsl:sequence select="xs:integer(10 + string-to-codepoints($hex-digit) - string-to-codepoints('A'))"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="msg">hex-digit '<xsl:value-of select="$hex-digit"/>' in '<xsl:value-of select="$input-string"/>' is not a hex digit.
							</xsl:variable>
							<xsl:sequence select="func:debug($msg, 'func:hex-string-to-integer', $debug-error)"/>
							<xsl:sequence select="0"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="other-digits" as="xs:string" select="substring($input-string,1,$input-length - 1)"/>
				
				<xsl:value-of select="16 * func:hex-string-to-integer($other-digits) + $this-digit"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="0"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	
	<xd:doc>
		<xd:short>Normalize a string based on non-Unicode combining classes</xd:short>
		<xd:param name="original-string">The string.</xd:param>
	</xd:doc>
	<xsl:function name="func:normalize-nonunicode" as="xs:string">
		<xsl:param name="original-string" as="xs:string"/>
		<xsl:variable name="tokenized-string-xml" as="document-node()">
		<xsl:sequence select="func:debug((), string-join(('func:normalize-nonunicode(',$original-string,')'),''),$debug-detail)"/>
			<xsl:document>
				<xsl:for-each select="string-to-codepoints($original-string)">
					<xsl:variable name="comb-class" as="xs:string?" select="key('combining-class',format-number(.,'0'),$unidata-xml)"/>
					<xsl:if test="empty($comb-class)">
						<xsl:sequence select="func:debug((), string-join(('func:normalize-nonunicode(): Character ', format-number(.,'0'),' in string ',$original-string, 'does not exist in the charts.  Assuming it is combining class 0'),''), $debug-warn)"/>
					</xsl:if>
					<tmp:ch ch="{xs:string(.)}" cc="{if (not(empty($comb-class))) then $comb-class else '0'}">
					</tmp:ch>
				</xsl:for-each>
			</xsl:document>
		</xsl:variable>
		<!--xsl:sequence select="j:debug($tokenized-string-xml, 'tokenized-string-xml',$debug-info)"/-->
		<xsl:variable name="normalized-string" as="xs:string*">
			<xsl:for-each-group select="$tokenized-string-xml/tmp:ch" group-starting-with="*[@cc='0']">
				<xsl:for-each select="current-group()">
					<xsl:sort select="@cc" data-type="number"/>
					<!--xsl:sequence select="j:debug(.,'tokenized-string-xml group',$debug-info)"/-->
					<xsl:sequence select="codepoints-to-string(@ch)"/>
				</xsl:for-each>
			</xsl:for-each-group>
		</xsl:variable>
		<xsl:value-of select="string-join($normalized-string,'')"/>
	</xsl:function>
	
	<xd:doc>
		<xd:short>standalone entry point for testing</xd:short>
	</xd:doc>
	<xsl:template name="main">
		<xsl:variable name="input" select="normalize-unicode(unparsed-text('debug-in.txt'),'NFC')"/>
		<!--xsl:sequence select="j:debug($unidata-xml,'combining classes',$debug-info)"/-->
		<xsl:result-document href="debug-out-nfc.txt" method="text">
			<xsl:value-of select="$input"/>
		</xsl:result-document>
		<xsl:result-document href="debug-out-sbl.txt" method="text">
			<xsl:value-of select="func:normalize-nonunicode($input)"/>
		</xsl:result-document>
	</xsl:template>
	
</xsl:stylesheet>
