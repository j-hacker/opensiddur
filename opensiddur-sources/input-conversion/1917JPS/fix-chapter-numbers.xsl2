<?xml version="1.0" encoding="utf-8"?>
<!--
fix-chapter-numbers.xsl2 for the OpenSiddur project.
Copyright 2011-12 Marc Stober and licensed under the GNU LGPL.

Put chapter number in the correct place in the flow of text.
Also mark paragraph breaks.
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:my="https://github.com/marcstober/opensiddur/blob/master/code/input-conversion/1917JPS/my">

	<xsl:output method="xml" indent="yes"/>

	<!-- default identity template -->
	<xsl:template match="@* | node()">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()"/>
		</xsl:copy>
	</xsl:template>

	<xsl:function name="my:is-english-letter">
		<xsl:param name="char"/>
		<xsl:choose>
			<!-- includes a few punctuation marks but ok for our needs -->
			<xsl:when test="string-to-codepoints($char)[1] > 64 and
				string-to-codepoints($char)[1] &lt; 123">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="false()"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>

	<xsl:template match="text">
		<!-- for each text that is not chapter number -->
		<xsl:if test="not(./@size='25.961')">
			<!-- if the start of a new line -->
			<xsl:variable name="preceding-y">
				<xsl:choose>
				  	<xsl:when test="false() and preceding-sibling::text">
	    <xsl:value-of select="preceding-sibling::text[position()=1]/@y" />
	  </xsl:when>
	
					<!-- For Lamentations, may be spaces/Hebrew characters 
						in left margin. TODO: use is-hebrew -->
					<xsl:when test="preceding-sibling::text[
						string-to-codepoints(.)[1] != 32 and 
						string-to-codepoints(.)[1] &lt; 2000][1]">
						<xsl:value-of select="preceding-sibling::text[
							string-to-codepoints(.)[1] != 32 and 
							string-to-codepoints(.)[1] &lt; 2000][1]/@y" />
					</xsl:when>
					<xsl:otherwise>
						<!-- if not preceded by text node, start of a new line, too -->
						<xsl:value-of select="0" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:if test="abs($preceding-y - ./@y) &gt; 6.5">
				<!-- xsl:comment>new line</xsl:comment -->
				<!-- then first output the chapter number that should be here -->
				<xsl:variable name="top">
					<xsl:value-of select="number(./@y + ./@h)" />
				</xsl:variable>
				<xsl:for-each select="../text[@size='25.961']">
					<xsl:variable name="ch-top">
						<xsl:value-of select="number(./@y + ./@h)" />
					</xsl:variable>
					<xsl:if test="abs($top - $ch-top) &lt; 5">
						<xsl:element name="text">
							<xsl:apply-templates select="@* | node()"/>
						</xsl:element>
					</xsl:if>
				</xsl:for-each>
				<xsl:variable name="first-english-letter">
					<xsl:choose>
						<xsl:when test="my:is-english-letter(.) = true()">
							<xsl:value-of select="."/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="following-sibling::text[my:is-english-letter(.) = true()][1]"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<!-- debugging 
				[<xsl:value-of select="$first-english-letter"/>]-->
				<xsl:if test="not(parent::footnotes or @size='8.181')">
					<!-- 57.504 is at beginning of chapter and only should 
						break in specific situation: not the 1st line of 
						chapter (caveat of test below is if more than one 
						chapter start in same column) 
						and first actually English character (not Heb. or space) 
							is upper case and previous line ends with , or !.
						See Lamentations 1:1 and 4:1. -->
				<xsl:if test="(@x = '46.824') or (@x ='234.070') or
					(upper-case($first-english-letter) = $first-english-letter and 
					(@x = '57.504') and preceding-sibling::text[@x = '57.504'] and
					contains(',!', preceding-sibling::text[normalize-space() != ''][1]))">
					<xsl:element name="paragraph-break" />
				</xsl:if>
			</xsl:if>
		</xsl:if>	  
		<!-- finally output the text element -->
		<xsl:copy>
			<xsl:apply-templates select="@* | node()"/>
		</xsl:copy>
	</xsl:if>
</xsl:template>

</xsl:stylesheet>
