<?xml version="1.0" encoding="UTF-8"?>
<!--
fix-hebrew.xsl2 for the Open Siddur project.
Copyright 2012 Marc Stober and licensed under the GNU LGPL.

Fixes an issue where Hebrew characters appear out of order.
-->
<xsl:stylesheet version="2.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:str="http://exslt.org/strings"
	xmlns:my="https://github.com/marcstober/opensiddur/blob/master/code/input-conversion/1917JPS/my">

	<xsl:include href="functions.xsl2"/>
	<xsl:output method="xml" version="1.0" indent="yes" />

	<xsl:template match="@*|*">
		<xsl:copy>
			<xsl:apply-templates select="*|@*|node()"/>
		</xsl:copy>
	</xsl:template>

	<xsl:template match="text[my:is-hebrew(.) = 'true' and 
		(my:is-hebrew-char(.) or 
		(./@y = preceding-sibling::*[1]/@y
		and my:is-hebrew-char(following-sibling::*[1]) = 'true'))]"> 
		<!-- debugging
				<xsl:when test="my:is-hebrew(.) = 'true' and 
					my:is-hebrew(following-sibling::text[1]) = 'true' and
					(./@x &lt; following-sibling::text[1]/@x)">
					<xsl:value-of select="."/>
				</xsl:when>
		 -->
		<xsl:if test="my:is-hebrew(preceding-sibling::text[1]) = 'false'">
			<xsl:variable name="y" select="@y"/>
			<xsl:for-each select=".|following-sibling::text[
				my:is-hebrew(.) = 'true' and $y = @y and
				(my:is-hebrew-char(.) = 'true' or my:is-hebrew-char(following-sibling::*[1]) = 'true' )]">
				<xsl:sort select="@x" order="descending" data-type="number"/>
				<xsl:copy>
					<xsl:apply-templates select="*|@*|node()"/>
				</xsl:copy>
			</xsl:for-each>
		</xsl:if>
		<!-- this picks up spaces that trail some Hebrew -->
		<xsl:if test="not(my:is-hebrew-char(.) = 'true' or my:is-hebrew-char(following-sibling::*[1]) = 'true')">
			<xsl:copy>
				<xsl:apply-templates select="*|@*|node()"/>
			</xsl:copy>
		</xsl:if>
	</xsl:template>

</xsl:stylesheet>
