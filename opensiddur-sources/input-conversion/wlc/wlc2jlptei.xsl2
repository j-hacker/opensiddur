<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xsl:stylesheet [
<!ENTITY % hebrewent PUBLIC "HEBREW" "hebrew.dtd">
%hebrewent;
]>
<!-- 
TODO: 
  change prose-poetic division to only break on ethnah, zaqef, revia
- insert poetic divisions when necessary
- make proper bibliography entry including edition # from teiHeader
-->
<xsl:stylesheet version="2.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" 
  xmlns:jx="http://jewishliturgy.org/ns/jlptei-processor"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:tmp="http://jewishliturgy.org/ns/tmp" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all">
  <xsl:import href="../../common/params.xsl2" />
  <xsl:import href="../../common/cRef.xsl2" />
  <xsl:import href="../rawtext/split-word.xsl2" />
  <xsl:import href="../rawtext/normalize-nonunicode.xsl2" />
  <xsl:import href="../fill-template.xsl2" />
  <xsl:output indent="yes" encoding="utf-8" method="xml" />
  <xd:doc type="stylesheet">
    <xd:short>Convert the Joined WLC to JLPTEI.</xd:short>
    <xd:copyright>Copyright 2009-2010,2012-2014 Efraim Feinstein
    </xd:copyright>
    <xd:detail>
      <p>This program is free software: you can redistribute it
        and/or modify
        it under the terms of the GNU Lesser General Public License as
        published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be
        useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU Lesser General Public License for more details.</p>

      <p>
        You should have received a copy of the GNU Lesser General Public
        License
        along with this program. If not, see
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/
        </a>
        .
      </p>
    </xd:detail>
  </xd:doc>

  <xd:doc>
    Location of input file containing the tanach as utf8 text
	</xd:doc>
  <xsl:param name="input-file" as="xs:string"
    select="'../../../sources/tanach/WLC/joined-wlc.xml'" />

  <xd:doc>
    Location of files for output (relative to the location where the script is run)
	</xd:doc>
  <xsl:param name="result-directory" as="xs:string" select="'tanach'" />

  <xd:doc>
    Location of result directory relative to the XML catalog
	</xd:doc>
  <xsl:param name="result-directory-from-catalog" as="xs:string"
    select="'../text'" />
  
  <xd:doc>
    Subdirectory of $result-directory to place tanach original files in
  </xd:doc>
  <xsl:param name="result-subdirectory" as="xs:string"
    select="'original'"/>

  <xd:doc>
    Notes file name (base of name without extension)
  </xd:doc>
  <xsl:param name="notes-file-name" as="xs:string"
    select="concat('notes/', encode-for-uri('Notes from the Westminster Leningrad Codex'))"/>

  <xd:doc>
    Contributor list entry file name (base w/o extension)
  </xd:doc>
  <xsl:param name="contributors-file-name" as="xs:string" 
    select="concat('user/', encode-for-uri('Christopher.Kimball'))"/>

  <xd:doc>
    extension of output files
	</xd:doc>
  <xsl:param name="extension" as="xs:string" select="'.xml'" />

  <xd:doc>
    Lists books and chapters that should have a poetic hierarchy in addition to
    the prose hierarchy
    books: tmp:book[@name]
    chapters: tmp:book[@name]/tmp:chapter[@begin,@end]+
    verses: "/tmp:verse[@begin,@beginSegment,@end,@endSegment]
      @beginSegment and @endSegment are segment numbers (starting from 1)
      for beginnings and endings at partial verses 
	</xd:doc>
    <xsl:param name="poetic-parts" as="element(tmp:poeticList)">
    <tmp:poeticList>
      <tmp:book name="Exodus">
        <tmp:chapter begin="15" end="15"><!-- shirat hayyam -->
          <tmp:verse begin="1" beginSegment="3" end="18" />
        </tmp:chapter>
      </tmp:book>
      <tmp:book name="Numbers">
        <tmp:chapter begin="10" end="10"><!-- vayhi binsoa haaron -->
          <tmp:verse begin="35" beginSegment="2" end="35" />
          <tmp:verse begin="36" beginSegment="2" end="36" />
        </tmp:chapter>
      </tmp:book>
      <tmp:book name="Deuteronomy">
        <tmp:chapter begin="32" end="32"><!-- haazinu -->
          <tmp:verse begin="1" end="52"/>
        </tmp:chapter>
      </tmp:book>
      <tmp:book name="Judges">
        <tmp:chapter begin="5" end="5"><!-- Deborah's song -->
          <tmp:verse begin="2" end="31" endSegment="3" />
        </tmp:chapter>
      </tmp:book>
      <tmp:book name="Psalms" />
      <tmp:book name="Proverbs" />
      <tmp:book name="Job" />
    </tmp:poeticList>
  </xsl:param>

  <xd:doc>
    <xd:short>Return a reformatted date from DD\sMonth\sYYYY to YYYY-MM-DD</xd:short>
  </xd:doc>
  <xsl:function name="func:reformat-date" as="xs:string">
    <xsl:param name="old-date" as="xs:string"/>
    <xsl:variable name="months" as="element()">
      <months>
        <month n="01" name="jan"/>
        <month n="02" name="feb"/>
        <month n="03" name="mar"/>
        <month n="04" name="apr"/>
        <month n="05" name="may"/>
        <month n="06" name="jun"/>
        <month n="07" name="jul"/>
        <month n="08" name="aug"/>
        <month n="09" name="sep"/>
        <month n="10" name="oct"/>
        <month n="11" name="nov"/>
        <month n="12" name="dec"/>
      </months>
    </xsl:variable>

    <xsl:analyze-string regex="(\d{{1,2}})\s+(\S+)\s+(\d{{4}})" select="$old-date">
      <xsl:matching-substring>
        <xsl:variable name="day" select="regex-group(1)"/>
        <xsl:variable name="month" select="lower-case(regex-group(2))"/>
        <xsl:variable name="year" select="regex-group(3)"/>
        <xsl:sequence select="string-join((
              $year,
              $months/month[@name=$month]/@n,
              format-number(number($day), '00')
              ), '-')"/>
      </xsl:matching-substring>
    </xsl:analyze-string>
  </xsl:function>

  <xd:doc>
    <xd:short>Return the generated xml:id of a word</xd:short>
  </xd:doc>
  <xsl:function name="func:make-word-xmlid" as="xs:string">
    <xsl:param name="context" as="element()"/>
    <!-- Really, this should only count words, but if samekh/pe=pc, there can be 2x pc after 
    one word, and that will cause invalidity by repeated xml:id -->
    <xsl:sequence select="string-join(
          ('v',substring-after($context/ancestor::tei:ab/@xml:id,'v'),
          $context/local-name(),
          xs:string(count(
            ($context/preceding::tei:w | $context/preceding::tei:pc)
            intersect $context/ancestor::tei:ab//element()) + 1)),'')"/>
  </xsl:function>
  
  <xd:doc>
    <xd:short>Determine if a verse should have a poetic equivalent
    hierarchy. Return a boolean.</xd:short>
    <xd:param name="book">Book name</xd:param>
    <xd:param name="chap">Chapter number</xd:param>
    <xd:param name="verse">Verse number</xd:param>
  </xd:doc>
  <xsl:function name="func:is-poetic-verse" as="xs:boolean">
    <xsl:param name="book" as="xs:string"/>
    <xsl:param name="chap" as="xs:integer"/>
    <xsl:param name="verse" as="xs:integer"/>
    <xsl:variable name="book-ref" as="element()?" 
      select="$poetic-parts/tmp:book[@name=$book]"/>
    <xsl:variable name="chapter-ref" as="element()?"
      select="$book-ref/tmp:chapter
        [$chap &gt;= @begin and $chap &lt;= @end]"/>
    <xsl:variable name="verse-ref" as="element()?"
      select="$chapter-ref/tmp:verse
        [$verse &gt;= @begin and $verse &lt;= @end]"/>
    <xsl:variable name="return" as="xs:boolean" select="
      ($book-ref and empty($book-ref/tmp:chapter)) or
      ($chapter-ref and empty($chapter-ref/tmp:verse)) or
      ($verse-ref)"/> 
    <!-- xsl:sequence select="func:debug($return,string-join(('is-poetic-verse(',$book,',',string($chap),',',string($verse),')'),''), $debug-info)"/-->
    <xsl:value-of select="$return"/>
  </xsl:function> 
  
  <xd:doc>
    <xd:short>Convert a book/chap reference to a uri fragment
    </xd:short>
  </xd:doc>
  <xsl:function name="func:bookref-to-uri" as="xs:string">
    <xsl:param name="book" as="xs:string" />
    <xsl:param name="chap" as="xs:string?" />

    <xsl:variable name="book-chap-en" select="string-join(($book, $chap), ' ')"/>
    <xsl:sequence select="
      encode-for-uri(
        replace(
          func:resolve-cRef('Biblical',$book-chap-en,'he'),
          '\p{M}', ''
        ) 
      )"/>
  </xsl:function>	
 
	<xd:doc>
		<xd:short>assign an id to a word by adding a base to a number</xd:short>
	</xd:doc>
	<xsl:template match="tei:w|tei:c|tei:pc" mode="process-text">
    <!-- xsl:message>
      <xsl:if test="self::tei:w">
    tei:w: parent= <xsl:sequence select="parent::*"/>
    </xsl:if></xsl:message-->
		<xsl:copy copy-namespaces="no">
      <!-- always label w, c, pc by the word number of the preceding
      word -->
			<xsl:attribute name="xml:id" 
        select="func:make-word-xmlid(.)"/>
        
			<xsl:copy-of select="@*" copy-namespaces="no"/>
			<xsl:apply-templates select="node() except (x)" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	
  <xd:doc>
    <xd:short>ignore x</xd:short>
  </xd:doc>
  <xsl:template match="x" mode="process-text"/>
  
	<xd:doc>
		<xd:short>Split a given verse into segments based on trope</xd:short>
		<xd:param name="emet-verse">set to true() if the verse should be considered to use eme"t trope. otherwise, false</xd:param>
	</xd:doc>
	<xsl:template name="segment-verse">
		<xsl:param name="verse" as="element(tei:ab)"/>
		<xsl:param name="emet-verse" as="xs:boolean" select="false()"/>
		<!-- $emet-verse is true when eme"t book-only trope are used -->
		
		<xsl:sequence select="func:debug($verse, 'segment-verse got', $debug-detail)"/>
		
		<xsl:apply-templates select="$verse" mode="segment-verse">
			<xsl:with-param name="emet-verse" select="$emet-verse" as="xs:boolean" tunnel="yes"/>
		</xsl:apply-templates>
	</xsl:template>
	
	<xd:doc>
		<xd:short>Use the verse divisions produced  by tei:w to break up the verse into multiple segments.  Split them into text-library and hierarchy.  Use</xd:short>
	</xd:doc>
	<xsl:template match="tei:ab" mode="segment-verse">
    <xsl:variable name="processed-text" as="document-node()">
      <xsl:document>
        <xsl:apply-templates mode="process-text"/>
      </xsl:document>
    </xsl:variable>
		<xsl:variable name="segmented-verse" as="node()+">
			<xsl:apply-templates select="$processed-text" mode="#current"/>
		</xsl:variable>
		<xsl:variable name="verse-id" select="@xml:id"/>
	
		<xsl:for-each-group select="$segmented-verse/self::*" group-ending-with="tei:lb">
				<tei:seg>
					<xsl:attribute name="xml:id" select="string-join(($verse-id,'_seg',string(position())),'')"/>
					<xsl:sequence 
            select="current-group()/self::* except current-group()/self::tei:lb"
            />
				</tei:seg>
		</xsl:for-each-group>
	
		<!--xsl:sequence select="j:debug($segments,'segments=',$debug-info)"/-->
		
	</xsl:template>
	
  <xd:doc>
    <xd:short>notes element is removed</xd:short>
  </xd:doc>
  <xsl:template match="notes" mode="#all">
    <xsl:apply-templates mode="#current"/>
  </xsl:template>
    
  <xd:doc>
    <xd:short>Copy notes element and content</xd:short>
  </xd:doc>
  <xsl:template match="tei:note" mode="notes-annotation">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*" copy-namespaces="no"/>
      <xsl:attribute name="type">editorial</xsl:attribute>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
	<xd:short>Leave an empty "tei:lb" element at the end of a segment (before this word), if necessary</xd:short>
    <xd:detail>This code operates under the assumption that a segment will never break up
    in the middle of a kri-ktiv. </xd:detail>
	<xd:param name="emet-verse">true if emet trope are used.</xd:param>
  </xd:doc>
  <xsl:template match="tei:w|tei:choice" mode="segment-verse">
	 <xsl:param tunnel="yes" name="emet-verse" as="xs:boolean" select="false()"/>
	
    <!-- poetic verse, break into segments at ole-merkha(=ole vyored), ethahtah and sof pasuq -->
    <!-- regular verse, break into segments at revia,ethnahta, zaqef katan, sof pasuq -->
    <xsl:if test="if ($emet-verse) 
      then (
        matches(preceding::tei:w[1],
          '([&etnahta;&sofpasuq;]|(&ole;.*&merkha;))') 
        or 
        (matches(preceding::tei:w[1],'^[^&ole;]*&merkha;') and 
          matches(preceding::tei:w[2],'&ole;[^&merkha;]*$'))
      )
      else 
        matches(preceding::tei:w[1], 
          '[&sofpasuq;&etnahta;&zaqefqatan;&zaqefgadol;&accentsegol;&shalshelet;&revia;&tevir;&merkhakefula;]')">
      <tei:lb/>
    </xsl:if>
  
	 <xsl:copy copy-namespaces="no">
	   <xsl:copy-of select="@*" copy-namespaces="no"/>
	   <xsl:sequence select="node()"/>
	 </xsl:copy>
  </xsl:template>
	
	<xd:doc>
		<xd:short>Normalize text to SBL Hebrew conventions, 
    mark the tetragrammaton with j:divineName. 
    Return either text() or text(),j:divineName</xd:short>
	</xd:doc>
	<xsl:template match="text()" mode="process-text">
		<xsl:variable name="normalized-text" as="xs:string" 
      select="func:normalize-nonunicode(normalize-space(.))"/>
		<xsl:analyze-string select="$normalized-text" regex="&yod;[&sheva;&trope;]*&he;[&trope;]*&vav;[&patah;&qamats;&trope;]*&he;[&trope;]?">
			<xsl:matching-substring>
				<j:divineName>
					<xsl:value-of select="."/>
				</j:divineName>
			</xsl:matching-substring>
			<xsl:non-matching-substring>
                <!-- correct the holam-vav convention to vav-holam
                and vowel-vav-holam to vowel-vav-holam haser for vav -->
                <xsl:value-of 
                  select="replace(replace(.,
                    '([&aleph;-&tav;][&dageshormapiq;]?)([&trope;]?)&holam;([&meteg;]?)([&trope;]?)&vav;([&trope;]?)([&aleph;-&tav;]|$)', 
                    '$1$2$3$4$5&vav;&holam;$6'),
                    '([&vowel;][&trope;]?)&vav;([&dageshormapiq;]?)&holam;',
                    '$1&vav;$2&holamhaserforvav;')"/>
			</xsl:non-matching-substring>
		</xsl:analyze-string>
	</xsl:template>

  <xd:doc>
    <xd:short>Turn WLC x into a link for a tei:note</xd:short>
  </xd:doc>
  <xsl:template match="x" mode="link-notes">
    <xsl:variable name="link-to-id" as="xs:string?"
      select="if (parent::tei:w) 
        then func:make-word-xmlid(parent::tei:w)
        else if (following-sibling::*[1]) 
        then func:make-word-xmlid(following-sibling::*[1])
        else func:debug(('note I do not know what to link it to', parent::*), 'x', $debug-error)"/>
    <tei:link type="note" target="{string-join(
      ('#',$link-to-id, ' /data/',$notes-file-name,'#note_',.),'')}"/>
  </xsl:template>
	
  <xsl:template match="text()" mode="link-notes"/>
  
	<xd:doc>
		<xd:short>copy xml markup</xd:short>
	</xd:doc>
	<xsl:template match="*" mode="format-line process-text segment-verse">
		<xsl:copy copy-namespaces="no">
			<xsl:copy-of select="@*" copy-namespaces="no" />
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>

	<xd:doc>
		<xd:short>Fake template to start main in case command line parameters can't be passed</xd:short>
	</xd:doc>
	<xsl:template match="/">
		<xsl:call-template name="main"/>
	</xsl:template>

  <xd:doc>
    <xd:short>Entry point for standalone program</xd:short>
  </xd:doc>
  <xsl:template name="main">
    <xsl:variable name="tanach-as-xml" as="document-node()"
      select="document($input-file)" />
    <xsl:variable name="bibliography-file-name" as="xs:string" 
      select="concat('sources/',encode-for-uri($tanach-as-xml//fileDesc//title[@level='s' and @type='main']))"/>
    
    <xsl:variable name="bibl-content" as="element(tei:bibl)">
      <tei:bibl>
        <tei:ptr type="bibl" target="/data/{$bibliography-file-name}"/>
        <tei:ptr type="bibl-content" target="#text"/>
      </tei:bibl>
    </xsl:variable>
    <xsl:variable name="license-content" as="element()+">
      <tei:licence 
          target="http://www.creativecommons.org/publicdomain/zero/1.0"/>
    </xsl:variable>
    <xsl:variable name="responsGrp-content" as="element(tei:respStmt)+">
      <tei:respStmt>
        <tei:resp key="trc">Transcribed by</tei:resp> 
        <tei:name ref="/{$contributors-file-name}">Christopher Kimball</tei:name>
      </tei:respStmt>
    </xsl:variable>

    <!-- produce the whole-tanach file -->
    <!-- note: a dumb limitation of XSLT 2.0 (no result-document in xsl:with-param) 
      makes this algorithm far from efficient -->

    <xsl:sequence
      select="func:debug('writing Tanach.xml', 'tanach2jlptei', $debug-detail)" />
    <xsl:variable name="Tanach-title" as="xs:string">תנ״ך</xsl:variable>
    <xsl:result-document
      href="{$result-directory}/{$result-subdirectory}/{encode-for-uri($Tanach-title)}{$extension}">
      <xsl:call-template name="fill-template">
        <xsl:with-param name="title" as="element(tei:title)+">
          <tei:title type="main" xml:lang="he"><xsl:value-of select="$Tanach-title"/></tei:title>
          <tei:title type="alt" xml:lang="he-Latn">Tanach</tei:title>
          <tei:title type="alt" xml:lang="he-Latn">Tanakh</tei:title>
          <tei:title type="alt" xml:lang="en">Bible</tei:title>
        </xsl:with-param>
        <xsl:with-param name="body" as="element()+">
          <xsl:variable name="book-ptrs" as="element(tmp:books)">
            <tmp:books>
              <xsl:for-each select="$tanach-as-xml//book">
                <xsl:variable name="book" select="names/name"
                  as="xs:string" />
                <xsl:variable name="book-uri"
                  select="func:bookref-to-uri($book, ())" />
                <tei:ptr target="/data/original/{$book-uri}#text">
                  <xsl:attribute name="xml:id"
                    select="concat('se_',translate($book, ' ', '_'))" />
                </tei:ptr>
             </xsl:for-each>
            </tmp:books>
          </xsl:variable>
          <j:streamText>
            <xsl:attribute name="xml:id" select="'text'" />
            <!-- each chapter and book is its own file too -->
            <!-- books get referenced in the whole-tanach file -->
            <xsl:copy-of copy-namespaces="no" select="$book-ptrs/tei:ptr"/>
          </j:streamText>
          <j:concurrent>
            <xsl:attribute name="xml:id" select="'concurrent'" />
            <j:layer type="div">
              <xsl:attribute name="xml:id" select="'layer_div'" />
              <tei:div>
                <xsl:attribute name="xml:id" select="'main'" />
                <tei:head xml:lang="he">תנ״ך</tei:head>
                <tei:ab>
                  <tei:ptr xml:id="tanach"
                    target="#range({$book-ptrs/tei:ptr[1]/@xml:id},{$book-ptrs/tei:ptr[last()]/@xml:id})"
                    xsl:exclude-result-prefixes="jx" />
                </tei:ab>
              </tei:div>
            </j:layer>
          </j:concurrent>
        </xsl:with-param>
        <xsl:with-param name="license" as="element()+" select="$license-content" />
        <xsl:with-param name="bibliography"
          as="element(tei:bibl)" select="$bibl-content" />
        <xsl:with-param name="respons"
          as="element(tei:respStmt)" select="$responsGrp-content"/>
      </xsl:call-template>
    </xsl:result-document>
    
    <!-- books -->
    <xsl:for-each select="$tanach-as-xml//book">
      <xsl:variable name="book" select="names/name" as="xs:string" />
      <xsl:sequence
        select="func:debug(concat('writing ', $book) , 'tanach2jlptei', $debug-detail)" />
      <xsl:variable name="book-he"
        select="func:resolve-cRef('Biblical', $book, 'he')" />
      <xsl:variable name="book-uri" select="func:bookref-to-uri($book, ())" />
      <xsl:variable name="book-filename" select="concat($book-uri,$extension)" />
        
      <xsl:result-document
        href="{$result-directory}/{$result-subdirectory}/{$book-filename}">
        <xsl:call-template name="fill-template">
          <xsl:with-param name="title"
            as="element(tei:title)+">
            <tei:title type="main" xml:lang="he">
              <xsl:value-of select="$book-he" />
            </tei:title>
            <tei:title type="alt" xml:lang="en">
              <xsl:value-of select="$book" />
            </tei:title>
          </xsl:with-param>
          <xsl:with-param name="respons"
          as="element(tei:respStmt)" select="$responsGrp-content"/>
          <xsl:with-param name="body" as="element()+">
            <xsl:variable name="chapter-ptrs" as="element(jx:tmp)">
              <jx:tmp>
                <xsl:for-each select="c">
                  <xsl:variable name="chap" select="@n" />
                  <xsl:variable name="chap-uri"
                    select="func:bookref-to-uri($book, $chap)" />
                  <tei:ptr target="/data/original/{$chap-uri}#text">
                    <xsl:attribute name="xml:id"
                      select="concat('se_ch',$chap)" />
                  </tei:ptr>
                </xsl:for-each>
              </jx:tmp>
            </xsl:variable>
            <j:streamText>
              <xsl:attribute name="xml:id" select="'text'"/>
              <xsl:copy-of copy-namespaces="no" select="$chapter-ptrs/tei:ptr"/>
            </j:streamText>
            <j:concurrent>
              <xsl:attribute name="xml:id" select="'concurrent'" />
              <j:layer type="div">
                <xsl:attribute name="xml:id" select="'layer_div'" />
                <tei:div>
                  <xsl:attribute name="xml:id" select="'main'"/>
                  <tei:head xml:lang="he">
                    <xsl:value-of select="$book-he" />
                  </tei:head>
                  <tei:ab>
                    <xsl:choose>
                      <xsl:when test="count($chapter-ptrs/tei:ptr)=1">
                        <tei:ptr target="#{$chapter-ptrs/tei:ptr/@xml:id}"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <tei:ptr
                          target="#range({$chapter-ptrs/tei:ptr[1]/@xml:id},{$chapter-ptrs/tei:ptr[last()]/@xml:id})" />
                      </xsl:otherwise>
                    </xsl:choose>
                  </tei:ab>
                </tei:div> 
              </j:layer>
            </j:concurrent>
          </xsl:with-param>
          <xsl:with-param name="license" as="element()+" select="$license-content" />
          <xsl:with-param name="bibliography" as="element(tei:bibl)" select="$bibl-content" />
        </xsl:call-template>
      </xsl:result-document>
    </xsl:for-each>

    <!-- book chapters (including tanach text) -->
    <xsl:for-each select="$tanach-as-xml//book">
      <xsl:variable name="book" select="names/name" as="xs:string" />
      <xsl:variable name="book-he"
        select="func:resolve-cRef('Biblical', $book,'he')" as="xs:string" />
      <xsl:variable name="book-uri" select="func:bookref-to-uri($book, ())" />
      <xsl:variable name="book-filename" select="concat($book-uri, $extension)" />
      <xsl:for-each select="c">
        <xsl:variable name="chap" select="@n" />
        <!-- type of trope the chapter uses -->
        <xsl:variable name="emet-chapter"
          select="matches(string(.),'[&ole;-&dehi;]')" as="xs:boolean" />
        <xsl:sequence
          select="func:debug(string-join(('writing',$book,$chap, 'emet-verse=', xs:string($emet-chapter)),' '), 'tanach2jlptei', $debug-detail)" />
        <xsl:variable name="chap-uri"
          select="func:bookref-to-uri($book-he, $chap)" />
        <xsl:variable name="book-chap-en"
          select="string-join(($book,$chap),' ')" />
        <xsl:variable name="book-chap-he"
          select="func:resolve-cRef('Biblical',$book-chap-en,'he')" />
        <xsl:variable name="book-chap-uri" select="func:bookref-to-uri($book, $chap)"/>
        <xsl:variable name="chap-filename" select="concat($book-chap-uri,$extension)" />

        <xsl:result-document
          href="{$result-directory}/{$result-subdirectory}/{$chap-filename}">
          <xsl:call-template name="fill-template">
            <xsl:with-param name="title" as="element(tei:title)+">
              <tei:title type="main" xml:lang="he">
                <xsl:value-of select="$book-chap-he" />
              </tei:title>
              <tei:title type="alt" xml:lang="en">
                <xsl:value-of select="$book-chap-en"/>
              </tei:title>
            </xsl:with-param>
            <xsl:with-param name="body" as="element()+">
              <xsl:variable name="bodies" as="element()+">
                <xsl:for-each select="tei:ab">
                  <xsl:variable name="verse-id" as="xs:string"
                    select="@xml:id" />
                  
                  <xsl:variable name="verse-s" as="element(tei:ab)">
                    <tei:ab>
                      <xsl:attribute name="xml:id"
                        select="$verse-id" />
                      <xsl:sequence select="*" />
                    </tei:ab>
                  </xsl:variable>
                  
                  <xsl:variable name="segments"
                    as="element(tei:seg)+">
                    <xsl:call-template name="segment-verse">
                      <xsl:with-param name="verse"
                        select="$verse-s" />
                      <xsl:with-param name="emet-verse"
                        as="xs:boolean" select="$emet-chapter" />
                    </xsl:call-template>
                  </xsl:variable>

                  <!-- segments for text repository -->
                  <xsl:sequence select="$segments" />

                  <!-- l for l-view -->
                  <xsl:variable name="l-ptr"
                    as="element()+">
                    <xsl:for-each select="$segments">
                      <tei:l>
                        <xsl:attribute name="xml:id"
                          select="concat('l_',@xml:id)" />
                        <tei:ptr target="#{@xml:id}" />
                      </tei:l>
                    </xsl:for-each>
                  </xsl:variable>
                  <xsl:sequence select="$l-ptr/self::tei:ptr" />

                  <xsl:variable name="verse-num" as="xs:integer"
                    select="xs:integer(substring-after(@xml:id,'v'))" />
                  <!-- lg for lg view -->
                  <xsl:if
                    test="func:is-poetic-verse($book, $chap, 
                    $verse-num)">
                    <xsl:variable name="verse-lines"
                      as="document-node()">
                      <xsl:document>
                        <xsl:sequence select="$l-ptr/self::tei:l" />
                      </xsl:document>
                    </xsl:variable>
                    <xsl:variable name="chap-spec"
                      as="element(tmp:chapter)?"
                      select="$poetic-parts/tmp:book[@name=$book]/
                        tmp:chapter[@begin=$chap or @end=$chap]" />
                    <xsl:variable name="verse-spec"
                      as="element(tmp:verse)?"
                      select="$chap-spec/
                        tmp:verse[@begin=$verse-num or @end=$verse-num]
                        " />
                    <xsl:variable name="segments" as="xs:integer+"
                      select="
                      if ($chap-spec/@begin=$chap and
                        $verse-spec/@begin=$verse-num and 
                        $verse-spec/@beginSegment) 
                        then ($verse-spec/@beginSegment to 
                          count($verse-lines/*))
                        else if ($chap-spec/@end=$chap and
                          $verse-spec/@end=$verse-num and 
                          $verse-spec/@endSegment)
                        then 1 to $verse-spec/@endSegment
                        else 1 to count($verse-lines/*)" />
                    <tei:lg>
                      <xsl:attribute name="xml:id"
                        select="concat('lg_',$verse-id)" />
                      <xsl:sequence
                        select="$verse-lines/tei:l
                        [position()=$segments]" />
                    </tei:lg>
                  </xsl:if>

                  <!-- ab for verse-view -->
                  <tei:ab type="verse">
                    <xsl:attribute name="xml:id"
                      select="$verse-id" />
                    <tei:label n="verse">
                      <xsl:value-of
                        select="substring-after($verse-id, 'v')" />
                    </tei:label>

                    <xsl:for-each-group select="$segments"
                      group-by="position()">
                      <xsl:variable name="alphabetic-segment-number"
                        as="xs:string">
                        <xsl:number format="a"
                          value="current-grouping-key()" />
                      </xsl:variable>
                      <tei:ptr target="#{@xml:id}">
                        <xsl:attribute name="xml:id"
                          select="concat($verse-id, $alphabetic-segment-number)" />
                      </tei:ptr>
                    </xsl:for-each-group>
                  </tei:ab>

                </xsl:for-each>
              </xsl:variable>
              <xsl:variable name="streamable-text"
                    as="element(tei:seg)+" select="$bodies/self::tei:seg" />  
              
              <j:streamText>
                <xsl:attribute name="xml:id" select="'text'"/>
                <xsl:sequence select="$streamable-text"/>
              </j:streamText>
              <j:concurrent>
                <xsl:attribute name="xml:id" select="'concurrent'" />
                <xsl:variable name="sentence-content"
                  as="element(tei:ab)+" select="$bodies/self::tei:ab" />
                <xsl:variable name="lg-content" as="element(tei:lg)*"
                  select="$bodies/self::tei:lg" />
                <j:layer type="div">
                  <xsl:attribute name="xml:id" select="'layer_div'" />
                  <tei:div xml:id="main">
                    <tei:head>
                      <xsl:value-of select="$book-chap-he" />
                    </tei:head>
                    <tei:label n="chapter">
                      <xsl:value-of select="$chap" />
                    </tei:label>
                    <tei:ab>
                      <tei:ptr
                        target="#range({$streamable-text[1]/@xml:id},{$streamable-text[last()]/@xml:id})" />
                    </tei:ab>
                  </tei:div>
                </j:layer>
                <j:layer type="p">
                  <xsl:attribute name="xml:id" select="'layer_p'" />
                  <xsl:for-each-group select="$streamable-text"
                    group-ending-with="*[tei:pc=('&samekh;','&pe;')]">
                    <tei:p>
                      <xsl:attribute name="xml:id"
                        select="concat('p_',string(position()))" />
                      <xsl:choose>
                        <xsl:when test="count(current-group()) &gt; 1">
                          <tei:ptr
                            target="#range({current-group()[1]/@xml:id},{current-group()[last()]/@xml:id})" />
                        </xsl:when>
                        <xsl:otherwise>
                          <tei:ptr
                            target="#{current-group()[1]/@xml:id}" />
                        </xsl:otherwise>
                      </xsl:choose>
                    </tei:p>
                  </xsl:for-each-group>
                </j:layer>
                <j:layer type="verse">
                  <xsl:attribute name="xml:id" select="'layer_verse'" />
                  <xsl:sequence select="$sentence-content" />
                </j:layer>
                <xsl:if test="$lg-content">
                  <j:layer type="lg">
                    <xsl:attribute name="xml:id" select="'layer_lg'" />
                    <xsl:sequence select="$lg-content" />
                  </j:layer>
                </xsl:if>
              </j:concurrent>
            </xsl:with-param>
            <xsl:with-param name="license" 
              as="element()+" select="$license-content" />
            <xsl:with-param name="bibliography" 
              as="element(tei:bibl)" select="$bibl-content" />
            <xsl:with-param name="respons" 
              as="element(tei:respStmt)+" select="$responsGrp-content" />
            <xsl:with-param name="links" 
              as="element(j:links)?" >
                <j:links>
                    <xsl:apply-templates select="." mode="link-notes"/> 
                </j:links>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:result-document>
      </xsl:for-each>
    </xsl:for-each>
    
    <xsl:result-document
      href="{$result-directory}/{$notes-file-name}{$extension}">
      <xsl:call-template name="fill-template">
        <xsl:with-param name="xmllang" as="xs:string" select="'en'"/>
        <xsl:with-param name="title"
          as="element(tei:title)+">
          <tei:title type="main" xml:lang="en">Notes from the Westminster Leningrad Codex</tei:title>
        </xsl:with-param>
        <xsl:with-param name="respons" 
          as="element(tei:respStmt)">
          <tei:respStmt>
            <tei:resp key="trc">Transcribed by</tei:resp> 
            <tei:name ref="/{$contributors-file-name}">Christopher Kimball</tei:name>
          </tei:respStmt>          
        </xsl:with-param>
        <xsl:with-param name="annotations"
          as="element(j:annotations)">
          <j:annotations>
            <xsl:attribute name="xml:id" select="'ann'" />
            <xsl:apply-templates select="$tanach-as-xml//notes"
              mode="notes-annotation" />
          </j:annotations>
        </xsl:with-param>
        <xsl:with-param name="license" as="element()+" select="$license-content" />
        <xsl:with-param name="bibliography" as="element(tei:bibl)">
            <tei:bibl>
                <tei:ptr type="bibl" target="/data/{$bibliography-file-name}"/>
                <tei:ptr type="bibl-content" target="#ann"/>
            </tei:bibl>
        </xsl:with-param>
      </xsl:call-template>
    </xsl:result-document>
    <xsl:result-document
      href="{$result-directory}/{$contributors-file-name}{$extension}">
      <j:contributor xml:lang="en">
        <tei:idno>Christopher.Kimball</tei:idno>
        <tei:name>
          <tei:forename>Christopher</tei:forename>
          <tei:surname>Kimball</tei:surname>
        </tei:name>
        <tei:email>transcriber@tanach.us</tei:email>
        <tei:affiliation>
          <tei:orgName>Westminster Leningrad Codex</tei:orgName>
          <tei:ptr type="url" target="http://tanach.us" />
        </tei:affiliation>
      </j:contributor>
    </xsl:result-document>
    <xsl:result-document
      href="{$result-directory}/{$bibliography-file-name}{$extension}">
      <tei:biblStruct xml:lang="en">
        <tei:monogr>
          <tei:title xml:lang="en" type="main">
            <xsl:value-of
              select="$tanach-as-xml//fileDesc//title[@level='s' and @type='main']" />
          </tei:title>
          <xsl:for-each
            select="$tanach-as-xml//titleStmt//editor|
            $tanach-as-xml//titleStmt//respStmt/name[not(@type)]">
            <tei:editor>
              <tei:name>
                <xsl:value-of select="." />
              </tei:name>
            </tei:editor>
          </xsl:for-each>
          <tei:edition>
            <xsl:text>v.</xsl:text>
            <xsl:value-of select="$tanach-as-xml//version/node()" />
          </tei:edition>
          <tei:imprint>
            <tei:publisher>J. Alan Groves Center for Advanced Biblical Research</tei:publisher>
            <tei:pubPlace>Glenside, PA</tei:pubPlace>
            <tei:date>
              <xsl:value-of select="func:reformat-date($tanach-as-xml//edition/date/node())" />
            </tei:date>
            <tei:distributor>
              <tei:name><xsl:value-of
                select="$tanach-as-xml//distributor/name[not(@type)]" /></tei:name>
              <tei:ref type="url"
                target="{$tanach-as-xml//distributor/name[@type='url']}">via web site</tei:ref>
              <tei:date type="access">2012-06-07</tei:date>
            </tei:distributor>
          </tei:imprint>
        </tei:monogr>
        <tei:idno type="archive.org">Leningrad_Codex</tei:idno>
        <tei:note type="copyright">
          <tei:note>The transcriber has released the text "without restriction."</tei:note>
            <tei:ref type="url"
              target="https://github.com/opensiddur/opensiddur/blob/master/opensiddur-sources/sources/tanach/WLC/License.html">Link to license.</tei:ref>
        </tei:note>
      </tei:biblStruct>
    </xsl:result-document>
  </xsl:template>
</xsl:stylesheet>
