<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xsl:stylesheet [
<!ENTITY % hebrewent PUBLIC "HEBREW" "hebrew.dtd">
%hebrewent;
]>
<xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:cc="http://web.resource.org/cc/"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"  
  exclude-result-prefixes="#all"
  >
  
  <xsl:import href="../fill-template.xsl2"/>
  <xsl:import href="../rawtext/split-word.xsl2"/>
  	
  <xd:doc type="stylesheet">
    <xd:short>Perform pre-encoding operations</xd:short>
    <xd:copyright>Copyright 2009,2012 Efraim Feinstein
    </xd:copyright>
    <xd:detail>
      <p>Pre-encoding includes:
      <ul>
        <li>Setup of a/more j:raw-containing valid TEI file(s),
        specified by /file (name)/ in the text source</li>
        <li>Basic segmentation, by line breaks</li>
        <li>Regularization of God's name</li>
        <li>Correct holam haser for vav (not needed w/WLC 4.12 or higher)</li>
        <li>Correct ktiv form of Yerushalayim</li>
        <li>Regularize dash to maqqaf in Hebrew text</li>
      </ul>
      </p>
      <p>This program is free software: you can redistribute it
        and/or modify
        it under the terms of the GNU Lesser General Public License as
        published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be
        useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU Lesser General Public License for more details.</p>

      <p>
        You should have received a copy of the GNU Lesser General Public
        License
        along with this program. If not, see
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/
        </a>
        .
      </p>
    </xd:detail>
  </xd:doc>

  <xsl:param name="input-filename" required="yes" as="xs:string" /> 
  <xsl:param name="output-directory" required="yes" as="xs:string" />

  <xd:doc>
    <xd:short>Extract the arguments to an instruction of the form
    /instruction arguments/, return as a string (or empty)</xd:short>
    <xd:param name="instruction">The instruction</xd:param>
    <xd:param name="string">The whole string</xd:param>
  </xd:doc>
  <xsl:function name="func:extract-instruction" as="xs:string?">
    <xsl:param name="instruction" as="xs:string"/>
    <xsl:param name="string" as="xs:string"/>
    
    <xsl:variable name="regex" as="xs:string"
      select="string-join((
        '/',$instruction,'(.+)/$'
      ),'')"/>
    
    <xsl:analyze-string select="$string" regex="{$regex}">
      <xsl:matching-substring>
        <xsl:sequence select="normalize-space(regex-group(1))"/>
      </xsl:matching-substring>
      <xsl:non-matching-substring/>
    </xsl:analyze-string>
  </xsl:function>

  <xd:doc>
    <xd:short>Convert a string into a text node in an xpath expression
    </xd:short>
    <xd:param name="string">The string to convert</xd:param>
  </xd:doc>
  <xsl:function name="func:text-node" as="text()">
    <xsl:param name="string" as="xs:string"/>
    
    <xsl:value-of select="$string"/>
  </xsl:function>

  <xd:doc>
    <xd:short>Already split elements run an identity transform in
    already-split mode</xd:short>
  </xd:doc>
  <xsl:template match="*" mode="already-split">
    <xsl:copy copy-namespaces="no">
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates mode="#current"/>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short>Search for regular expression matches and do 
    replacement for already-split text nodes</xd:short>
  </xd:doc>
  <xsl:template match="text()" mode="already-split">
    <xsl:variable name="yod-yod-regex" as="xs:string"
      select="'&yod;(&sheva;?)&yod;&qamats;'"/>
    <xsl:variable name="holam-haser-regex" as="xs:string"
      select="'([&vowel;][&trope;]?&vav;&dageshormapiq;?)&holam;'"/>
    <xsl:variable name="yerushalayim-regex" as="xs:string"
      select="string-join(('(&yod;&sheva;[&trope;]?&resh;&qubuts;?[&trope;]?',
        '(&vav;&dageshormapiq;)?&shin;&shindot;&qamats;[&trope;]?',
        '&lamed;)([&qamats;&patah;&meteg;&cgj;&hiriq;]+|([&trope;]))+(&finalmem;)'),'')"/>
    <xsl:variable name="dash-regex" as="xs:string"
      select="'-'"/>
    
    <xsl:analyze-string select="." 
      regex="{string-join(('(',$yod-yod-regex,(: groups 1, 2 :)
        ')|(',$holam-haser-regex,')|(',       (: groups 3-4 :)
        $yerushalayim-regex, ')|(',           (: groups 5-10 :)
        $dash-regex, ')'                      (: group 11 :) 
        ),'')}">
        <!--  -->
      <xsl:matching-substring>
        <xsl:choose>
          <xsl:when test="string-length(regex-group(1)) &gt; 0">
            <j:divineName>
              <tei:reg>
                <xsl:sequence select="string-join((
                  '&yod;',
                  regex-group(2),
                  '&he;&vav;&qamats;&he;'
                  ),'')"/>
              </tei:reg>
              <tei:orig>
                <xsl:copy/>
              </tei:orig>
            </j:divineName>
          </xsl:when>
          <!-- NOT NEEDED ANYMORE 
          <xsl:when test="string-length(regex-group(3)) &gt; 0">
            <xsl:value-of 
              select="string-join((regex-group(4),'&holamhaserforvav;'),'')"/>
          </xsl:when>
           -->
          <xsl:when test="string-length(regex-group(5)) &gt; 0">
            <xsl:variable name="vowel" select="
              if (contains(regex-group(8),'&qamats;')) 
              then '&qamats;'
              else '&patah;'"/>
            <tei:choice>
              <tei:orig>
                <xsl:sequence select="string-join((
                  regex-group(6),
                  $vowel, '&meteg;&cgj;&hiriq;',
                  regex-group(9),'&finalmem;'
                  ),'')"/>
              </tei:orig>
              <tei:reg>
                <xsl:sequence select="string-join((
                  regex-group(6),
                  $vowel, '&meteg;',
                  regex-group(9),'&yod;&hiriq;&finalmem;'
                  ),'')"/>
              </tei:reg>
            </tei:choice>
          </xsl:when>
          <xsl:when test="string-length(regex-group(11)) &gt; 0">
            <xsl:value-of select="'&maqaf;'"/>
          </xsl:when> 
          <xsl:otherwise/>
        </xsl:choose>
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:copy/>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
    
  </xsl:template>

  <xd:doc>
    <xd:short>Output an untyped segment</xd:short>
  </xd:doc>
  <xsl:template match="text()">
    <xsl:variable name="words" as="element()*">
      <xsl:call-template name="split-words">
        <xsl:with-param name="original-string" as="xs:string" select="."/>
        <xsl:with-param name="ignore" as="element(ignore)*" select="$ignore"/>
      </xsl:call-template>
    </xsl:variable>
    <tei:seg>
      <xsl:apply-templates select="$words" mode="already-split"/>
    </tei:seg>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Output a segment that records a language switch</xd:short>
  </xd:doc>
  <xsl:template match="text()[starts-with(.,'/lang')]" priority="10">
    <xsl:sequence select="func:extract-instruction('lang',.)"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Output a segment that records a new file break</xd:short>
  </xd:doc>
  <xsl:template match="text()[starts-with(.,'/file')]" priority="10">
    <tei:seg type="file">
      <xsl:sequence select="func:extract-instruction('file',.)"/>
    </tei:seg>    
  </xsl:template>
  
  <xd:doc>
    <xd:short>Output a segment that records a file's title</xd:short>
  </xd:doc>
  <xsl:template match="text()[starts-with(.,'/title')]" priority="10">
    <tei:seg type="title">
      <xsl:sequence select="func:extract-instruction('title',.)"/>
    </tei:seg>    
  </xsl:template>
  
  <xd:doc>
    <xd:short>Output a segment that returns a header</xd:short>
  </xd:doc>
  <xsl:template match="text()[starts-with(.,'/head')]" priority="10">
    <tei:seg type="heading-next">
      <xsl:sequence select="func:extract-instruction('head',.)"/>
    </tei:seg>    
  </xsl:template>
  
  <xd:doc>
    <xd:short>Output a segment that returns an unknown 
    instruction to the encoder</xd:short>
  </xd:doc>
  <xsl:template match="text()[starts-with(.,'/')]" priority="9">
    <tei:seg type="encoder-instruction">
      <xsl:copy/>
    </tei:seg>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Main entry point.  Requires two sylesheet parameters:
    $input-filename and $output-directory.  Split the input text
    by file, apply templates to split by segment.</xd:short>
  </xd:doc>
  <xsl:template name="main">
    <xsl:variable name="segmentized" as="element()">
      <segmentized>
        <xsl:apply-templates 
          select="for $t in 
            tokenize(unparsed-text($input-filename),'[\r\n]+')
            return func:text-node($t)"/>
      </segmentized>
    </xsl:variable>
    <xsl:variable name="lang-default" as="xs:string" 
      select="($segmentized/tei:seg[@type='lang'],'he')[1]"/>
    <xsl:for-each-group 
      select="$segmentized/*"
      group-starting-with="tei:seg[@type='file']">
      <xsl:variable name="file-name" as="xs:string?"
        select="current-group()/self::tei:seg[@type='file']"/>
      <xsl:if test="string-length($file-name) &gt; 0">
        <xsl:result-document href="{concat($output-directory,$file-name)}">
          <xsl:call-template name="fill-template">
            <xsl:with-param name="title" as="element(tei:title)+">
              <tei:title xml:lang="{$lang-default}">
                <xsl:sequence select="string(current-group()/
                  self::tei:seg[@type='title'])"/>
              </tei:title>
            </xsl:with-param>
            <xsl:with-param name="license" as="element(tei:licence)+">
              <tei:licence target="http://creativecommons.org/publicdomain/cc0/1.0"/>
            </xsl:with-param>
            <xsl:with-param name="bibliography" as="element(tei:ptr)+">
              <tei:link type="bibl" target="#FILL-ME-IN /data/sources/FILL-ME-IN" />
            </xsl:with-param>
            <xsl:with-param name="body" as="element()" tunnel="yes">
              <j:streamText xml:lang="{$lang-default}">
                <xsl:sequence select="current-group()/self::tei:seg[not(@type='file')]"/>
              </j:streamText>
            </xsl:with-param>
          </xsl:call-template>
        </xsl:result-document>
      </xsl:if>
    </xsl:for-each-group>

	</xsl:template>
</xsl:stylesheet>
