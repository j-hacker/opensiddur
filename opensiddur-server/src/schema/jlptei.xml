<?xml version="1.0" encoding="utf-8"?>
<TEI 
  xmlns="http://www.tei-c.org/ns/1.0" 
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Open Siddur Jewish Liturgy TEI extension</title>
        <editor xml:id="EDF">Efraim Feinstein</editor>
        <editor xml:id="sbauman.emt">Syd Bauman</editor>
        <editor xml:id="LB">Lou Burnard</editor>
        <editor xml:id="SR">Sebastian Rahtz</editor>
      </titleStmt>
      <publicationStmt>
        <availability status="restricted">
          <licence target="http://www.creativecommons.org/licenses/by-sa/3.0"/>
        </availability>
      </publicationStmt>
      <notesStmt>
        <note type="ns">http://jewishliturgy.org/ns/jlptei/1.0</note>
      </notesStmt>
      <sourceDesc>
        <p>Initially created on <date when="2006-10-12T05:24:41">Thursday 12th
            October 2006</date> by the form at
        http://www.tei-c.org.uk/Roma/.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2012-05-06" who="#EDF">Change bare TEI ODD to JLPTEI</change>
      <change when="2011-03-26" who="#SR">rewrite as new-style ODD </change>
      <change when="2007-08-12" who="#LB">Removed further elements added
since this ODD was first created </change>
      <change when="2007-04-09" who="#LB">Added prose and reorganized
structure to make it more document-like; changed deletion of attribute
decls into deletion of att.declaring class; add deletes for elements
email and floatingText added to P5 since this ODD was first created;
considered but did not implement removal of all irrelevant datatype specs...</change>
      <change when="2006-10-14" who="#sbauman.emt"> Made valid: <list><item>removed empty <att>prefix</att> attribute</item><item>added required <att>type</att> attribute to
          <gi>classSpec</gi>s</item></list><!--. <note>Sebastian had also made the above changes.</note> -->Also
        removed extraneous <gi>altIdent</gi> elements, improved
        <gi>sourceDesc</gi>, changed the <att>ident</att> of <gi>schemaSpec</gi>
        to match the filename, and added this revision description. </change>
    </revisionDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <p>This customization produces an extension usable in tagging Jewish liturgy for the Open Siddur Project.</p>
      <div><head>Introduction</head><!-- TODO: encode -->
On the most basic level, the siddur is simple text. As such, on first thought, a transcription of the material on a wiki, in a word processor document, or in a text file would seem sufficient for its representation. If that is the case, why define an XML encoding? And why does JLPTEI require the features it does? This introduction addresses the essential problems in representing the Jewish liturgy on a computer and how JLPTEI approaches the problems. It also gives the reasons behind some of the tradeoffs that were made in the design of JLPTEI.
JLPTEI is a technical means to achieving the Open Siddur Project's Mission Statement. As such, it must support "texts and supplemental material that may be accessed, shared, adapted, and improved on by the entire Jewish community," "a non-prescriptive attitude towards the manner in which individuals and communities engage tradition," "pluralism that reflects the multiplicity of creative expressions possible," and "awareness of historical, geographical, and philosophical diversity in Jewish communities." Respect for communal and individual diversity is at the core of the Open Siddur/Jewish Liturgy Project's mission, and guides the project's technological vision.
There is no such thing as a single text called The Siddur. On the broadest scale, siddur texts may be divided by rite (nusah). However, even accepting that there are multiple base texts, neither is there a single Ashkenazic siddur, Hasidic siddur, Sephardic siddur, etc. A rite is a major division which uniquely specifies a common denominator of customs within a group of customs. Within Ashkenaz, there are differences between the Polish and German customs. The Iraqi custom is not the same as the Yemenite custom, and the Lubavitch custom is not the same as the Breslov custom. There are also divisions within each rite along major the philosophical boundaries that have developed in recent centuries, which lead to differences in custom and text. The traditional-egalitarian rite (usually a variant of the Ashkenazic rite), for example, is still undergoing major evolution. As such, it is impossible to maintain a single source text. It is possible to maintain a bank of source texts, calling each one by the name of a given rite. The latter is the approach taken by many vendors, who will sell an electronic edition of a base-text siddur from a given rite. However, from a philosophical perspective, that approach fails to recognize diversity within Jewish communities, and essentially requires the project to canonize one text over another in the distributed version. Further, from a technical perspective, as more base texts are completed, the project becomes unscalable; with many copies of common texts in the archive, both correcting mistakes and remixing content in novel ways become increasingly difficult.
In addition, a modern siddur is expected to contain more than simple text. Aligned translations and transliterations and linked commentaries are usual fare. Some siddurim also contain art. As an online project, we also have the opportunity to link additional non-textual material, such as audio or video.
As a member of the community at large, it is also important to maintain a chain of credit and responsibility for our contributors, and a chain of bibliographic credit for ideas. This necessarily involves maintaining a great deal of metadata in addition to the texts and supplementary material.
The Open Siddur, therefore, takes a different approach, which is realized in the JLPTEI design. This approach involves (1) minimizing the amount of stored text, (2) storing the differences between the texts and (3) having user-selectable sets of conditions that specify when each variant is selected. If a typo is corrected in one variant, it is naturally corrected for all variants. Any stored metadata is also automatically consistent between all texts. An additional advantage of this approach is that a community with a custom that differs from the “base” custom of the rite only has to make a different choice of variants. No change is required in the text in order to support a slightly differing custom.
Aside from text versioning, a second major problem in representation is what should be represented. A user working on a word processor or desktop publishing system would first consider presentation. What is considered good presentation form is up to individual taste, and tastes are expected to change far more rapidly than the text. In a system intended for universal use, we must encode, along with the text, sufficient information to present the text. What we encode, however, should be intrinsic to the text, not to any aspect of its presentation. Separating the encoding of document structure from its presentation allows each user to make the presentation conform to his/her own tastes without duplicating effort on the encoding side.
The primary question then becomes: which structure should be encoded? Prose can be divided into paragraphs and sentences, poetic text can be divided into line groups and verse lines, lists into items and lists, etc. Many parts of the siddur have more than one structure on the same text! XML assumes that a document has a pure hierarchical tree structure. This suggests that XML is not an appropriate encoding technology for the siddur. At the same time, XML encoding is nearly universally standard and more software tools support XML-based formats than other encoding formats. One of the primary innovations of JLPTEI is its particular encoding of concurrent structural hierarchies. While the idea is not novel, the implementation is. The potential for the existence of concurrent structure is a guiding force in JLPTEI design.
The disadvantage of JLPTEI's encoding solutions is that the archival form of the text is not immediately consumable by humans. We are forced to rely extensively on processing software to make the format editable and displayable. The disadvantage, however, is balanced by the encoding format's extensibility and conservation of human labor.
The Open Siddur intends to work within open standards whenever possible. In choosing a basis for our encoding, we searched for available encoding standards that would suit our purposes. We seriously considered using Open Scripture Information Standard (OSIS), an XML format used for encoding bibles. It was quickly discovered that representations of some of the more advanced features required to encode the liturgy (such as those discussed above) would have to be "hacked" on top of the standard. The Text Encoding Initiative (TEI) XML format is a de-facto standard within the digital humanities community. It is also is specified in well-documented texts, is actively supported by tools, and has a large community built around its use and development. Further, the standard is deliberately extensible using a relatively simple mechanism. The TEI was therefore a natural choice as a basis for our encoding.
      </div>
      <div>
        <head>File structure</head>
        <!-- TODO: fill in, requirement for xml:lang => defines main text language for indexing -->
      </div>
      <div>
        <head>The header</head>
        <!-- TODO: fill in! -->
        <!-- responsibility -->
        <!-- sources -->
      </div>
      <div>
        <head>Basic text structure</head>
        <!-- TODO: fill in -->
      </div>
      <div>
        <head>The text stream</head>
        <!-- TODO: fill in -->
        <!-- main function of segments, also internal and external ptr -->
      </div>
      <div>
        <head>Concurrent text hierarchies</head>
        <!-- TODO: fill in -->
      </div>
      <div>
        <head>Translations and parallel texts</head>
        <!-- TODO: fill in -->
      </div>
      <div>
        <head>Instructions and annotations</head>
        <!-- TODO: fill in -->
      </div>
      <div>
        <head>Conditional texts</head>
        <!-- TODO: fill in -->
        <!-- time-defined texts -->
        <!-- declaring conditionals -->
        <!-- setting conditionals -->
        <!-- associating conditionals -->
      </div>
      <div>
        <head>Citations</head>
        <!-- TODO: fill in -->
      </div>
      <div>
        <head>Support files</head>
        <!-- TODO: fill in -->
        <div>
          <head>Transliteration</head>
          <!-- TODO: fill in -->
        </div>
        <p>Have their own schemas</p>
      </div>
      <div>
      </div>
      <div>
        <head>Formal declaration</head>
        <!-- common declarations: -->
        <xi:include href="common-schema.xml"/>
        <xi:include href="conditional-common.xml"/>
        <schemaSpec ident="jlptei" xml:lang="en" prefix="" ns="http://www.tei-c.org/ns/1.0">
          <moduleRef key="core" include="bibl biblScope choice cit corr date divGen foreign head hi item l label lg list name note orig p ptr q quote ref reg resp respStmt sic title"/>
          <moduleRef key="tei"/>
          <moduleRef key="header" include="availability change distributor fileDesc licence publicationStmt revisionDesc sourceDesc teiHeader titleStmt"/>
          <moduleRef key="textstructure" include="TEI back body div docAuthor docDate docEdition docImprint docTitle front text titlePage titlePart"/>
          <moduleRef key="analysis" include="c interp interpGrp pc phr s w"/>
          <moduleRef key="gaiji" include="g"/>
          <moduleRef key="iso-fs" except="fsDecl fsdDecl fsdLink fsDescr fDescr fDecl vAlt vDefault vLabel vRange if iff then cond fsConstraints bicond"/>
          <moduleRef key="linking" include="ab anchor link linkGrp seg"/>
          <moduleRef key="namesdates" include="forename genName nameLink orgName roleName surname"/>
          <moduleRef key="transcr" include="sourceDoc"/>
          <specGrpRef target="#common-specs"/>
          <specGrpRef target="#conditional-specs"/>
          
          <elementSpec ident="read" ns="http://jewishliturgy.org/ns/jlptei/1.0" mode="add" module="opensiddur">
            <desc>Indicates the portion of a text that is read in read-written (kri-ktiv) choice.</desc>
            <classes>
              <memberOf key="model.choicePart"/>
              <memberOf key="att.global"/>
            </classes>
            <content>
              <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="macro.specialPara"/>
            </content>
          </elementSpec>
          <elementSpec ident="written" ns="http://jewishliturgy.org/ns/jlptei/1.0" mode="add" module="opensiddur">
            <desc>Indicates the part of a text that is written </desc>
            <classes>
              <memberOf key="model.choicePart"/>
              <memberOf key="att.global"/>
            </classes>
            <content>
              <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="macro.paraContent"/>
            </content>
          </elementSpec>
          <elementSpec ident="text" module="textstructure" mode="change">
            <classes mode="change">
              <memberOf key="att.declaring" mode="delete"/>
            </classes>
            <content>
              <rng:group xmlns:rng="http://relaxng.org/ns/structure/1.0">
                <rng:optional>
                  <rng:ref name="front"/>
                </rng:optional>
                <rng:choice>
                  <rng:ref name="body"/>
                  <rng:group>
                    <rng:ref name="streamText"/>
                    <rng:zeroOrMore>
                      <rng:ref name="concurrent"/>
                    </rng:zeroOrMore>
                  </rng:group>
                </rng:choice>
                <rng:optional>
                  <rng:ref name="back"/>
                </rng:optional>
              </rng:group>
            </content>
          </elementSpec>
          <elementSpec ident="layer" ns="http://jewishliturgy.org/ns/jlptei/1.0" mode="add" module="opensiddur">
            <desc>A hierarchic layer of text. @type should indicate what layer is being provided, and all the top level contained elements should be consistent with that type.</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
            <content xmlns:rng="http://relaxng.org/ns/structure/1.0">
              <rng:group xmlns="http://relaxng.org/ns/structure/1.0">
                <rng:zeroOrMore>
                  <rng:choice>
                    <rng:ref name="model.divTop"/>
                    <!--        <rng:ref name="model.headLike"/>-->
                    <rng:ref name="model.global"/>
                  </rng:choice>
                </rng:zeroOrMore>
                <rng:optional>
                  <rng:choice>
                    <rng:group>
                      <rng:oneOrMore>
                        <rng:choice>
                          <rng:ref name="model.divLike"/>
                          <rng:ref name="model.divGenLike"/>
                        </rng:choice>
                        <rng:zeroOrMore>
                          <rng:ref name="model.global"/>
                        </rng:zeroOrMore>
                      </rng:oneOrMore>
                    </rng:group>
                    <rng:group>
                      <rng:oneOrMore>
                        <rng:group>
                          <rng:ref name="model.common"/>
                        </rng:group>
                        <rng:zeroOrMore>
                          <rng:ref name="model.global"/>
                        </rng:zeroOrMore>
                      </rng:oneOrMore>
                      <rng:zeroOrMore>
                        <rng:choice>
                          <rng:ref name="model.divLike"/>
                          <rng:ref name="model.divGenLike"/>
                        </rng:choice>
                        <rng:zeroOrMore>
                          <rng:ref name="model.global"/>
                        </rng:zeroOrMore>
                      </rng:zeroOrMore>
                    </rng:group>
                  </rng:choice>
                  <rng:zeroOrMore>
                    <rng:group>
                      <rng:ref name="model.divBottom"/>
                    </rng:group>
                    <rng:zeroOrMore>
                      <rng:ref name="model.global"/>
                    </rng:zeroOrMore>
                  </rng:zeroOrMore>
                </rng:optional>
              </rng:group>
            </content>
            <attList>
              <attDef ident="type" mode="add" usage="req">
                <desc>Indicates what type of hierarchic layer is being constructed</desc>
                <datatype minOccurs="1" maxOccurs="1">
                  <rng:ref xmlns:rng="http://relaxng.org/ns/structure/1.0" name="data.enumerated"/>
                </datatype>
                <valList type="open">
                  <valItem ident="p"/>
                  <valItem ident="s"/>
                  <valItem ident="l"/>
                  <valItem ident="lg"/>
                  <valItem ident="cit"/>
                  <valItem ident="choice"/>
                  <valItem ident="verse"/>
                </valList>
              </attDef>
            </attList>
            <constraintSpec ident="layer-1" scheme="isoschematron">
              <constraint>
                <sch:assert
                  test="
                  every $result in (
                    for $ptr in descendant::tei:ptr,
                      $token in tokenize($ptr/@target,'\s+')
                      return not(substring-before($token, '#'))
                  ) satisfies $result">
                  Only internal pointers are allowed inside concurrent structures
                </sch:assert>
                <sch:assert
                  test="
                  every $result in (
                    for 
                      $ptr in descendant::tei:ptr,
                      $token in tokenize($ptr/@target,'\s+'),
                      $id in (
                        if (starts-with($token, '#range('))
                        then
                          tokenize(
                            substring-before(
                              substring-after(
                                $token,
                                '#range('
                              ),
                              ')'
                            ),
                            ','
                          )[.]
                        else substring-after($token, '#')
                      )
                    return exists(/id($id)/ancestor::j:streamText)
                  ) satisfies $result">
                  All pointers in layers must point into the text stream.  
                </sch:assert>
              </constraint>
            </constraintSpec>
          </elementSpec>
          <elementSpec ident="concurrent" ns="http://jewishliturgy.org/ns/jlptei/1.0" mode="add" module="opensiddur">
            <desc>A list of concurrent hierarchies of one or more layers.</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
            <content xmlns:rng="http://relaxng.org/ns/structure/1.0">
              <rng:oneOrMore>
                <rng:ref name="layer"/>
              </rng:oneOrMore>
            </content>
          </elementSpec>
          <elementSpec ident="streamText" ns="http://jewishliturgy.org/ns/jlptei/1.0" mode="add" module="opensiddur">
            <desc>A continuous stream of text, suitable for concurrent hierarchies.</desc>
            <classes>
              <memberOf key="att.global"/>
            </classes>
            <content xmlns:rng="http://relaxng.org/ns/structure/1.0">
              <alternate minOccurs="0" maxOccurs="unbounded">
                <textNode/>
                <classRef key="model.segLike"/>
                <classRef key="model.milestoneLike"/>
                <elementRef key="ptr"/>
              </alternate>
            </content>
            <constraintSpec ident="streamText-0" scheme="isoschematron">
              <constraint>
                <sch:report test="not(@xml:id)">j:streamText requires an @xml:id attribute.</sch:report>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="streamText-1" scheme="isoschematron">
              <constraint>
                <sch:report test="tei:anchor[not(@xml:id)]">An @xml:id attribute is required on all anchor elements in a text stream.</sch:report>
              </constraint>
            </constraintSpec>
          </elementSpec>
        </schemaSpec>
      </div>
    </body>
  </text>
</TEI>
