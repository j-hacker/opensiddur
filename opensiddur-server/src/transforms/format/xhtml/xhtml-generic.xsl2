<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"  
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  xmlns:x="http://jewishliturgy.org/ns/temp"
  exclude-result-prefixes="#all"
>
  <xsl:import href="../../../common/common.xsl2"/>
  
  <xsl:output method="xml" version="1.0" encoding="UTF-8"  
    doctype-system="about:legacy-compat" 
    indent="no"/>
  <xd:doc type="stylesheet">
    <xd:short>Generic transformation operation to XHTML.</xd:short>
    <xd:copyright>Copyright 2009,2011 Efraim Feinstein</xd:copyright>
    <xd:detail>
      <p>This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.</p>

      <p>You should have received a copy of the GNU Lesser General Public License
      along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</p>
    </xd:detail>
  </xd:doc>
    
  <!-- href to this document's style -->
  <xsl:param name="style" as="xs:string" select="'style.css'"/>
  
  <!-- the following attribute catchers are intended to add strings to the @class
  attribute
   -->
  <xsl:template match="@jx:id" mode="class" as="xs:string">
    <xsl:sequence select="concat('id-', .)"/>
  </xsl:template>
  
  <xsl:template match="@type|@subtype|@n" mode="class" as="xs:string">
    <xsl:sequence select="concat(name(.), '-', .)"/>
  </xsl:template>
  
  <xsl:template match="@next|@prev" mode="class" as="xs:string">
    <xsl:sequence select="name(.)"/>
  </xsl:template>

  <xsl:template match="@*" mode="class"/>

  <xsl:template match="@jx:document-uri" as="attribute()+">
    <xsl:attribute name="property" select="'document-source'"/>
    <xsl:attribute name="resource" select="."/>
  </xsl:template>
  
  <xsl:template match="@xml:lang" as="attribute()*">
    <xsl:if test="../..[not(lang(.))]">
      <xsl:variable name="my-direction" as="xs:string"
        select="func:direction-by-language(.)"/>
      <xsl:copy/>
      <xsl:attribute name="lang" select="."/>
      <xsl:if test="func:direction-by-language(../..) ne $my-direction">
        <xsl:attribute name="dir" select="$my-direction"/>
      </xsl:if>
    </xsl:if>
  </xsl:template>
  
  <!-- I don't know if this is *always* right, but it will be
  needed to make @href point to the right place if it comes 
  from an @target copy... -->
  <xsl:template match="@xml:base" as="attribute()?">
    <xsl:copy/>
  </xsl:template>
  
  <xsl:template match="@*"/>
  
  <xsl:template match="tei:TEI">
    <html>
      <xsl:apply-templates select="@*"/>
      <head>
        <!-- add a title, will need to be changed w/multi-lingual 
        titles -->
        <xsl:apply-templates select="//tei:titlePage" mode="document-title"/>
        
        <!-- this is for stupid browsers that can't read
         xml declarations or doctypes -->
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <link rel="stylesheet" href="{$style}" type="text/css"/>
      </head>
      <body> 
        <xsl:apply-templates />
      </body>
    </html>
  </xsl:template>

  <xsl:template name="set-attributes">
    <xsl:param name="additional-classes" select="()" as="xs:string*"/>
    
    <xsl:apply-templates select="@*"/>
    <xsl:attribute name="class">
      <xsl:variable name="classes" as="xs:string*">
        <xsl:sequence select="$additional-classes"/>
        <xsl:sequence select="concat(
          if (namespace-uri(.)='http://www.tei-c.org/ns/1.0')
          then 'tei'
          else if (namespace-uri(.)='http://jewishliturgy.org/ns/jlptei/1.0')
          then 'j'
          else 'jx',
          '-',
          local-name(.))"/>
        <xsl:apply-templates select="@*" mode="class"/>
      </xsl:variable>
      <xsl:sequence select="string-join($classes, ' ')"/>
    </xsl:attribute>  
  </xsl:template>

  <xsl:template match="tei:docTitle" mode="document-title">
    <title>
      <xsl:call-template name="set-attributes"/>
      <xsl:apply-templates select="descendant::text()"/>
    </title>  
  </xsl:template>
  
  <xsl:template match="*" mode="document-title" priority="-10">
    <xsl:apply-templates mode="#current"/>
  </xsl:template>
  
  <xsl:template match="text()" mode="document-title" priority="-10"/>


  <!-- elements that convert to span -->
  <xsl:template match="tei:forename|tei:item|
    tei:list|tei:pc|tei:roleName|tei:surname|tei:w|
    j:divineName">
    <xsl:param name="additional-classes" as="xs:string*" select="()"/>
    <span>
      <xsl:call-template name="set-attributes">
        <xsl:with-param name="additional-classes" select="$additional-classes"/>
      </xsl:call-template>
      <xsl:apply-templates/>
    </span>
  </xsl:template>

  <!-- elements that convert to div -->  
  <xsl:template match="*">
    <xsl:param name="additional-classes" as="xs:string*"/>
    
    <div>
      <xsl:call-template name="set-attributes">
        <xsl:with-param name="additional-classes" select="$additional-classes"/>
      </xsl:call-template>
      <xsl:apply-templates/>
    </div>  
  </xsl:template>
  
  <!-- elements that get skipped: do not do this too often! -->
  <xsl:template match="tei:text">
    <xsl:apply-templates/>
  </xsl:template>
  
  <xsl:template match="tei:pc[.='פ']">
    <xsl:next-match>
      <xsl:with-param name="additional-classes" select="'pe'"/>
    </xsl:next-match>
  </xsl:template>
  
  <xsl:template match="tei:pc[.='ס']">
    <xsl:next-match>
      <xsl:with-param name="additional-classes" select="'samekh'"/>
    </xsl:next-match>
  </xsl:template>
  
  <!-- elements that are moved from their original positions -->
  <xsl:template match="tei:label[@n=('chapter','verse')]"/>
  
  <!-- remove computer-readable licensing boilerplate -->
  <xsl:template match="rdf:RDF"/>
  
</xsl:stylesheet>
