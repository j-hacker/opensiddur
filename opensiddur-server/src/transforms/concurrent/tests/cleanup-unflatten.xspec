<?xml version="1.0" encoding="utf-8"?>
<x:description 
  xmlns:x="http://www.jenitennison.com/xslt/xspec"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:xxml="http://jewishliturgy.org/ns/xml-alias"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  stylesheet="../concurrent.xsl2"
  >
  <x:pending>
    <x:scenario label="garbage">
      <x:call function="func:junk"/>
      <x:expect><func:junk/><jx:junk/><j:junk/><tei:junk/>
        <!-- this is here to make the cleanup-unflatten tests work right -->
        <tei:seg xml:id="r1">r1</tei:seg>
        <tei:seg xml:id="r2">r2</tei:seg>
        <tei:seg xml:id="r3">r3</tei:seg>
      </x:expect>
    </x:scenario>
  </x:pending>
  <x:scenario label="func:make-unique-xmlid">
    <x:call function="func:make-unique-xmlid"/>
    <x:scenario label="empty element">
      <x:call>
        <x:param as="element()?" select="()"/>
      </x:call>
      <x:expect label="empty return" select="()"/>
    </x:scenario>
    <x:scenario label="element without xml:id">
      <x:call>
        <x:param as="element()">
          <tei:div/>
        </x:param>
      </x:call>
      <x:expect label="a generated id" test="string-length(.) &gt; 0"/>
    </x:scenario>
    <x:scenario label="element with xml:id">
      <x:call>
        <x:param as="element()">
          <tei:div xml:id="sA"/>
        </x:param>
      </x:call>
      <x:expect label="xml:id with added string" test="starts-with(., 'sA-')"/>
    </x:scenario>
  </x:scenario>
  <x:scenario label="cleanup-unflatten mode">
    <x:context mode="cleanup-unflatten"/>
    <x:scenario label="multipart element">
      <x:context>
        <jx:unflattened jx:document-uri="/code/transforms/concurrent/tests/cleanup-unflatten.xspec" xml:base="cleanup-unflatten.xspec" xml:lang="en">
          <root>
            <tei:div jx:id="sA" jx:part="1" jx:priority="3">
              <tei:ptr xml:id="sA1" jx:id="sA1" jx:selection="111" target="#r1" />
            </tei:div>
            <tei:div jx:part="1">
              <tei:ptr xml:id="sA2" jx:id="sA2" jx:selection="111" target="#r2" />
            </tei:div>
            <tei:div jx:part="1">
              <tei:ptr xml:id="sA3" jx:id="sA3" jx:selection="111" target="#r3" />
            </tei:div>
          </root>
        </jx:unflattened>
      </x:context>
      <x:expect label="@jx:part converted to @next-@prev">
        <root>
          <tei:div xxml:id="..." jx:id="sA" next="...">
            <tei:ptr jx:id="sA1" target="#r1" />
          </tei:div>
          <tei:div xxml:id="..." jx:id="..." prev="..." next="...">
            <tei:ptr jx:id="sA2" target="#r2" />
          </tei:div>
          <tei:div xxml:id="..." jx:id="..." prev="...">
            <tei:ptr jx:id="sA3" target="#r3" />
          </tei:div>
        </root>
      </x:expect>
      <x:expect label="@jx:priority removed" test="count(//@jx:priority) = 0"/>
      <x:expect label="@jx:selection removed" test="count(//@jx:selection) = 0"/>
      <x:expect label="@prev are local pointers" test="every $s in //@prev satisfies starts-with($s, '#')"/>
      <x:expect label="@next are local pointers" test="every $s in //@next satisfies starts-with($s, '#')"/>
      <x:expect label="@next are local pointers to the next tei:div" 
        test="every $e in //tei:div[@next] satisfies concat('#',$e/following-sibling::tei:div[1]/@xml:id)=$e/@next"/>
      <x:expect label="@prev are local pointers to the previous tei:div" 
        test="every $e in //tei:div[@prev] satisfies concat('#',$e/preceding-sibling::tei:div[1]/@xml:id)=$e/@prev"/>
    </x:scenario> 
  </x:scenario> 
</x:description>

