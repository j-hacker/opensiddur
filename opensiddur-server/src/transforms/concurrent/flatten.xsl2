<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
	version="2.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:tei="http://www.tei-c.org/ns/1.0"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
	xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
	xmlns:xd="http://www.pnp-software.com/XSLTdoc"
	exclude-result-prefixes="#all"
>
  <xsl:import href="../../common/common.xsl2"/>
  <xsl:import href="../copy-context.xsl2"/>
	<xd:doc type="stylesheet">
		<xd:short>Modes to flatten and unflatten a hierarchy.</xd:short>
		<xd:copyright>Copyright 2009-2010 Efraim Feinstein</xd:copyright>
		<xd:detail>
				<p>This program is free software: you can redistribute it and/or modify
				it under the terms of the GNU Lesser General Public License as published by
				the Free Software Foundation, either version 3 of the License, or
				(at your option) any later version.</p>

				<p>This program is distributed in the hope that it will be useful,
				but WITHOUT ANY WARRANTY; without even the implied warranty of
				MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
				GNU Lesser General Public License for more details.</p>

				<p>You should have received a copy of the GNU Lesser General Public License
				along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.</p>
			</xd:detail>
			<xd:svnId>$Id: flatten.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
	</xd:doc>
	
	<xsl:output indent="yes" method="xml"/>

  <!-- functions for flattened hierarchy -->
  <xd:doc>
    <xd:short>Given a sequence of elements from a flattened hierarchy,
    produce equivalent open or closed tags.
    </xd:short>
    <xd:detail>If activity is suspend, the tags become suspend tags,
    if it is continue, they become continue tags.
    </xd:detail>
    <xd:param name="sequence">Sequence of opening elements</xd:param>
    <xd:param name="activity">May be one of 'suspend' or 'continue'</xd:param>
  </xd:doc>
  <xsl:function name="func:continue-or-suspend" as="element()*">
    <xsl:param name="sequence" as="element()*"/>
    <xsl:param name="activity" as="xs:string"/>
    
    <xsl:for-each select="$sequence">
      <!-- this variable is here to flag an error if there is no @jx:*activity* on the element or more than one -->
      <xsl:variable name="current-activity" as="attribute()"
        select="(@jx:start,@jx:continue,@jx:end,@jx:suspend)"/>
      <xsl:copy>
        <xsl:copy-of 
          select="@* except (@jx:start,@jx:continue,@jx:suspend,@jx:end)"/>
        <xsl:attribute name="{concat('jx:', $activity)}" 
          select="$current-activity"/>
        <xsl:sequence select="child::node()"/>
      </xsl:copy>
    </xsl:for-each>
  </xsl:function>
  
  <xd:doc>
    <xd:short>Find the tags that are closed, but not opened,
    in a group of flattened hierarchy.
    </xd:short>
    <xd:param name="inside-group">Group of tags to search within.</xd:param>
  </xd:doc>
  <xsl:function name="func:unopened-tags" as="element()*">
    <xsl:param name="inside-group" as="element()*"/>
    <xsl:sequence select="
      for $closed in ($inside-group[@jx:suspend|@jx:end])
        return 
           if (some $open-id in ($closed/@jx:suspend, $closed/@jx:end)
            satisfies 
              $open-id=($inside-group/@jx:start, 
              $inside-group/@jx:continue)) 
          then () 
          else $closed"/>
  </xsl:function>
  
  <xd:doc>
    <xd:short>Find tags that are opened, but not closed, in a flattened 
    hierarchy</xd:short>
    <xd:param name="inside-group">Group of tags to search within.</xd:param>
  </xd:doc>
  <xsl:function name="func:unclosed-tags" as="element()*">
    <xsl:param name="inside-group" as="element()*"/>
    <xsl:sequence select="
      for $opened in ($inside-group[@jx:start|@jx:continue])
        return 
           if (some $open-id in ($opened/@jx:start, $opened/@jx:continue)
            satisfies 
              $open-id=($inside-group/@jx:end, 
              $inside-group/@jx:suspend)) 
          then () 
          else $opened"/>
  </xsl:function>

	
	<xd:doc>
		<xd:short>set the @parents and @ancestors attributes of elements in
    a flat hierarchy to the xml:ids of the parent and ancestor elements,
    using the $parent-id and $ancestor-ids tunneled parameters</xd:short>
	</xd:doc>
	<xsl:template name="set-parents" as="attribute()*">
		<xsl:param name="parent-id" tunnel="yes" as="xs:string?"/>
		<xsl:param name="ancestor-ids" tunnel="yes" as="xs:string*"/>
		
		<xsl:if test="not(empty($parent-id))">
			<xsl:attribute name="jx:parents" select="$parent-id"/>
		</xsl:if>
		<xsl:if test="not(empty($ancestor-ids))">
			<xsl:attribute name="jx:ancestors" select="string-join($ancestor-ids,' ')"/>
		</xsl:if>
	</xsl:template>

	
	<xd:doc>
		<xd:short>copy a childless element in flatten mode</xd:short>
	</xd:doc>
	<xsl:template match="*[not(./*|./text())]" mode="flatten">
		<xsl:element name="{local-name()}" namespace="{namespace-uri()}">
			<xsl:copy-of select="@*"/>
			<xsl:call-template name="set-parents"/>
			<xsl:sequence select="child::node()"/>
		</xsl:element>
	</xsl:template>
	
	<xd:doc>
		<xd:short>flatten an element with children in flatten mode</xd:short>
	</xd:doc>
	<xsl:template match="*[node()]" mode="flatten">
		<xsl:param name="ancestor-ids" as="xs:string*" tunnel="yes"/>
	
		<xsl:variable name="node-id" select="(@jx:uid, generate-id())[1]"/>
    <xsl:variable name="parents" as="attribute()*">
			<xsl:call-template name="set-parents"/>
    </xsl:variable>
		<xsl:element name="{local-name()}" namespace="{namespace-uri()}">
			<xsl:sequence select="@*|$parents"/>
			<xsl:attribute name="jx:start" select="$node-id"/>
		</xsl:element>
		<xsl:apply-templates mode="#current">
			<xsl:with-param name="parent-id" tunnel="yes" as="xs:string" 
        select="$node-id"/>
			<xsl:with-param name="ancestor-ids" tunnel="yes" as="xs:string+" 
        select="($ancestor-ids,$node-id)"/>
		</xsl:apply-templates>
		<xsl:element name="{local-name()}" namespace="{namespace-uri()}">
			<xsl:sequence select="@*|$parents"/>
      <xsl:attribute name="jx:end" select="$node-id"/>
		</xsl:element>
	</xsl:template>

  <xd:doc>
    <xd:short>copy text</xd:short>
  </xd:doc>
  <xsl:template match="text()|processing-instruction()|comment()"
    mode="flatten">
    <xsl:copy/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>if the context is or has a child containing pointer, flatten it.  Otherwise, leave it as-is. 
    </xd:short>
    <xd:detail>
    After enhanced flatten mode, each view contains a flattened hierarchy 
    for any parts of the hierarchy that contain elements from the selection.
    All other child hierarchies are maintained unflattened.
    </xd:detail>
  </xd:doc>
  <xsl:template match="element()[not(descendant-or-self::*[@jx:selection])]" 
    mode="flatten" priority="20">
    <xsl:variable name="ancestor-attrib" as="attribute()*">
      <xsl:call-template name="set-parents"/>
    </xsl:variable>
    <xsl:sequence select="func:add-attributes(., $ancestor-attrib)"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Convert j:view (which may be a root element) to jx:flat-view</xd:short>
  </xd:doc>
  <xsl:template match="j:view" mode="flatten" as="element(jx:flat-view)" priority="2">
    <jx:flat-view>
      <xsl:call-template name="copy-attributes-and-context"/>
      <xsl:apply-templates mode="#current"/>
    </jx:flat-view>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Turn a root element of any type into a root element of a flat
    hierarchy too.</xd:short>
  </xd:doc> 
  <!-- increased priority to make sure it runs instead of * w/predicate -->
  <xsl:template match="/*[not(self::j:view)]" mode="flatten" priority="2">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates mode="#current"/>
    </xsl:copy>
  </xsl:template>	

  <!-- unflatten mode -->
  <xd:doc>
    <xd:short>Copy and apply templates to 
    an element that is not flattened in unflatten mode.</xd:short>
  </xd:doc>
  <xsl:template
    match="element()[not(@jx:start|@jx:continue|@jx:end|@jx:suspend)]"
    mode="unflatten"
    as="node()*">
    <xsl:copy>
      <xsl:copy-of select="@* except (@jx:parents, @jx:ancestors)"/>
      <xsl:apply-templates select="child::node()[1]" mode="#current"/>
    </xsl:copy>
    <xsl:apply-templates select="following-sibling::node()[1]"
      mode="#current"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Build a hierarchy out of a start element in unflatten
    mode.</xd:short>
    <xd:detail>Important note: unflatten mode is called by applying templates
    to the first node of the flat sequence, not by applying
    templates to the whole sequence!
    If either a start or end node doesn't exist at this point,
    it's the result of a sorting error.</xd:detail>
  </xd:doc>
  <xsl:template match="element()[@jx:start|@jx:continue]" 
    mode="unflatten" as="node()*">
    <xsl:param name="opened-tags" as="element()*"/>
    
    <xsl:sequence select="func:debug(('.=',.), 'element(), mode=unflatten',$debug-detail)"/>
    
    <xsl:variable name="id" as="xs:string" 
      select="(@jx:start, @jx:continue)[1]"/>
    
    <!-- if end element does not exist, this element effectively
    ends itself (this is a kluge) -->
    <xsl:variable name="end-element" as="element()"
      select="(following-sibling::*
        [$id=(@jx:suspend,@jx:end)][1],.)[1]"/>
    <xsl:variable name="inside-nodes" as="node()*"
      select="following-sibling::node() intersect 
        $end-element/preceding-sibling::node()"/>
    <xsl:variable name="remaining-nodes" as="node()*"
      select="$end-element/following-sibling::node()"/>
      
    <!-- unopened elements are those that have end tags but no
    start tags -->
    <xsl:variable name="unopened-inside-elements" as="element()*"
      select="func:unopened-tags($inside-nodes/self::element())"/>
    <!-- unclosed elements are those that have start tags but
    no end tags -->
    <xsl:variable name="unclosed-inside-elements" as="element()*"
      select="func:unclosed-tags($inside-nodes/self::element())"/>
    <!-- the inside elements in an inescapable box -->
    <xsl:variable name="inside-nodes-box" as="document-node()">
      <xsl:document>
        <xsl:copy-of 
          select="func:continue-or-suspend($unopened-inside-elements,'continue')"/>
        <xsl:copy-of select="$inside-nodes"/>
        <xsl:copy-of 
          select="func:continue-or-suspend(
          reverse($unclosed-inside-elements),'suspend')"/>
      </xsl:document>
    </xsl:variable>
    <!-- remaining elements is an inescapable box for the remaining -->
    <xsl:variable name="remaining-nodes-box" as="document-node()">
      <xsl:document>
        <xsl:copy-of 
          select="func:continue-or-suspend($unclosed-inside-elements,'continue')"/>
        <xsl:copy-of select="$remaining-nodes"/>
      </xsl:document>
    </xsl:variable>

    <xsl:variable name="processed-inside-nodes" as="node()*">
      <xsl:apply-templates select="$inside-nodes-box/node()[1]" mode="#current"/>
    </xsl:variable>
  
    <xsl:sequence select="func:debug((
      'for =', .,
      '$end-element = ', $end-element,
      '$unopened-inside-elements =', $unopened-inside-elements,
      '$unclosed-inside-elements =', $unclosed-inside-elements,
      '$inside-nodes-box =', $inside-nodes-box,
      '$remaining-nodes-box =', $remaining-nodes-box,
      '$processed-inside-nodes =', $processed-inside-nodes), 'mode=unflatten', $debug-detail + 1)"/>
    <xsl:if test="not(empty($processed-inside-nodes))">
      <xsl:copy>
        <xsl:copy-of select="@* except (@jx:start,@jx:continue,@jx:parents,@jx:ancestors)"/>
        <xsl:if test="@jx:continue|$end-element/@jx:suspend">
          <xsl:attribute name="jx:part" 
            select="distinct-values(@jx:continue|$end-element/@jx:suspend)"/>
        </xsl:if>
        <xsl:sequence select="$processed-inside-nodes"/>
      </xsl:copy>
    </xsl:if>
    
    <xsl:apply-templates select="$remaining-nodes-box/node()[1]"
      mode="#current"/>
    
  </xsl:template>
  
  <xd:doc>
    <xd:short>Ignore end tags in unflatten mode if there was a start tag
    </xd:short>
    <xd:detail>This processing is only necessary because of a kluge 
    that allows parallelGrp/parallel to accept lone start and end
    elements from the wrong hierarchy</xd:detail>
  </xd:doc>
  <xsl:template match="element()[@jx:end|@jx:suspend]"
    mode="unflatten"
    as="node()*">
    <xsl:variable name="id" as="xs:string" select="(@jx:end,@jx:suspend)"/>
    <xsl:if test="not(preceding-sibling::*[$id=(@jx:start,@jx:continue)])">
      <xsl:apply-templates select="following-sibling::node()[1]"
        mode="#current"/>
    </xsl:if>
  </xsl:template>
 
  <xd:doc>
    <xd:short>Text is copied and templates applied to next node (mixed content!)</xd:short>
  </xd:doc>
  <xsl:template match="text()" mode="unflatten">
    <xsl:copy/>
    <xsl:apply-templates select="following-sibling::node()[1]" mode="#current"/>
  </xsl:template>
 
</xsl:stylesheet>
