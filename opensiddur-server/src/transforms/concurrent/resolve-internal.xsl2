<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all"
  >
  <xsl:import href="../copy-context.xsl2"/>
  <xsl:import href="../../common/common.xsl2"/>
  <xsl:include href="../follow-uri.xsl2" />
   
  <xd:doc type="stylesheet">
    <xd:short>The resolve-internal mode: Follow pointers within a j:view until they point into a selection.  
    Return a j:view containing the resolved pointers.  The $full-context tunneled boolean flag
    determines whether the full context should be copied if not changed (default false())</xd:short>
    <xd:copyright>Copyright 2009-2010 Efraim Feinstein (LGPL 3+)</xd:copyright>
    <xd:detail>
        <p>This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

        <p>This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.</p>

        <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
        </p>
      </xd:detail>
      <xd:svnId>$Id: resolve-internal.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
  </xd:doc>
      
  <xd:doc>
    <xd:short>Resolve internal pointers until a dead end or a pointer
    within the selection is found.  Copy pointers from the selection
    and mark them with @jx:selection="{uid of selection}"</xd:short>
  </xd:doc>
  <xsl:template match="tei:ptr" mode="resolve-internal">
    
    <xsl:variable name="in-selection" as="element(j:selection)?"
      select="parent::j:selection" />
    
    <xsl:choose>
      <xsl:when test="exists($in-selection)">
        <xsl:sequence select="func:debug($in-selection,('resolve-internal in selection (uid, generate-id) = ', ($in-selection/@jx:uid,generate-id($in-selection))), $debug-info)"/>
        <xsl:copy>
          <xsl:call-template name="resolve-internal-copy-context"/>
          <xsl:attribute name="jx:uid" select="(@jx:uid, generate-id())[1]"/>
          <xsl:if test="@xml:id">
            <xsl:attribute name="jx:id" select="@xml:id"/>
          </xsl:if>
          <xsl:attribute name="jx:selection" 
            select="($in-selection/@jx:uid,generate-id($in-selection))[1]"/>
          <!-- xsl:attribute name="jx:in" select="$processing-view"/-->
        </xsl:copy>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="func:debug(.,'resolve-internal out of selection', $debug-info)"/>
        <xsl:variable name="tei-link-result" as="node()*">
          <xsl:call-template name="follow-tei-link">
            <xsl:with-param name="steps" tunnel="yes" as="xs:integer" 
              select="1"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:apply-templates select="$tei-link-result" 
          mode="#current">
          <xsl:with-param name="current-document-uri" as="xs:anyURI" tunnel="yes" select="func:original-document-uri(.)"/>
          <xsl:with-param name="current-lang" as="xs:string" tunnel="yes" select="func:language(.)"/>
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xd:doc>
    <xd:short>view in resolve-internal mode is like element() 
    but doesn't call attach-copy, so it always has its context.
    Send a tunneled parameter to children indicating the id of the view
    being processed.</xd:short>
    <xd:detail>Maintains @jx:uid and @jx:document-uri for views.
    The latter is necessary in order to tell what to do with
    overlapping @xml:id between parallel documents</xd:detail>
    <xd:param name="current-document-uri">Holds the document URI, usually of the element processed just before the current element</xd:param>
    <xd:param name="current-lang">Holds the language, usually of the element processed just before the current element</xd:param>
    <xd:param name="full-context">If true(), the entire context is copied for every element</xd:param>
  </xd:doc>
  <xsl:template match="j:view" mode="resolve-internal">
    <xsl:param name="current-document-uri" tunnel="yes" select="func:original-document-uri(.)" as="xs:anyURI"/>
    <xsl:param name="current-lang" tunnel="yes" select="func:language((..,.)[1])" as="xs:string"/>
    <xsl:param name="full-context" as="xs:boolean" select="false()" tunnel="yes"/>
    
    <xsl:variable name="new-doc-uri" as="xs:anyURI" select="func:original-document-uri(.)"/>
    <xsl:copy>
      <!-- need to copy full context here because we're making a detached copy -->
      <xsl:call-template name="copy-attributes-and-context"/>
      <xsl:attribute name="jx:uid" select="(@jx:uid, generate-id())[1]"/>
      <xsl:if test="@xml:id">
        <xsl:attribute name="jx:id" select="@xml:id"/>
      </xsl:if>
          
      <xsl:apply-templates mode="#current">
        <!-- this is probably the first template called with this mode, 
        so we need to set these parameters to start them tunneling -->
        <xsl:with-param name="current-document-uri" tunnel="yes" select="$new-doc-uri" as="xs:anyURI"/>
        <xsl:with-param name="current-lang" tunnel="yes" select="func:language(.)" as="xs:string"/>
      </xsl:apply-templates>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Element in resolve-internal mode.  Copy the element and
    return it with new attributes:
    <ul>
      <li>@jx:uid containing the attribute's original node ID</li>
      <li>@jx:id containing any original @xml:id</li>
      <!-- li>@jx:in which shows what view the element comes from</li-->
    </ul>
    </xd:short>
    <xd:detail>@jx:uid can be used later to find which resolved elements
    refer to the same node. "uid" means "unique identifier."</xd:detail>
  </xd:doc>
  <xsl:template match="element()" mode="resolve-internal" priority="-10">
    <xsl:copy>
      <xsl:call-template name="resolve-internal-copy-context"/>
      <xsl:attribute name="jx:uid" select="(@jx:uid, generate-id())[1]"/>
      <!-- xsl:attribute name="jx:in" select="$processing-view"/-->
      <xsl:if test="@xml:id">
        <xsl:attribute name="jx:id" select="@xml:id"/>
      </xsl:if>
      <xsl:sequence select="func:debug(('xml:id ', string(@xml:id), ' has uid ', string(generate-id())), 'resolve-internal:element()', $debug-detail)"/>
      
      <xsl:apply-templates mode="#current">
        <xsl:with-param name="current-document-uri" tunnel="yes" select="func:original-document-uri(.)" as="xs:anyURI"/>
        <xsl:with-param name="current-lang" tunnel="yes" select="func:language(.)" as="xs:string"/>
      </xsl:apply-templates>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Mark the selection(s) that the parallel group is 
    derived from with an @jx:selection-origin attribute</xd:short>
  </xd:doc>
  <xsl:template match="j:parallel|j:original" mode="resolve-internal">
    <xsl:variable name="resolved-content" as="node()*">
      <xsl:apply-templates mode="#current"/>
    </xsl:variable>
    <xsl:copy>
      <xsl:call-template name="resolve-internal-copy-context"/>
      <xsl:attribute name="jx:uid" select="(@jx:uid, generate-id())[1]"/>
      <xsl:attribute name="jx:selection-origin" 
        select="distinct-values($resolved-content//@jx:selection)"/>
      
      <xsl:sequence select="$resolved-content"/>
      
      <xsl:sequence select="func:debug(
        ('content is from selections: ', distinct-values($resolved-content//@jx:selection)),
        ('j:parallel|j:original, mode=resolve-internal for ', func:get-xpath(.)),$debug-detail)"/>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Copy the full context if $full-context is true(), otherwise only copy if it changed.</xd:short>
  </xd:doc>
  <xsl:template name="resolve-internal-copy-context">
    <xsl:param name="full-context" as="xs:boolean" select="false()" tunnel="yes"/>
    
    <xsl:variable name="attributes" as="attribute()*" select="@* except @xml:id"/>
    
    <xsl:choose>
      <xsl:when test="$full-context">
        <xsl:call-template name="copy-attributes-and-context">
          <xsl:with-param name="attributes" as="attribute()*" select="$attributes"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="copy-attributes-and-context-if-changed">
          <xsl:with-param name="attributes" as="attribute()*" select="$attributes"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <!-- 
  <xd:doc>
    <xd:short>Find the selection(s) that pointers point to in a view
    </xd:short>
  </xd:doc>
  <xsl:template match="tei:ptr" mode="resolve-internal-selections"
    as="element(j:selection)*">
    <xsl:variable name="in-selection" as="element(j:selection)?"
      select="parent::j:selection" />

    <xsl:choose>
      <xsl:when test="exists($in-selection)">
        <xsl:sequence select="$in-selection"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="tei-link-result" as="node()*">
          <xsl:call-template name="follow-tei-link">
            <xsl:with-param name="steps" tunnel="yes" as="xs:integer" 
              select="1"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:apply-templates select="$tei-link-result" 
          mode="#current"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xd:doc>Ignore text</xd:doc>
  <xsl:template match="text()" mode="resolve-internal-selections"/>
   -->
</xsl:stylesheet>
