<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all"
  >

  <xsl:import href="../copy-context.xsl2"/>
   
  <xd:doc type="stylesheet">
    <xd:short>Set-priorities mode: give each element in a hierarchy a numeric priority.  Higher numbers
    indicate more likelihood of being an outer hierarchy when combined with others.</xd:short>
    <xd:copyright>Copyright 2009-2010 Efraim Feinstein (LGPL 3+)</xd:copyright>
    <xd:detail>
        <p>This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

        <p>This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.</p>

        <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
        </p>
      </xd:detail>
      <xd:svnId>$Id: set-priorities.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
  </xd:doc>
  

  <xsl:variable name="maximum-priority" as="xs:decimal" select="10000"/>
  
  <xd:doc>Increase in priority if the element has descendants in the selection
  but no children in the selection</xd:doc>
  <xsl:variable name="priority-boost" as="xs:decimal" select="0.01"/>

  <xd:doc>
    <xd:short>Return the sorting priority of an element in multiple hierarchies</xd:short>
    <xd:detail>
    <ul>
      <li>Elements involved in parallelism have $maximum-priority</li>
      <li>Elements in the selection have empty priority</li> 
      <li>Elements that have no descendants in the selection have 
      a priority</li>
      <li>Elements not in the selection that have children in the selection
      have a priority equal to the total number of descendants in the selection.</li>
      <li>Elements not in the selection that have no children in the selection
      have a priority equal to the total number of descendants in the selection +
      $priority-boost * max(number of descendants with )</li>
    </ul>
    </xd:detail>
    <xd:param name="context">The element</xd:param>
  </xd:doc>
  <xsl:function name="func:get-sort-priority" as="xs:decimal?">
    <xsl:param name="context" as="element()"/>
    
    <xsl:variable name="descendants-from-selection" as="element()*"
      select="$context/descendant::*[@jx:selection]"/>
    <xsl:variable name="children-from-selection" as="element()*"
      select="$context/*[@jx:selection]"/>
      
    <xsl:sequence select="
      if ($context/@jx:selection)
      then ()
      else if ($context/self::j:parallelGrp or 
        $context/self::j:parallel or 
        $context/self::j:original) 
      then $maximum-priority
      else if (empty($descendants-from-selection)) 
      then func:get-sort-priority($context/parent::*)
      else if (empty($children-from-selection))
      then ($priority-boost * func:levels-to-selection($context) + count($descendants-from-selection) )
      else count($descendants-from-selection)
    "/>
  </xsl:function>
  
  <xd:doc>
    <xd:short>Return the largest number of hierarchic levels required to get from
    $context to an element that is a direct parent of a selection element</xd:short>
  </xd:doc>
  <xsl:function name="func:levels-to-selection" as="xs:integer">
    <xsl:param name="context" as="element()"/>
    
    <xsl:sequence select="
      if ($context/@jx:selection or $context/*/@jx:selection) 
      then 0
      else 1 + (max(for $child in $context/* return func:levels-to-selection($child)),0)[1] 
      "/>
  </xsl:function>
  
  <xd:doc>
    Do identity transform for elements within a selection.
    Elements in selections are unmovable and don't have priorities.
  </xd:doc>
  <xsl:template match="element()[@jx:selection]" mode="set-priorities">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates mode="identity"/>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
    Set an element priority, if the element is not already in a selection
  </xd:doc>
  <xsl:template match="element()" mode="set-priorities">
    <xsl:copy>
      <xsl:if test="empty(parent::*)">
        <xsl:call-template name="copy-attributes-and-context"/>
      </xsl:if>
      <xsl:copy-of select="@*"/>
      <xsl:attribute name="jx:priority" select="func:get-sort-priority(.)"/>
      <!-- 
      <xsl:choose>
        <xsl:when test="descendant::*[@jx:selection]">
          <xsl:attribute name="jx:priority" select="
            count(child::element()[not(@jx:selection)] | 
              descendant::*[@jx:selection])"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="jx:priority" 
            select="count(parent::*/child::element()[not(@jx:selection)] | 
              parent::*/descendant::*[@jx:selection])"/>
        </xsl:otherwise>
      </xsl:choose>
       -->
      <xsl:apply-templates mode="#current"/>
    </xsl:copy>
  </xsl:template>
  
</xsl:stylesheet>
