<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all"
  >
  <xsl:import href="../follow-uri.xsl2"/>

  <xd:doc type="stylesheet">
    <xd:short>intermediate-links mode: finds tei:ptr inside j:concurrent that would get "lost" if the links were followed.
    Insert them in the j:links section as tei:ptr's
    </xd:short>
    <xd:copyright>Copyright 2010-2011 Efraim Feinstein (LGPL 3+)</xd:copyright>
    <xd:detail>
        <p>This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

        <p>This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.</p>

        <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
        </p>
      </xd:detail>
  </xd:doc>

  <xd:doc>
    <xd:short>Add a j:links section if the document does not already have one</xd:short>
    <xd:detail>This template will probably only run if the mode is executed independently</xd:detail>
  </xd:doc>
  <xsl:template match="tei:TEI" mode="intermediate-links">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:choose>
        <xsl:when test="empty(j:links)">
          <xsl:variable name="int-links" as="element()*">
            <xsl:apply-templates select="//j:concurrent" mode="intermediate-links"/>
          </xsl:variable>
          <xsl:if test="exists($int-links)">
            <j:links>
              <xsl:sequence select="$int-links"/>
            </j:links>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="j:links" mode="#current"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short>If a j:links section exists, copy it exactly, then run the mode for j:concurrent</xd:short>
    <xd:detail>This template will probably only run if the mode is executed independently</xd:detail>
  </xd:doc>
  <xsl:template match="j:links" mode="intermediate-links">
    <xsl:copy>
      <xsl:sequence select="@*|node()"/>
      <xsl:apply-templates select="//j:concurrent" mode="#current"/>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short>Ignore text nodes inside the selection.</xd:short>
  </xd:doc>
  <xsl:template match="text()" mode="intermediate-links"/>
  
  <xd:doc>
    <xd:short>Copy a tei:ptr for intermediate link</xd:short>
  </xd:doc>
  <xsl:template name="copy-intermediate-tei-ptr">
    <tei:ptr jx:id="{@xml:id}">
      <xsl:if test="base-uri(.) ne (//j:links,//tei:TEI)[1]/base-uri()">
        <xsl:attribute name="xml:base" select="base-uri(.)"/>
      </xsl:if>
      <xsl:sequence select="@* except (@xml:id, @xml:base)"/>
    </tei:ptr>
  </xsl:template>
  
  <xd:doc>
  	<xd:short>views disappear in the concurrency process, make them 
  	point the something resembling a view</xd:short>
  </xd:doc>
  <xsl:template match="j:view[@xml:id]|j:selection[@xml:id]" mode="intermediate-links">
  	<tei:join jx:id="{@xml:id}" result="{name()}" 
  		target="{string-join(for $x in */@xml:id return concat('#', $x),' ')}"
  	  >
  	  <xsl:if test="base-uri(.) ne (//j:links,//tei:TEI)[1]/base-uri()">
        <xsl:attribute name="xml:base" select="base-uri(.)"/>
      </xsl:if>
	  <xsl:sequence select="@* except (@xml:id, @xml:base)"/>
  	</tei:join>
    <xsl:apply-templates select="self::j:view/*" mode="#current"/>
  </xsl:template>

  <xd:doc>
    <xd:short>Only copy an intermediate pointer in the selection
    if it's an internal pointer</xd:short>
  </xd:doc>
  <xsl:template match="tei:ptr[parent::j:selection][@xml:id]">
    <xsl:if test="every $target in tokenize(@target, '\s+') 
      satisfies func:uri-base-path(func:absolutize-uri($target, .))=func:original-document-uri(.)">
      <xsl:call-template name="copy-intermediate-tei-ptr"/>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Find pointers not in the selection.  Copy them</xd:short>
  </xd:doc>
  <xsl:template match="tei:ptr[not(parent::j:selection)][@xml:id]" mode="intermediate-links">
    <xsl:call-template name="copy-intermediate-tei-ptr"/>
  </xsl:template>
</xsl:stylesheet>
