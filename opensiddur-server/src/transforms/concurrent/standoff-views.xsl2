<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  extension-element-prefixes="xs xd func"
  >
  <xsl:import href="../../common/common.xsl2"/>
  <xsl:import href="../copy-context.xsl2"/>  
  <xsl:import href="../follow-uri.xsl2"/>
  <xd:doc type="stylesheet">
    <xd:short>
      Provides templates for handling stand-off markup links that result in virtual
      views.
    </xd:short>
    <xd:copyright>Copyright 2007-2011 Efraim Feinstein</xd:copyright>
    <xd:detail>
      <p>This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.</p>

      <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
      </p>
    </xd:detail>
    <xd:svnId>$Id: standoff-views.xsl2 744 2011-04-17 15:57:02Z efraim.feinstein $</xd:svnId>
  </xd:doc>

  <xd:doc>All standoff-markup links, indexed by first target.  
  It is up to the particular function to figure out what type they are.
  </xd:doc>
  <xsl:key name="all-links"
    match="tei:link"
    use="func:absolutize-uri(tokenize(@targets, '\s+')[1],.)"/>
  <!--  
  <xd:doc>
    <xd:short>Types of tei:link that result in a link via jx:relationship</xd:short>
  </xd:doc>
  <xsl:variable name="relationship-link-types" as="xs:string+"
    select="('source','quote','bibl','allude','note','instruct')"/>

  <xd:doc>Markable links, indexed by targets</xd:doc>
  <xsl:key name="relationship-links"
    match="tei:link[@type=$relationship-link-types]|
    tei:linkGrp[@type=$relationship-link-types]/tei:link|
    tei:respons"
    use="(
    if (@targets) 
    then func:absolutize-uri(tokenize(@targets, '\s+')[1],.)
    else if (@target)
    then 
      for $target in tokenize(@target, '\s+') 
      return func:absolutize-uri($target, .)
    else ()
    )"/>
  -->
  <!-- 
  <xd:doc>Parallel files referenced in $available-links, indexed by the 
  document URI of the original file.  These files contain stand-off links
  that apply to the current file.</xd:doc>
  <xsl:key name="parallel-files" 
    match="tei:link[@type='parallel-file']" 
    use="trace(func:absolutize-uri(tokenize(@targets, '\s+')[1],.), 'parallel-file')"/>
  -->
  <xd:doc>Index pointers by their targets</xd:doc>
  <xsl:key name="ptr-targets" match="tei:ptr"
    use="for $target in tokenize(@target,'\s+') 
      return func:absolutize-uri($target, .)"/>

  <xd:doc>Index elements by their absolutized xml:ids</xd:doc>
  <xsl:key name="absolute-ids" match="*[@xml:id|@jx:id]"
    use="trace(func:absolutize-uri(concat('#',(@jx:id,@xml:id)[1]), .),'absolute-ids')"/>

  <xd:doc>Exempt types from standoff-view processing (because they represent something that's not 
  handled here</xd:doc>
  <xsl:variable name="exempt-link-types" as="xs:string*" select="('parallel-file')"/>
 
  <xd:doc>
    <xd:short>Add views to $additional-views if any standoff linkages cause 
    their addition</xd:short>
  </xd:doc>
  <xsl:template match="j:concurrent" priority="100">
    <xsl:param name="additional-views" as="element(j:view)*" tunnel="yes"/>
    
    <xsl:next-match>
      <xsl:with-param name="additional-views" as="element(j:view)*" 
        tunnel="yes">
        <xsl:sequence select="$additional-views"/>
        <xsl:apply-templates select="//tei:link|//tei:respons|//j:links/tei:ptr" 
          mode="make-standoff-views"/> 
      </xsl:with-param>
    </xsl:next-match>
  </xsl:template>
 
  <xd:doc>
    <xd:short>Responsibility links become views</xd:short>
    <xd:detail>Only match when there is an @target. We cannot handle @match yet.</xd:detail>
  </xd:doc>
  <xsl:template match="tei:respons[@target]" mode="make-standoff-views" 
    as="element(j:view)*">
    <xsl:variable name="context" as="element(tei:respons)" select="."/>
    <xsl:for-each select="tokenize(@target,'\s+')">
      <xsl:variable name="standoff-views" as="item()*">
        <xsl:call-template name="run-make-standoff-views">
          <xsl:with-param name="context" as="element()" select="$context"/>
          <xsl:with-param name="uri" as="xs:string" select="."/>
          <xsl:with-param name="steps" as="xs:integer" select="0"/>
        </xsl:call-template>
      </xsl:variable>
    
      <xsl:if test="exists($standoff-views/self::element())">
        <j:view type="relationship">
          <xsl:attribute name="xml:base" select="base-uri($context)"/>
          <xsl:attribute name="jx:document-uri" select="func:original-document-uri($context)"/>
          <jx:relationship type="responsibility" subtype="{$context/@j:role}" 
            target="{func:absolutize-uri($context/@resp, $context)}">
            <xsl:sequence select="$standoff-views"/>
          </jx:relationship>
        </j:view>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Pointers that link to other files containing standoff annotations
    for this one</xd:short>
  </xd:doc>
  <xsl:template match="tei:ptr[@type='standoff']" mode="make-standoff-views" 
    as="element(j:view)*">
    <xsl:variable name="annotations" as="node()*">
      <xsl:apply-templates select="." mode="follow-uri"/>
    </xsl:variable>
    <xsl:apply-templates select="$annotations//tei:link" mode="#current">
      <xsl:with-param name="processing-context" as="node()" tunnel="yes" select="."/>
    </xsl:apply-templates>
  </xsl:template>
 
  <xd:doc>
    <xd:short>Links that become views</xd:short>
    <xd:param name="processing-context">The processing context of the link, which defaults here only if it
    has not already been set.</xd:param>
  </xd:doc>
  <xsl:template match="tei:link[not(@type=$exempt-link-types)]" mode="make-standoff-views" as="element(j:view)*">
    <xsl:param name="processing-context" tunnel="yes" as="node()" select="."/>
    <xsl:variable name="context" as="element(tei:link)" select="."/>
    
    <xsl:variable name="standoff-views" as="item()*">
      <xsl:call-template name="run-make-standoff-views">
        <xsl:with-param name="context" as="element()" select="$context"/>
        <xsl:with-param name="uri" as="xs:string" select="tokenize(@targets, '\s+')[1]"/>
        <xsl:with-param name="processing-context" as="node()" tunnel="yes" select="$processing-context"/>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:if test="exists($standoff-views/self::element())">
      <j:view type="relationship">
        <xsl:attribute name="xml:base" select="base-uri($context)"/>
        <xsl:attribute name="jx:document-uri" select="func:original-document-uri($context)"/>
        <jx:relationship type="{(@type, parent::tei:linkGrp/@type)[1]}" 
          target="{func:absolutize-uri(tokenize($context/@targets, '\s+')[2], $context)}">
          <xsl:sequence select="$standoff-views"/>
        </jx:relationship>
      </j:view>
    </xsl:if>
  </xsl:template>
 
  <xd:doc>
    <xd:short>Helper template for make-standoff-views mode: run the mode
    on follow-uri and if a jx:target-source attribute appears, copy it
    as an attribute.
    </xd:short>
    <xd:param name="context">The tei:link or tei:respons that induces the standoff
    views.</xd:param>
    <xd:param name="uri">The URI to follow that makes the standoff views</xd:param>
  </xd:doc>
  <xsl:template name="run-make-standoff-views" as="item()*">
    <xsl:param name="context" as="element()"/>
    <xsl:param name="uri" as="xs:string"/>
    <xsl:param name="steps" as="xs:integer" select="func:follow-steps($context, -1)"/>
    
    <xsl:variable name="result" as="node()*">
      <xsl:apply-templates select="func:follow-uri($uri, $context, $steps)" 
        mode="#current"/>
    </xsl:variable>
    <xsl:variable name="context-uri" as="xs:anyURI" select="func:original-document-uri($context)"/>
    
    <xsl:if test="$context/(@jx:id|@xml:id)">
      <xsl:attribute name="jx:id" select="$context/(@jx:id, @xml:id)[1]"/>
    </xsl:if>
    <xsl:attribute name="jx:source-document-uri" select="$context-uri"/>
    
    <xsl:for-each select="$result">
      <xsl:choose>
        <xsl:when test="@jx:target-source">
          <xsl:attribute name="target-source" select="@jx:target-source"/>
          <xsl:copy>
            <xsl:sequence select="@* except @jx:target-source, child::node()"/>
          </xsl:copy>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="."/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>
 
  <xd:doc>
    <xd:short>Ancestor is in a view or selection, point directly to it</xd:short>
  </xd:doc>
  <xsl:template match="*[ancestor::j:view|ancestor::j:selection]" 
    mode="make-standoff-views" 
    as="element(tei:ptr)?">
    <xsl:param name="processing-context" as="node()" tunnel="yes" select="."/>
    
    <xsl:if test="root($processing-context) is root(.)">
      <tei:ptr target="#{(@jx:id,@xml:id)[1]}" />
    </xsl:if>
  </xsl:template>
 
  <xd:doc>
    <xd:short>If the link points to a view or selection, the entire
    contents thereof are included</xd:short>
    <xd:detail>The error can be overcome by implementing XPointer 
    element()</xd:detail>
  </xd:doc>
  <xsl:template match="j:view|j:selection" 
    mode="make-standoff-views"
    as="element(tei:ptr)?">
    <xsl:param name="processing-context" as="node()" tunnel="yes" select="."/>
    
    <xsl:if test="root($processing-context) is root(.)">
      <xsl:if test="not(*[1]/@xml:id) or not(*[1]/@xml:id)">
        <xsl:sequence select="func:debug(
        ('The first and/or last child elements of ', 
        func:original-document-uri(.), func:get-xpath(.), 
        ' cannot be referenced because they have no xml:id.  ',
        'Processing a standoff view requires a reference to it!'), 
        'Unimplemented feature', $debug-error)"/>
      </xsl:if>
      <tei:ptr target="#range({*[1]/@xml:id},{*[last()]/@xml:id})"/>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>If the link points to a concurrent, the entire contents 
    of the selection are included</xd:short>
  </xd:doc>
  <xsl:template match="j:concurrent" 
    mode="make-standoff-views"
    as="element(tei:ptr)?">
    <xsl:param name="processing-context" as="node()" tunnel="yes"  select="."/>
    
    <xsl:if test="root($processing-context) is root(.)">
      <xsl:variable name="selection" as="element(j:selection)" select="j:selection"/>
      <tei:ptr target="#range({$selection/*[1]/@xml:id},{$selection/*[last()]/@xml:id})"/>
    </xsl:if>
  </xsl:template>
  
  
  <xd:doc>
    <xd:short>The entire repository: find all pointers in 
    the selection that point to the repository, and include them.
    </xd:short>
  </xd:doc>
  <xsl:template match="j:repository" mode="make-standoff-views"
    as="element(tei:ptr)*">
    <xsl:param name="processing-context" as="node()" tunnel="yes"  select="."/>
    
    <xsl:if test="root($processing-context) is root(.)">
      <xsl:variable name="context" as="element()" select="."/>
      <xsl:for-each select="//j:selection/tei:ptr">
        <xsl:if test="func:follow-uri(@target, ., 1)/ancestor::j:repository is $context">
          <tei:ptr target="#{@xml:id}"/> 
        </xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Inside the repository.  Find the selection pointer(s) that point
    to it (or closest to it).</xd:short>
  </xd:doc>
  <xsl:template match="*[ancestor::j:repository]" mode="make-standoff-views"
    as="element(tei:ptr)*">
    <xsl:param name="processing-context" as="node()" tunnel="yes"  select="."/>
    
    <xsl:if test="root($processing-context) is root(.)">
      <!-- the element that has a repository as its parent -->
      <xsl:variable name="repository-parent" as="element()" 
        select="ancestor-or-self::*[parent::j:repository][1]"/>
      <xsl:variable name="context" as="element()" select="."/>
      
      <xsl:for-each select="key('ptr-targets', 
          func:absolutize-uri(concat('#', $repository-parent/@xml:id), $repository-parent), //j:selection)">
        <tei:ptr target="#{@xml:id}">
          <xsl:if test="not($repository-parent is $context)">
            <xsl:attribute name="jx:target-source" select="concat('#',$context/@xml:id)"/>
          </xsl:if>
        </tei:ptr>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>
</xsl:stylesheet>
