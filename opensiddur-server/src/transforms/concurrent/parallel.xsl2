<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet
  version="2.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  extension-element-prefixes="xs xd func"
  >
  
  <xsl:import href="../follow-uri.xsl2"/>
  <xsl:import href="flatten.xsl2"/>
  <xsl:import href="../../common/common.xsl2"/>
  
  <xd:doc type="stylesheet">
    <xd:short>
      Provides templates for working with parallel texts, as described
      in the JLPTEI guidelines section on translations.
    </xd:short>
    <xd:detail>This file must be included, not imported, to work properly.
    </xd:detail>
    <xd:copyright>Copyright 2009 Efraim Feinstein</xd:copyright>

    <xd:detail>
      <p>This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.</p>

      <p>You should have received a copy of the GNU Lesser General Public License
        along with this program.  If not, see 
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
      </p>
    </xd:detail>
    <xd:svnId>$Id: parallel.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
  </xd:doc>
  
  <xd:doc>Parallel links referenced in $available-links, indexed by the 
  document URI of the original file</xd:doc>
  <xsl:key name="parallel-elements" 
    match="tei:link[@type='parallel']" 
    use="trace(func:absolutize-uri(tokenize(@targets, '\s+')[1],.), 'parallel-elements')"/>
  
  <xd:doc>
    <xd:short>Check for parallel files and if a parallel file exists,
    find parallel concurrencies to this one</xd:short>
    <xd:param name="available-links">As defined in 
      <xd:link>conditionals.xsl2</xd:link></xd:param>
  </xd:doc>
	<xsl:template match="j:concurrent[@xml:id]" priority="100">
    <xsl:param name="available-links" as="document-node()?" tunnel="yes"/>
    
    <xsl:variable name="absolute-id" as="xs:string" 
      select="string(func:absolutize-uri(concat('#',@xml:id),.))"/>
    <xsl:variable name="parallel-concurrent" as="element(j:concurrent)?"
      select="if (empty($available-links)) 
        then ()
        else 
          for $link in key('parallel-elements', 
            $absolute-id, $available-links)
            return func:follow-uri(tokenize($link/@targets,'\s+')[2],
              $link, -1)"/>
    
    <xsl:sequence select="func:debug(
    ('$available-links = ', $available-links, '&#x0a;',
    '$parallel-concurrent = ', $parallel-concurrent),
    ('j:concurrent[@xml:id], priority=100 for ', func:get-xpath(.)), $debug-detail)"/>
    
    <!-- 
    Three possibilities exist here:
    (1) There are no parallel hierarchies.  If so, continue as normal.
    (2) There are parallel hierarchies and the parallelism is expressed 
    internally without reference to an external selection.  If so,
    the parallel section is simply an additional view
    (3) There are parallel hierarchies and the parallelism is expressed
    with reference to an external selection.  If so, we need to process
    the concurrent hierarchies of all the parallel selections and
    merge them.
     -->
    <xsl:choose>
      <xsl:when test="not(empty($parallel-concurrent))">
        <xsl:sequence select="func:debug((
      'absolute-id = ', $absolute-id,
      ' parallel-elements = ', $available-links/key('parallel-elements', $absolute-id),
      ' parallel-concurrent = ', $parallel-concurrent, ()
      (:' concurrent-with-parallel = ', $concurrent-with-parallel:)
      ), 'j:concurrent, priority 100', $debug-info)"/>
        <!-- apply the lower priority template to the hierarchy
        including the added concurrencies. -->
        <xsl:next-match>
          <xsl:with-param name="additional-views" tunnel="yes"
            as="element(j:view)+" select="$parallel-concurrent/*"/>
        </xsl:next-match>
      </xsl:when>
      <xsl:otherwise>
        <xsl:next-match/>
      </xsl:otherwise>
    </xsl:choose>
	</xsl:template>
  
  <xd:doc>
    <xd:short>Ready a flattened hierarchy for parallel processing.</xd:short>
    <xd:detail>A flat hierarchy is readied as follows: Any time a 
    j:parallelGrp is found, all open tags are suspended.  The tags are
    reopened in both the original and parallel sections of the parallelGrp,
    and, if still open at the end, are suspended again.  All suspended tags
    are continued on the other side of the parallelGrp.</xd:detail>
  </xd:doc>
  <xsl:template match="element()" 
    mode="ready-flattened-for-parallel-processing" 
    as="element()*">
    <xsl:param name="opened-tags" as="element()*"/>
    
    <xsl:sequence select="."/>
    <xsl:apply-templates select="following-sibling::*[1]" mode="#current">
      <xsl:with-param name="opened-tags" as="element()*" 
        select="if (@jx:start|@jx:continue) 
          then ($opened-tags, .)
          else if (@jx:end|@jx:suspend) 
          then $opened-tags except $opened-tags
            [@jx:start=(current()/@jx:end,current()/@jx:suspend)]
          else $opened-tags"/>
    </xsl:apply-templates>    
  </xsl:template>
  
  <xd:doc>
    <xd:short>Make a parallelGrp into a hierarchical organization from
    a flat organization, to allow flattened hierarchies to 
    undergo parallel-text processing</xd:short>
    <xd:param name="opened-tags">Keeps track of tags that have been opened
    </xd:param>
    <xd:param name="suspended-tags">Keeps track of tags that have been 
    suspended</xd:param>
  </xd:doc>
  <xsl:template match="j:parallelGrp[@jx:start or @jx:continue]" 
    mode="ready-flattened-for-parallel-processing"
    as="element()*">
    <xsl:param name="opened-tags" as="element()*"/>
    <xsl:param name="suspended-tags" as="element()*"/>
    
    <xsl:sequence select="func:debug(('.=',.,
    'all children = ', following-sibling::*),'j:parallelGrp, mode=ready-flattened-for-parallel-processing', $debug-detail)"/>
    
    <xsl:variable name="parallel-group-end" as="element(j:parallelGrp)"
      select="following-sibling::j:parallelGrp
        [current()/(@jx:start,@jx:continue)=(@jx:end,@jx:suspend)]"/>
    <xsl:variable name="original-group" as="element(j:original)?"
      select="following-sibling::j:original[@jx:start or @jx:continue][@jx:parents=current()/@jx:uid]"/>
    <xsl:variable name="parallel-groups" as="element(j:parallel)*"
      select="following-sibling::j:parallel[@jx:start or @jx:continue][@jx:parents=current()/@jx:uid]"/>
    <xsl:variable name="inside-parallel-group" as="element()*"
      select="following-sibling::* intersect 
        $parallel-group-end/preceding-sibling::*"/>
    <xsl:variable name="opened-tags-at-end" as="element()*"
      select="func:unclosed-tags($opened-tags|$inside-parallel-group)"/>
    
    <xsl:sequence select="func:continue-or-suspend(
      reverse($opened-tags),'suspend')"/>
    <xsl:copy>
      <xsl:copy-of select="@* except (@jx:start, @jx:continue)"/>
      <xsl:apply-templates select="$original-group|$parallel-groups" 
        mode="#current">
        <xsl:with-param name="opened-tags" select="()"/>
        <xsl:with-param name="suspended-tags" select="$opened-tags"/>
      </xsl:apply-templates>
    </xsl:copy>  
    <xsl:sequence 
      select="func:continue-or-suspend($opened-tags-at-end,'continue')"/> 
    <xsl:apply-templates 
      select="$parallel-group-end/following-sibling::*[1]" 
      mode="#current">
      <xsl:with-param name="opened-tags" as="element()*"
        select="$opened-tags-at-end" />
    </xsl:apply-templates>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Do nothing when reaching the end of a parallelGrp.
    The @jx:start|@jx:continue template handles it.</xd:short>
  </xd:doc>
  <xsl:template match="j:parallelGrp[@jx:end or @jx:suspend]" 
    mode="ready-flattened-for-parallel-processing"
    as="empty-sequence()"/>
  
  <xd:doc>
    <xd:short>Continue suspended tags for the current-selection
    parallel text, simply copy the other.</xd:short>
  </xd:doc>
  <xsl:template match="j:original[@jx:start or @jx:continue]|
    j:parallel[@jx:start or @jx:continue]"
    mode="ready-flattened-for-parallel-processing"
    as="element()+">
    <xsl:param name="suspended-tags" as="element()*"/>
    <xsl:param name="selection-id" as="xs:string" tunnel="yes"/>
    
    <xsl:choose>
      <xsl:when test="$selection-id eq @jx:selection-origin">
        <xsl:call-template name="process-start-as-current-concurrency">
          <xsl:with-param name="suspended-tags" select="$suspended-tags"
            as="element()*"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="process-start-as-other-concurrency"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xd:doc>
    <xd:short>Suspend tags that are still open at the end of
    the current-selection parallel text, do nothing for the other.
    </xd:short>
  </xd:doc>
  <xsl:template match="j:original[@jx:end or @jx:suspend]|
    j:parallel[@jx:end or @jx:suspend]" 
    mode="ready-flattened-for-parallel-processing"
    as="element()*">
    <xsl:param name="opened-tags" as="element()*"/>
    <xsl:param name="selection-id" as="xs:string" tunnel="yes"/>
    
    <xsl:if test="@jx:selection-origin=$selection-id">    
      <xsl:call-template name="process-end-as-current-concurrency">
        <xsl:with-param name="opened-tags" select="$opened-tags"
          as="element()*"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

  <xd:doc>
    <xd:short>process the start of an original or parallel group
    as it would be processed for the active selection</xd:short>
  </xd:doc>
  <xsl:template name="process-start-as-current-concurrency">
    <xsl:param name="suspended-tags" as="element()*"/>
    
    <xsl:copy>
      <xsl:copy-of select="@* except (@jx:start,@jx:continue)"/>
      <xsl:sequence 
        select="func:continue-or-suspend($suspended-tags,'continue')"/>
      <xsl:apply-templates select="following-sibling::*[1]" mode="#current">
        <xsl:with-param name="opened-tags" as="element()*"
          select="$suspended-tags"/>
      </xsl:apply-templates>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
    <xd:short>process the end of an original or parallel group
    as it would be processed for the active selection</xd:short>
  </xd:doc>
  <xsl:template name="process-end-as-current-concurrency">
    <xsl:param name="opened-tags" as="element()*"/>
    
    <xsl:sequence select="
      func:continue-or-suspend(reverse($opened-tags),'suspend')"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>process the start of an original or parallel group
    as it would be processed for an inactive selection</xd:short>
  </xd:doc>
  <xsl:template name="process-start-as-other-concurrency">
    <xsl:copy>
      <xsl:copy-of select="@* except (@jx:start,@jx:continue)"/>
      <xsl:apply-templates select="following-sibling::*[1]" mode="#current"/>
    </xsl:copy>
  </xsl:template>
    
</xsl:stylesheet>
