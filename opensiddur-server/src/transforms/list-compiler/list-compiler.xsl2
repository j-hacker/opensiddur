<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="2.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor" 
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all">
  <xsl:import href="../../common/common.xsl2"/>
  <xsl:import href="bibliography.xsl2"/>
  <xsl:import href="licensing.xsl2"/>
  <xsl:import href="credits.xsl2"/>
   <xd:doc type="stylesheet">
    <xd:short>Include other stylesheets that do the work for the list compiler,
    which does all processing that requires knowledge of the whole
    document.</xd:short>
    <xd:copyright>Copyright 2009-2011 Efraim Feinstein
    </xd:copyright>
    <xd:detail>
      <p>This program is free software: you can redistribute it
        and/or modify
        it under the terms of the GNU Lesser General Public License as
        published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be
        useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU Lesser General Public License for more details.</p>

      <p>
        You should have received a copy of the GNU Lesser General Public
        License along with this program. If not, see
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/
        </a>
        .
      </p>
    </xd:detail>
    <xd:svnId>$Id: list-compiler.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
  </xd:doc>

  <xsl:strip-space elements="*"/>
  
  <xd:doc>This is primarily an identity transform that runs generators
  for lists as back matter.</xd:doc>
  <xsl:template match="tei:text">
    <xsl:copy>
      <xsl:sequence select="@*"/>
      <xsl:apply-templates />
      <xsl:if test="not(tei:back)">
        <xsl:call-template name="generate-back-matter"/>
      </xsl:if>
      <!-- add -->
    </xsl:copy>
  </xsl:template>
  
  <xsl:template match="tei:back">
    <xsl:call-template name="generate-back-matter"/> 
  </xsl:template>
  
  <xd:doc>
    <xd:short>Helper template to make the back matter.  If a tei:back element exists,
    it should be the context.  Otherwise, it will make a new back matter section.</xd:short>
  </xd:doc>
  <xsl:template name="generate-back-matter" as="element(tei:back)">
    <xsl:variable name="new-back-matter" as="node()*">
      <xsl:call-template name="generate-license-list"/>
      <xsl:call-template name="generate-credits-list"/>
      <xsl:call-template name="generate-bibliography-list"/> 
    </xsl:variable>
    <xsl:choose>
      <xsl:when test=". instance of element(tei:back)">
        <xsl:copy>
          <xsl:sequence select="@*"/>
          <xsl:apply-templates />
          <xsl:sequence select="$new-back-matter"/>
        </xsl:copy>
      </xsl:when> 
      <xsl:otherwise>
        <tei:back>
          <xsl:sequence select="$new-back-matter"/>
        </tei:back>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xd:doc>Identity template for everything else</xd:doc>
  <xsl:template match="*">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates mode="#current"/>
    </xsl:copy>
  </xsl:template>
  
</xsl:stylesheet>
