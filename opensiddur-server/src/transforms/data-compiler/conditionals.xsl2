<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet
	version="2.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:tei="http://www.tei-c.org/ns/1.0"
	xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor"
	xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  xmlns:debug="http://jewishliturgy.org/ns/debug/1.0"
	extension-element-prefixes="xs xd func debug"
	>
  	
  <xsl:import href="../../common/common.xsl2"/>
  <!--xsl:import href="standoff.xsl2"/-->
  <xsl:import href="../follow-uri.xsl2"/>
  <xsl:import href="feature-declarations.xsl2"/>
  
	<xd:doc type="stylesheet">
		<xd:short>
			Provides templates and functions for working with the concept of 
      feature selection:
      association of a feature set with an element via tei:link,
      association of grammatical information via @ana, and
      and retrieval of current selections by name.
		</xd:short>
		<xd:detail>
      <p>Active links are stored in a tunneled variable called $active-association-links.
      $available-links *must* be updated every time the context 
      switches documents (at the start of processing and at tei:ptr). 
      Active selections are stored in a tunneled variable called
      $active-selections.  Active selections switch when an @xml:id in-context
      is referenced in $available-links.</p>
		</xd:detail>
		<xd:copyright>Copyright 2007-2011 Efraim Feinstein</xd:copyright>

		<xd:detail>
			<p>This program is free software: you can redistribute it and/or modify
			it under the terms of the GNU Lesser General Public License as published by
			the Free Software Foundation, either version 3 of the License, or
			(at your option) any later version.</p>

			<p>This program is distributed in the hope that it will be useful,
			but WITHOUT ANY WARRANTY; without even the implied warranty of
			MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
			GNU Lesser General Public License for more details.</p>

			<p>You should have received a copy of the GNU Lesser General Public License
				along with this program.  If not, see 
				<a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
			</p>
		</xd:detail>
	</xd:doc>

  <xd:doc>
    <xd:short>Indexes conditional associations within available-links
     by the xml:id that sets them off.</xd:short>
  </xd:doc>
  <xsl:key name="conditional-associations" 
    match="tei:link[@type='association']" 
    use="func:absolutize-uri(tokenize(@targets, '\s+')[1],.)"/>

  <xd:doc>
    <xd:short>Indexes conditional settings by the xml:id 
    that sets them off.</xd:short>
  </xd:doc>
  <xsl:key name="conditional-sets" 
    match="tei:link[@type='set']" 
    use="func:absolutize-uri(tokenize(@targets, '\s+')[1],.)"/>
  
  <xd:doc>
    <xd:short>Indexes which documents' associations are currently
    stored so they will not be stored more than once</xd:short>
  </xd:doc>
  <xsl:key name="visited-documents" match="jx:document" use="string(.)"/>  
  

  <xd:doc>
    <xd:short>Use the debug output-conditionals processing instruction to cause the output of the current-settings structure in the output stream </xd:short>
  </xd:doc> 
  <xsl:template match="debug:output-conditionals" mode="#all">
    <xsl:param name="current-settings" as="document-node()?" tunnel="yes"/>
    <xsl:copy>
      <xsl:attribute name="xpath" select="func:get-xpath(..)"/>
      <xsl:if test="../(@xml:id,@jx:id)">
        <xsl:attribute name="id" select="../(@jx:id,@xml:id)[1]"/>
      </xsl:if>
      <xsl:sequence select="$current-settings"/>
    </xsl:copy>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Catch @xml:id with high priority for new set links.  
    If the @xml:id includes new sets, put them in 
    $current-settings (tunneled parameter).  
    </xd:short>
  </xd:doc>
  <xsl:template match="*[@xml:id|@jx:id]" priority="901" 
    mode="#default process-conditionals data-compiler">
    <xsl:param name="current-settings" 
      as="document-node(element(jx:current-settings))?" tunnel="yes" />
   
    <xsl:variable name="available-links" as="element(jx:available-links)?"
      select="$current-settings//jx:available-links"/> 
    <xsl:variable name="my-id" as="xs:string" select="(@jx:id,@xml:id)[1]"/>
    
    <xsl:variable name="set-links-unconditional" as="element(tei:link)*" 
      select="if (empty($available-links)) 
        then ()
        else key('conditional-sets', 
          func:absolutize-uri(concat('#', $my-id), .),
          $available-links)
        "/>
    <!-- Allow link-setting to be done on a conditional basis.
    Note that for this type of link setting, the conditions must
    be in-context at the time of processing  -->
    <xsl:variable name="set-links" as="element(tei:link)*">
      <xsl:apply-templates select="$set-links-unconditional" 
        mode="process-conditionals"/>
    </xsl:variable>
    
    <xsl:variable name="new-settings" as="element(tei:fs)*">
      <xsl:apply-templates mode="standardize-features"
        select="for $link in $set-links 
          return func:follow-uri(tokenize($link/@targets, '\s+')[2],$link, -1)">
        <xsl:with-param name="processing-context" as="node()" select="." tunnel="yes"/>
      </xsl:apply-templates>
    </xsl:variable>
    
    <xsl:variable name="next-settings" as="document-node()?">
      <xsl:choose>
        <xsl:when test="exists($new-settings)">
          <xsl:sequence select="func:debug('INCORPORATING NEW SELECTIONS','next-settings',$debug-detail)"/>
          <xsl:document>
            <xsl:call-template name="incorporate-new-selections">
              <xsl:with-param name="old-settings" select="$current-settings"
                as="document-node()?"/>
              <xsl:with-param name="new-settings" select="$new-settings"
                as="element(tei:fs)*"/>
            </xsl:call-template>
          </xsl:document>
        </xsl:when>
        <xsl:otherwise>
          <!-- 
          <xsl:sequence select="func:debug('CURRENT SETTINGS ONLY','next-settings',$debug-info)"/>
           -->
          <xsl:sequence select="$current-settings"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
     
    <xsl:sequence select="func:debug((
      'absolute uri: ', func:absolutize-uri(concat('#', $my-id), .),
      ' $available-links: ', $available-links,
      ' $set-links-unconditional: ', $set-links-unconditional,
      ' $set-links: ', $set-links,
      ' $next-settings:', $next-settings), 
      '@xml:id p=901', $debug-detail)"/>
    
    <xsl:next-match>
      <xsl:with-param name="current-settings" 
        as="document-node(element(jx:current-settings))?"
        tunnel="yes" select="$next-settings"/>
    </xsl:next-match>
  </xsl:template>

	<xd:doc>
		<xd:short>Combines <code>$old-settings</code> and 
    <code>$new-settings</code> into a form suitable for the 
    <code>$current-settings</code> tunneled parameter.  Returns 
		a document containing the combined selections under a 
    <code>jx:current-settings</code> root.</xd:short>
		<xd:detail>
				Any duplication in fs[@type]/f[@name] between 
        $new-settings and $old-settings results in the version from 
        $new-settings replacing the one from $old-settings.
  	</xd:detail>
		<xd:param name="old-settings">current settings before incorporation 
     of the new ones</xd:param>
		<xd:param name="new-settings">New settings to incorporate (see details).
    </xd:param>
	</xd:doc>
	<xsl:template name="incorporate-new-selections">
		<xsl:param name="old-settings" as="document-node(element(jx:current-settings))?"/>
		<xsl:param name="new-settings" as="element(tei:fs)*" />
    
		<!-- sort new-selections by fs[@type] -->
		<xsl:variable name="sorted-new-settings" as="element(tei:fs)*">
			<xsl:for-each-group select="$new-settings/self::tei:fs" group-by="@type">
				<tei:fs type="{current-grouping-key()}">
					<xsl:sequence select="current-group()/child::node()"/>
				</tei:fs>
			</xsl:for-each-group>
		</xsl:variable>
    
		<xsl:variable name="old-settings-div" as="element(jx:feature-selections)?"
      select="$old-settings/jx:current-settings/jx:feature-selections"/>

		<!-- now, insert from new-selections -->
		<xsl:variable name="combined-settings">
			<!-- start with old-settings.  Group by fs[@type] -->
			<xsl:variable name="old-types" as="xs:string*" 
        select="$old-settings-div/tei:fs/@type"/>
			<xsl:for-each select="$old-settings-div/tei:fs">
				<tei:fs type="{@type}">
					<xsl:variable name="current-fs-type" as="xs:string"
            select="@type"/>
					<xsl:variable name="old-f-names" as="xs:string*"
            select="tei:f/@name"/>
					<xsl:variable name="new-f-names" as="xs:string*" 
            select="$new-settings/
              self::tei:fs[@type=$current-fs-type]/tei:f/@name"/>
					<!-- insert the old features that had no overlap (features with overlap are no longer selected or their values changed) -->
					<xsl:sequence select="tei:f[not(@name=$new-f-names)]"/>
					<!-- insert all new features in this structure -->
					<xsl:sequence 
            select="$new-settings/self::tei:fs[@type=$current-fs-type]/tei:f"/>
				</tei:fs>
			</xsl:for-each>
			<!-- fill in the new selections whose types have not been seen before in the old selections -->
			<xsl:sequence
        select="$sorted-new-settings/self::tei:fs[not(@type=$old-types)]"/>
		</xsl:variable>
		<xsl:document>
			<jx:current-settings>
        <jx:feature-selections>
				  <xsl:sequence select="$combined-settings"/>
        </jx:feature-selections>
        <xsl:sequence 
          select="$old-settings/jx:current-settings/(* except jx:feature-selections)"/>
			</jx:current-settings>
		</xsl:document>
	</xsl:template>
	
  <xd:doc>
    <xd:short>Add a feature structure declaration to the current context,
    do not add if the type has already been declared (as shown by 
    $feature-declarations)
    </xd:short>
  </xd:doc>
  <xsl:template match="tei:fsDecl" mode="feature-declarations">
    <xsl:param name="feature-declarations" as="document-node()?" 
      tunnel="yes"/>
    <xsl:if test="not($feature-declarations/jx:sources/jx:source
      [@type=current()/@type and @source=func:document-id(root(.))])">
      <xsl:sequence select="."/>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Add a feature structure declaration via link</xd:short>
  </xd:doc>
  <xsl:template match="tei:fsdLink" mode="feature-declarations">
    <xsl:apply-templates select="func:follow-uri(@target, ., -1)" 
      mode="#current"/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>process-conditionals mode is intended to process
    conditionals and do nothing else, so, if all else passes,
    it's an identity transform</xd:short>
  </xd:doc>
  <xsl:template match="element()" mode="process-conditionals">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" mode="#current"/>
    </xsl:copy>
  </xsl:template>

  <!-- standardize-features -->
  	<xd:doc>
		<xd:short>Builds a feature structure of the same type and content as the 
    original feature structure, with the following exceptions:
			if any features are expressed in @feats parameters, 
      they are converted to child &lt;f/&gt; elements.</xd:short>
			<xd:detail>Assumes the input is valid TEI.</xd:detail>
	</xd:doc>
	<xsl:template match="tei:fs" mode="standardize-features">
		<xsl:copy>
			<xsl:apply-templates select="@* except @feats" mode="#current"/>
  			<xsl:if test="@feats">
          <xsl:apply-templates select="for $feat in tokenize(@feats,'\s+') return func:follow-uri($feat, ., -1)" 
            mode="#current"/>
        </xsl:if>
        <xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>
	
  <xd:doc>
		<xd:short>Like standardize-features, but also adds default values for nonexistent features</xd:short>
	</xd:doc>
	<xsl:template match="tei:fs" mode="set-features">
		<xsl:copy>
			<xsl:apply-templates select="@* except @feats" mode="#current"/>
      <xsl:variable name="present-features" as="element(tei:f)*">
  			<xsl:if test="@feats">
          <xsl:apply-templates select="for $feat in tokenize(@feats,'\s+') return func:follow-uri($feat, ., -1)" 
            mode="#current"/>
        </xsl:if>
        <xsl:apply-templates mode="#current"/>
      </xsl:variable>
      <xsl:sequence select="$present-features"/>
      <!-- features that are not present and required are set to their default values -->
      <xsl:apply-templates mode="#current" 
        select="func:get-fs-declaration(@type, .)/tei:fDecl[not(@optional) or @optional='false'][not(@name = $present-features/@name)]/tei:vDefault"/>
		</xsl:copy>
	</xsl:template>
	
	<xd:doc>
		<xd:short>
			Like <xd:link>tei:fs</xd:link>, 
      converts tei:f into a consistent format, 
      where all values are referenced	by inline elements (removes @fVal)
		</xd:short>
	</xd:doc>
	<xsl:template match="tei:f" mode="standardize-features set-features">
		<xsl:copy>
      <xsl:apply-templates select="@* except @fVal" mode="#current"/>
			<xsl:if test="@fVal">
				<xsl:apply-templates 
          select="for $fVal in tokenize(@fVal, '\s+') return func:follow-uri($fVal, ., -1)" mode="#current"/>
			</xsl:if>
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>

	<xd:doc>
    <xd:short>Elements that are ignored, but their content is kept</xd:short>
	</xd:doc>
	<xsl:template match="tei:vAlt[parent::tei:vAlt]|
    tei:vLabel[element()]" mode="standardize-features set-features">
    <xsl:apply-templates mode="#current"/>
	</xsl:template>

  <xd:doc>
    <xd:short>Hold vLabels that can be referenced by name</xd:short>
  </xd:doc>
  <xsl:key name="vLabels" match="tei:vLabel[element()]" use="@name"/> 

  <xd:doc>
    <xd:short>vLabel without element content copies the content of the vLabel</xd:short>
  </xd:doc>
  <xsl:template match="tei:vLabel[not(element())]" mode="standardize-features set-features">
    <xsl:apply-templates select="key('vLabels', @name, root(.))" mode="#current"/>
  </xsl:template>

  <!-- I don't know if any of this will ever be used: -->

	<!-- model.complexVal (vColl, vMerge, vNot) -->
	<xd:doc>
		<xd:short>copies element and contents *unless* the immediate parent is a vColl of the same type, in which case, only the contents are copied.</xd:short>
		<xd:detail>Assumes default @org='set'</xd:detail>
	</xd:doc>
	<xsl:template match="tei:vColl" mode="standardize-features set-features">
		<xsl:variable name="contents">
			<xsl:apply-templates mode="#current"/>
		</xsl:variable>
		<xsl:variable name="org" as="xs:string" select="(@org,'set')[1]"/>

		<xsl:choose>
			<xsl:when test="parent::tei:vColl[(not(@org) and $org='set') or (@org=$org)]">
				<xsl:sequence select="$contents"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:sequence select="$contents"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xd:doc>
		<xd:short>Turns whatever is directly descending from it into one collection of the given @org type.</xd:short>
	</xd:doc>
	<xsl:template match="tei:vMerge" mode="standardize-features set-features">
		<tei:vColl org="{(@org,'set')[1]}">
      <xsl:apply-templates mode="#current"
        select="tei:vColl/node()|tei:vMerge/node()|node()[not(self::tei:vMerge or self::tei:vColl)]"/>
		</tei:vColl>
	</xsl:template>

	<xd:doc>
		<xd:short>Look up the declared default value of the given feature</xd:short>
	</xd:doc>
	<xsl:template match="tei:default" mode="standardize-features set-features">
		<xsl:param name="current-settings" tunnel="yes" as="document-node()?"/>

		<xsl:variable name="feature-name" as="xs:string" select="ancestor::tei:f[1]/@name"/>
		<xsl:variable name="feature-type" as="xs:string" select="(ancestor::tei:fs[1]/@type,'')[1]"/>
			
		<xsl:apply-templates select="func:get-feature-declaration($feature-type, $feature-name, .)/tei:vDefault"
      mode="#current"/>
	</xsl:template>
   
  <xd:doc>
    <xd:short>Set default value. If more than one result comes up, combine them by or logic.</xd:short>
  </xd:doc>
  <xsl:template match="tei:vDefault" mode="standardize-features set-features">
    <xsl:variable name="result" as="element()*">
      <xsl:apply-templates mode="#current"/>
    </xsl:variable>
    <xsl:variable name="yes" as="element()"><tei:symbol value="YES"/></xsl:variable>
    <xsl:variable name="no" as="element()"><tei:symbol value="NO"/></xsl:variable>
    <xsl:variable name="maybe" as="element()"><tei:symbol value="MAYBE"/></xsl:variable>
    <xsl:variable name="on" as="element()"><tei:symbol value="ON"/></xsl:variable>
    <xsl:variable name="off" as="element()"><tei:symbol value="OFF"/></xsl:variable>
    <xsl:sequence select="
      if (count($result) &lt;= 1)
      then $result
      else 
        if ($result/@value = 'MAYBE') 
        then $maybe
        else if ($result/@value = 'YES') 
        then $yes
        else if ($result/@value = 'ON')
        then $on
        else if ($result/@value = 'OFF')
        then $off 
        else $no"/>
  </xsl:template>
  

  <xd:doc>
    <xd:short>Conditional feature value: evaluate the condition, if it evaluates to something equivalent to true, use the given value</xd:short>
  </xd:doc>
  <xsl:template match="tei:if" mode="standardize-features set-features">
    <xsl:param name="current-settings" as="document-node(element(jx:current-settings))?" tunnel="yes"/>
    <xsl:param name="processing-context" as="node()" tunnel="yes"/>
    <xsl:if test="func:evaluate-conditional(tei:then/preceding-sibling::*, $current-settings, $processing-context) = ('YES','MAYBE','ON')">
      <xsl:sequence select="tei:then/following-sibling::*"/>
    </xsl:if>
  </xsl:template>  


	<xd:doc>
		<xd:short>Literally copy all text.</xd:short>
	</xd:doc>
	<xsl:template match="text()" mode="standardize-features set-features">
    <xsl:if test="normalize-space(.)">
      <xsl:copy/>
    </xsl:if>
  </xsl:template>
  
  <xd:doc>
    <xd:short>Default is identity template</xd:short>
  </xd:doc>
  <xsl:template match="*" mode="standardize-features set-features">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" mode="#current"/>
    </xsl:copy>
  </xsl:template>


  <!-- evaluate-conditionals -->
  <xd:doc>
		<xd:short>Get the value of a selected feature, given its name, type, and the current selections.  
    If it is not selected, get its default value
    </xd:short>
    <xd:detail>Extends func:get-selection-value() in standardize-features.xsl2</xd:detail>
		<xd:param name="current-settings">Document containing currently active features</xd:param>
		<xd:param name="type">The name of the feature to look up</xd:param>
		<xd:param name="name">The type of the feature to look up</xd:param>
    <xd:param name="context">The processing context</xd:param>
	</xd:doc>
	<xsl:function name="func:get-selection-value-or-default" as="xs:string?">
	  <xsl:param name="current-settings" as="document-node(element(jx:current-settings))?"/>
    <xsl:param name="type" as="xs:string"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="context" as="node()"/>
  	<xsl:variable name="selection-value" as="xs:string?" 
      select="func:get-selection-value($current-settings, $type, $name)"/>
    <xsl:choose>
      <xsl:when test="$selection-value">
        <xsl:sequence select="$selection-value"/>
      </xsl:when>
      <xsl:otherwise>
        <!-- try to get the default value -->
        <xsl:variable name="default-value" as="element(tei:symbol)?">
          <xsl:apply-templates 
            select="func:get-feature-declaration($type, $name, $context)/tei:vDefault" 
            mode="standardize-features">
            <xsl:with-param name="processing-context" as="node()" select="$context" tunnel="yes"/>
          </xsl:apply-templates>
        </xsl:variable>
        <xsl:sequence select="$default-value/@value"/>
      </xsl:otherwise>
    </xsl:choose>
	</xsl:function>


  <xd:doc>
    <xd:short>Indexes conditional associations within available-links
     by the xml:id that sets them off.</xd:short>
  </xd:doc>
  <xsl:key name="conditional-associations" 
    match="tei:link[@type='association']" 
    use="func:absolutize-uri(tokenize(@targets, '\s+')[1],.)"/>

  <xd:doc>
    <xd:short>Index conditionals by their type and name separated by the string '->'.  
    If the tei:fs has no type, it is represented by the empty string.
    </xd:short>
  </xd:doc>
  <xsl:key name="conditional-value"
    match="tei:fs/tei:f/tei:symbol/@value"
    use="string-join(((ancestor::tei:fs[1]/@type,'')[1], ancestor::tei:f[1]/@name),'->')"/>

	<xd:doc>
		<xd:short>Get the value of a selected feature, 
    given its name, type, and the current selections.  
    </xd:short>
		<xd:param name="current-settings">Document containing currently active features</xd:param>
		<xd:param name="type">The name of the feature to look up</xd:param>
		<xd:param name="name">The type of the feature to look up</xd:param>
	</xd:doc>
	<xsl:function name="func:get-selection-value" as="xs:string?">
		<xsl:param name="current-settings" as="document-node(element(jx:current-settings))?"/>
		<xsl:param name="type" as="xs:string"/>
    <xsl:param name="name" as="xs:string"/>
  	<xsl:sequence select="
      if (empty($current-settings))
      then ()
      else key('conditional-value', string-join(($type, $name),'->'), $current-settings)
      "/>
	</xsl:function>
	
  <xd:doc>
    <xd:short>Catch *[@xml:id] with high priority to check for association 
    links.  If an association link is found, check the associated 
    condition, evaluate it and determine how to continue.</xd:short>
  </xd:doc>
  <xsl:template match="*[@xml:id|@jx:id]" priority="900" 
    mode="#default process-conditionals data-compiler">
    <xsl:param name="current-settings" tunnel="yes"
      as="document-node(element(jx:current-settings))?" />
    
    <!-- if this element is a jx:relationship, then it represents an external
    standoff link, which can't turn off all its children; therefore, YES
    must translate to ON and NO to OFF. -->
    <xsl:variable name="yes-is-on" as="xs:boolean" 
      select=". instance of element(jx:relationship)"/>
      
    <xsl:variable name="my-id" as="xs:string" select="(@jx:id,@xml:id)[1]"/>
    <xsl:variable name="association-links-unconditional" 
      as="element(tei:link)*" 
      select="
        if (empty($current-settings)) 
        then ()
        else key('conditional-associations', 
          func:absolutize-uri(concat('#', $my-id), .),
          $current-settings)"/>
    <!-- Allow link associations to be conditional -->
    <xsl:variable name="association-links" as="element(tei:link)*">
      <xsl:apply-templates select="$association-links-unconditional"
        mode="process-conditionals"/>
    </xsl:variable>
    
    <!-- determines whether this element should be processed, 
    YES or MAYBE resolves to true(), NO to false().
    If the result is MAYBE, then, all MAYBE-valued conditionals need
    their instructions inserted; 
    we also store the conditionals in jx:standardized-conditional so they
    can be copied out later
     -->
    <xsl:variable name="conditional-results" as="element(jx:result)*">
      <xsl:for-each select="$association-links">
        <xsl:variable name="links" as="xs:string+"
          select="tokenize(@targets,'\s+')"/>
        <xsl:variable name="standardized-conditional" as="element(tei:fs)">
          <xsl:apply-templates select="func:follow-uri($links[2],.,-1)"
            mode="standardize-features"/>
        </xsl:variable>
        <xsl:variable name="result" as="xs:string" 
          select="func:evaluate-conditional($standardized-conditional, $current-settings, .)"/>
        <jx:result result="{
          if ($yes-is-on)
          then 
            if ($result = 'YES') 
            then 'ON'
            else if ($result = 'NO')
            then 'OFF'
            else $result
          else $result}">
          <xsl:if test="$links[3] and $result='MAYBE'">
            <!-- this is a pointer to an instruction -->
            <xsl:attribute name="instruction" select="$links[3]"/>
            <xsl:attribute name="xml:base" select="base-uri(.)"/>
          </xsl:if>
          <jx:conditional>
            <xsl:sequence select="$standardized-conditional"/>
          </jx:conditional>
        </jx:result>
      </xsl:for-each>
    </xsl:variable>
 
    <xsl:variable name="continue-dependent-results" as="xs:string*"
      select="$conditional-results/@result[.=('YES','NO','MAYBE')]"/>
    <xsl:variable name="should-continue" as="xs:boolean" select="
        (empty($conditional-results) or
        empty($continue-dependent-results) or
        $continue-dependent-results=('MAYBE','YES')) "/>
    <xsl:variable name="inclusion-dependent-results" as="xs:string*"
      select="$conditional-results/@result[.=('ON','OFF')]"/>
    <xsl:variable name="should-include-element" as="xs:boolean" select="
      $should-continue and 
      (empty($conditional-results) or 
        empty($inclusion-dependent-results) or 
        $inclusion-dependent-results='ON' )
      "/>
      
    <xsl:sequence select="func:debug(
      ('base-uri = ', base-uri(.),
      '$association-links-unconditional = ', $association-links-unconditional,
      '$association-links = ', $association-links,
      '$current-settings = ', $current-settings,
      '$conditional-results = ', $conditional-results,
      '$should-continue, $should-include-element = ', $should-continue, $should-include-element),
       ('associations priority=900 for ', $my-id),$debug-detail)"/>
    <xsl:variable name="context" as="element()" select="."/>
    
    <xsl:if test="$should-continue">
      <xsl:variable name="without-instruction" as="node()*">
        <xsl:choose>
          <xsl:when test="$should-include-element">
            <xsl:next-match/> 
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates mode="#current" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:for-each select="$without-instruction">
        <xsl:variable name="instruction" as="element(tei:note)*">
          <xsl:if test="not($context/@prev)">
            <xsl:apply-templates mode="#current" select="
              for $result in $conditional-results/self::jx:result[@instruction]
              return func:follow-cached-uri($result/@instruction, $result, -1, $fragmentation-cache-type)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:copy>
          <xsl:apply-templates select="@*" mode="#current"/>
          
          <xsl:variable name="associations" 
            as="element(jx:conditional)*" 
            select="$conditional-results/jx:conditional"/>
          <xsl:if test="exists($associations)">
            <jx:associate>
              <xsl:sequence select="$associations/*"/>
            </jx:associate>
          </xsl:if>
          
          <xsl:choose>
            <xsl:when test="exists($instruction)">
              <!-- add a tei:ab to wrap to the content to which the instruction applies -->
              <xsl:sequence select="$instruction"/>
              <tei:ab>
                <xsl:sequence select="child::node()"/>
              </tei:ab>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="child::node()"/>  
            </xsl:otherwise>
          </xsl:choose>
        </xsl:copy>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <xd:doc>
    <xd:short>Evaluate a conditional feature given the current settings, return 'YES', 'NO', 'MAYBE', 'ON', or 'OFF'</xd:short>
  </xd:doc>
  <xsl:function name="func:evaluate-conditional" as="xs:string">
    <xsl:param name="conditional" as="element(tei:fs)"/>
    <xsl:param name="current-settings" as="document-node(element(jx:current-settings))?"/>
    <xsl:param name="evaluation-context" as="element()"/>
    
    <xsl:apply-templates select="$conditional" mode="evaluate-conditionals">
      <xsl:with-param name="current-settings" as="document-node()" select="$current-settings" tunnel="yes"/>
      <xsl:with-param name="evaluation-context" as="node()" select="root($evaluation-context)" tunnel="yes"/>
    </xsl:apply-templates>
  
  </xsl:function>

  <xd:doc>
    <xd:short>When run against the conditional being tested, returns 
    the result of the conditional evaluation</xd:short>
  </xd:doc>
  <xsl:template match="tei:f" mode="evaluate-conditionals" as="xs:string">
    <xsl:param name="current-settings" 
      as="document-node(element(jx:current-settings))?" tunnel="yes"/>
    <xsl:param name="evaluation-context" as="node()" tunnel="yes"/>
    
    <xsl:variable name="feature-type" as="xs:string" 
      select="(parent::tei:fs/@type, '')[1]"/>
    <xsl:variable name="feature-name" as="xs:string" select="@name"/>
    
    <xsl:variable name="setting" as="xs:string?"
        select="func:get-selection-value-or-default($current-settings, 
          $feature-type, $feature-name, $evaluation-context)"/>
    <xsl:variable name="association" as="xs:string" select="tei:symbol/@value"/>
    
    <xsl:sequence select="
      if ($setting = 'MAYBE')
      then 'MAYBE'
      else if ($setting = $association)
      then 
        if ($setting = ('YES','NO'))
        then 'YES'
        else 'ON'
      else 
        if ($setting = ('YES','NO'))
        then 'NO'
        else 'OFF'
        "/>
  </xsl:template>

  <xd:doc>
    <xd:short>Special operators</xd:short>
  </xd:doc>
  <xsl:template match="tei:fs[starts-with(@type,'jlptei:')]" mode="evaluate-conditionals" as="xs:string">
    <xsl:variable name="results" as="xs:string+">
      <xsl:apply-templates mode="#current" select="tei:f/tei:fs"/>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="@type='jlptei:and'">
        <xsl:sequence select="
        if ($results = 'MAYBE') then 'MAYBE'
        else if ($results[1] = 'YES' and $results[2] = 'YES') then 'YES'
        else if ($results[1] = 'ON' and $results[2] = 'ON') then 'ON'
        else 
          if ($results = ('YES','NO','MAYBE')) then 'NO'
          else 'OFF'
        "/>
      </xsl:when>
      <xsl:when test="@type='jlptei:or'">
        <xsl:sequence select="
        if ($results = 'MAYBE') then 'MAYBE'
        else if ($results = 'YES') then 'YES'
        else if ($results = 'ON') then 'ON'
        else 
          if ($results = ('YES','NO','MAYBE')) then 'NO'
          else 'OFF'
        "/>
      </xsl:when>
      <xsl:when test="@type='jlptei:xor'">
        <xsl:sequence select="
        if ($results = 'MAYBE') then 'MAYBE'
        else if ($results[1] = $results[2]) 
        then 
          if ($results = ('YES','NO')) then 'NO'
          else 'OFF'
        else 
          if ($results = ('YES','NO')) then 'YES'
          else 'ON'
        "/>
      </xsl:when>
      <xsl:when test="@type='jlptei:not'">
        <xsl:sequence select="
        if ($results = 'YES') then 'NO'
        else if ($results = 'NO') then 'YES'
        else if ($results = 'ON') then 'OFF'
        else if ($results = 'OFF') then 'ON'
        else 'MAYBE'
        "/>
      </xsl:when>
      <xsl:otherwise>
        <!-- error -->
        <xsl:sequence select="('',func:debug(., 'Unrecognized jlptei conditional operator', $debug-error))"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xd:doc>
    <xd:short>kill text in evaluate-conditionals mode</xd:short>
  </xd:doc>
  <xsl:template match="text()" mode="evaluate-conditionals"/>

  <xd:doc>
    <xd:short>Match @xml:id elements with high priority, 
    convert @xml:id to @jx:id</xd:short>
  </xd:doc>
  <xsl:template match="@xml:id" mode="#all">
    <xsl:attribute name="jx:id" select="."/>
  </xsl:template>
  
  <xd:doc>
    <xd:short>The default operation for an attribute is identity</xd:short>
  </xd:doc>
  <xsl:template match="@*" mode="#all">
    <xsl:copy/>
  </xsl:template>
  
</xsl:stylesheet>
