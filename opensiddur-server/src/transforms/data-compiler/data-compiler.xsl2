<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="2.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jx="http://jewishliturgy.org/ns/jlp-processor" 
  xmlns:func="http://jewishliturgy.org/ns/functions/xslt"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xd="http://www.pnp-software.com/XSLTdoc"
  exclude-result-prefixes="#all">
  <xsl:import href="../follow-uri.xsl2"/>
  <xsl:import href="../copy-context.xsl2"/>
  <xsl:include href="../../common/common.xsl2"/>
  <xsl:include href="conditionals.xsl2"/>
  <xsl:include href="ptr.xsl2"/>
  <xsl:include href="standoff.xsl2"/>
  
  <xd:doc type="stylesheet">
    <xd:short>Main stylesheet for data compiler stage.</xd:short>
    <xd:copyright>Copyright 2010-2011 Efraim Feinstein
    </xd:copyright>
    <xd:detail>
      <p>This program is free software: you can redistribute it
        and/or modify
        it under the terms of the GNU Lesser General Public License as
        published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.</p>

      <p>This program is distributed in the hope that it will be
        useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        GNU Lesser General Public License for more details.</p>

      <p>
        You should have received a copy of the GNU Lesser General Public
        License along with this program. If not, see
        <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/
        </a>
        .
      </p>
    </xd:detail>
    <xd:svnId>$Id: data-compiler.xsl2 687 2011-01-23 23:36:48Z efraim.feinstein $</xd:svnId>
  </xd:doc>
  
  <xsl:strip-space elements="*"/>
  
  <xd:doc>
    <xd:short>Start of processing, update links and apply, begin in data-compiler mode</xd:short>
  </xd:doc>
  <xsl:template match="tei:TEI" priority="1000">
    <xsl:apply-templates select="." mode="data-compiler-update-links"/>
  </xsl:template>

  <xd:doc>
    <xd:short>Elements that should be skipped</xd:short>
  </xd:doc>
  <xsl:template match="jx:joined-concurrent" mode="data-compiler">
    <xsl:apply-templates mode="#current"/>
  </xsl:template>

  <xd:doc>
    <xd:short>Resolve all unresolved pointers.</xd:short>
  </xd:doc>
  <xsl:template match="tei:ptr[@target][not(child::node())]" mode="data-compiler">
    <xsl:variable name="resolved-pointer" as="node()*">
      <xsl:apply-templates select="." mode="follow-uri">
        <xsl:with-param name="cache-type" as="xs:string" tunnel="yes" select="$fragmentation-cache-type"/>
      </xsl:apply-templates>
    </xsl:variable>
    
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates select="$resolved-pointer" mode="data-compiler-update-links">
        <xsl:with-param name="from-context" as="element()" select="." tunnel="yes"/>
      </xsl:apply-templates>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short>Update the links at high priority, go back to data-compiler mode</xd:short>
  </xd:doc>
  <xsl:template match="*" mode="data-compiler-update-links">
    <xsl:param name="from-context" as="element()?" tunnel="yes"/>

    <xsl:apply-templates select="." mode="data-compiler">
      <xsl:with-param name="current-settings" as="document-node(element(jx:current-settings))?" tunnel="yes">
        <xsl:call-template name="update-links">
          <xsl:with-param name="from-context" as="element()?" select="$from-context"/>
        </xsl:call-template>
      </xsl:with-param>
    </xsl:apply-templates>
  </xsl:template>

  <xd:doc>
    <xd:short>Default operation is identity. Mark an element with @jx:document-uri and/or @xml:base if it comes from a different context
    than $from-context, continue applying templates in data-compiler mode</xd:short>
    <xd:param name="from-context">Non-empty if this text is coming from a different context</xd:param>
  </xd:doc>
  <xsl:template match="text()|element()" mode="#default data-compiler">
    <xsl:param name="from-context" as="element()?" tunnel="yes"/>

    <xsl:copy>
      <xsl:choose>
        <xsl:when test="empty($from-context) and (. instance of element())">
          <xsl:sequence select="@*"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="copy-attributes-and-context-if-changed">
            <xsl:with-param name="current-lang" tunnel="yes" as="xs:string" select="func:language($from-context)"/>
            <xsl:with-param name="current-document-uri" tunnel="yes" as="xs:anyURI?" select="func:uri-base-resource(func:original-document-uri($from-context))"/>
            <xsl:with-param name="current-base-uri" tunnel="yes" as="xs:anyURI?" select="func:uri-base-resource(base-uri($from-context))"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates mode="#current">
        <!-- reset $from-context -->
        <xsl:with-param name="from-context" as="element()?" select="()" tunnel="yes"/>
      </xsl:apply-templates>
    </xsl:copy>
  </xsl:template>

  <xd:doc>
    <xd:short>Remove ignored elements</xd:short>
  </xd:doc>
  <xsl:template match="
    j:repository|
    j:conditionGrp|
    j:links|
    tei:teiHeader|
    tei:fsdDecl" mode="#default data-compiler"/>

  <xd:doc>
    <xd:short>List of document sources in current settings</xd:short>
  </xd:doc>
  <xsl:key name="document-sources" match="jx:document-source" use="@source"/>

  <xd:doc>
    <xd:short>Return the current settings as updated for a new context</xd:short>
  </xd:doc>
  <xsl:template name="update-links" as="document-node(element(jx:current-settings))?">
    <xsl:param name="from-context" required="yes" as="element()?"/>
    <xsl:param name="current-settings" as="document-node(element(jx:current-settings))?" tunnel="yes"/>

    <xsl:variable name="my-uri" as="xs:anyURI" select="func:original-document-uri(.)"/>
    <xsl:choose>
      <xsl:when test="
        exists($current-settings) and 
        exists(key('document-sources', string($my-uri), $current-settings)) and
        ($my-uri = func:original-document-uri($from-context))
        ">
        <!-- coming from the same context as we started, no change required
             or the new document is a different context, but it's already listed in the available links -->
        <xsl:sequence select="$current-settings"/>
      </xsl:when>
      <xsl:otherwise>
        <!-- coming from a different context, new links required.
          Links can come from: inside this file or from places referenced
          in this file as tei:ptr/@type='standoff' or tei:ptr/@type='settings'
         -->
        <xsl:document>
          <jx:current-settings>
            <xsl:sequence select="$current-settings/jx:current-settings/
              (* except (jx:document-sources, jx:available-links))"/>
            <jx:available-links>
              <xsl:sequence select="$current-settings/jx:current-settings/jx:available-links/*"/>
              <xsl:variable name="external-links" as="node()*">
                <xsl:apply-templates select="//tei:ptr[@type=('standoff','settings')]" mode="follow-uri">
                  <xsl:with-param name="cache-type" as="xs:string" select="$fragmentation-cache-type" tunnel="yes"/>
                </xsl:apply-templates>
              </xsl:variable>
              
              <xsl:apply-templates select="//tei:link|$external-links//tei:link" 
                mode="update-links"/>
              
            </jx:available-links>
            <jx:document-sources>
              <xsl:sequence select="$current-settings/jx:current-settings/jx:document-sources/*"/>
              <jx:document-source source="{$my-uri}"/>
            </jx:document-sources>
          </jx:current-settings>
        </xsl:document>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xd:doc>
    <xd:short>Write a copy of the tei:link with base uri and type explicit</xd:short>
  </xd:doc>
  <xsl:template match="tei:link" mode="update-links">
    <xsl:copy>
      <xsl:copy-of select="@* except (@xml:base, @type)"/>
      <xsl:attribute name="xml:base" select="(@xml:base, 
        func:uri-base-resource(base-uri(.)))[1]"/>
      <xsl:attribute name="type" select="(@type, ancestor::tei:linkGrp[1]/@type)[1]"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
