<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Unflatten transform</suiteName>
  <description>
      <p>Tests of unflatten transform</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2013 Efraim Feinstein
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jf">http://jewishliturgy.org/ns/jlptei/flat/1.0</namespace>
  <imports>
    import module namespace unflatten="http://jewishliturgy.org/transform/unflatten"
      at "xmldb:exist:///db/apps/opensiddur-server/transforms/unflatten.xqm";
    import module namespace format="http://jewishliturgy.org/modules/format"
      at "xmldb:exist:///db/apps/opensiddur-server/modules/format.xqm";
  </imports>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <TestSet>
      <testName>unflatten:unopened-tags()</testName>
      <test output="text">
         <task>no unopened tags</task>
         <code>
        let $tags := 
          &lt;jf:temp&gt;
            &lt;tei:div jf:start="div1" jf:id="div1"/&gt;
            &lt;tei:ab jf:continue="ab1" jf:id="ab1"/&gt;
            &lt;tei:label jf:id="lbl1"&gt;Label&lt;/tei:label&gt;
            &lt;tei:ab jf:suspend="ab1"/&gt;
            &lt;tei:div jf:end="div1"/&gt;
          &lt;/jf:temp&gt;
        return
          unflatten:unopened-tags(
            $tags/*
          )
      </code>
         <xpath desc="empty output">empty($output)</xpath>
      </test> 
      <test>
         <task>one ended unopened tag</task>
         <code>
        let $tags :=
          &lt;jf:temp&gt;
            &lt;tei:label jf:id="lbl1"&gt;Label&lt;/tei:label&gt;
            &lt;tei:div jf:end="div1"/&gt;
          &lt;/jf:temp&gt;
        return
          unflatten:unopened-tags(
            $tags/*
          )
      </code>
         <expected desc="ended element">
            <tei:div xmlns:tei="http://www.tei-c.org/ns/1.0"
                     xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                     jf:end="div1"/>
         </expected>      
      </test>
      <test>
         <task>one suspended unopened tag</task>
         <code>
        let $tags :=
          &lt;jf:temp&gt;
            &lt;tei:label jf:id="lbl1"&gt;Label&lt;/tei:label&gt;
            &lt;tei:div jf:suspend="div1"/&gt;
          &lt;/jf:temp&gt;
        return
          unflatten:unopened-tags(
            $tags/*
          )
      </code>
         <expected desc="suspended element">
            <tei:div xmlns:tei="http://www.tei-c.org/ns/1.0"
                     xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                     jf:suspend="div1"/>
         </expected>      
      </test>
  </TestSet>
  <TestSet>
      <testName>unflatten:unclosed-tags()</testName>
      <test output="text">
         <task>no unclosed tags</task>
         <code>
        let $tags := 
          &lt;jf:temp&gt;
            &lt;tei:div jf:start="div1" jf:id="div1"/&gt;
            &lt;tei:ab jf:continue="ab1" jf:id="ab1"/&gt;
            &lt;tei:label jf:id="lbl1"&gt;Label&lt;/tei:label&gt;
            &lt;tei:ab jf:suspend="ab1"/&gt;
            &lt;tei:div jf:end="div1"/&gt;
          &lt;/jf:temp&gt;
        return
          unflatten:unclosed-tags(
            $tags/*
          )
      </code>
         <xpath desc="empty output">empty($output)</xpath>
      </test> 
      <test>
         <task>one started unclosed tag</task>
         <code>
        let $tags :=
          &lt;jf:temp&gt;
            &lt;tei:div jf:start="div1" jf:id="div1"/&gt;
            &lt;tei:label jf:id="lbl1"&gt;Label&lt;/tei:label&gt;
          &lt;/jf:temp&gt;
        return
          unflatten:unclosed-tags(
            $tags/*
          )
      </code>
         <expected desc="started element">
            <tei:div xmlns:tei="http://www.tei-c.org/ns/1.0"
                     xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                     jf:start="div1"
                     jf:id="div1"/>
         </expected>      
      </test>
      <test>
         <task>one continued unclosed tag</task>
         <code>
        let $tags :=
          &lt;jf:temp&gt;
            &lt;tei:div jf:continue="div1" jf:id="div1"/&gt;
            &lt;tei:label jf:id="lbl1"&gt;Label&lt;/tei:label&gt;
          &lt;/jf:temp&gt;
        return
          unflatten:unclosed-tags(
            $tags/*
          )
      </code>
         <expected desc="continued element">
            <tei:div xmlns:tei="http://www.tei-c.org/ns/1.0"
                     xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                     jf:continue="div1"
                     jf:id="div1"/>
         </expected>      
      </test>
  </TestSet>
  <TestSet>
      <testName>unflatten:unflatten-document()</testName>
      <test>
         <task>unflatten a simple hierarchy</task>
         <code>
        unflatten:unflatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/unflatten1.xml"),
          map {}
        )
      </code>
         <expected desc="unflattened hierarchy" href="unflatten1-unflat.xml"/>
      </test>
      <test>
         <task>unflatten a hierarchy with 2 levels with siblings</task>
         <code>
        unflatten:unflatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/unflatten2.xml"),
          map {}
        )
      </code>
         <expected desc="unflattened hierarchy" href="unflatten2-unflat.xml"/>
      </test>
      <test>
         <task>simple suspend and continue</task>
         <code>
        unflatten:unflatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/unflatten3.xml"),
          map {}
        )
      </code>
         <expected desc="unflattened hierarchy with @jf:part indicating suspension/continuation"
                   href="unflatten3-unflat.xml"/>
      </test>
      <test>
         <task>multiple hierarchies with broken-up element</task>
         <code>
        unflatten:unflatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/unflatten4.xml"),
          map {}
        )
      </code>
         <expected desc="unflattened hierarchies with automated suspension/continuation"
                   href="unflatten4-unflat.xml"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Regression test: repetition of an an element</testName>
      <setup>
        <copy source="/db/apps/opensiddur-tests/tests/transforms/flatten"
               name="unflatten-order-bug.xml"
               destination="/db/data/tests"/>
      </setup>
      <tearDown>
        <code>
            format:clear-caches("/db/data/tests/unflatten-order-bug.xml")
        </code>
        <remove-document collection="/db/data/tests" name="unflatten-order-bug.xml"/>
      </tearDown>
      <test>
         <task>unflatten...</task>
         <code>
          let $d := doc("/db/data/tests/unflatten-order-bug.xml")
          format:unflatten($d, map {}, $d)
      </code>
         <xpath desc="tei:head is not a descendant of tei:ab">empty(.//tei:head[ancestor::tei:ab])</xpath>
         <xpath desc="tei:ab[id=ab2] is not a descendant of itself">empty(.//tei:ab[@jf:id="ab2"][ancestor::tei:ab[@jf:id="ab2"]])</xpath>
      </test>
  </TestSet>
  <TestSet>
      <testName>Unflatten a parallel document</testName>
      <setup>
         <copy source="/db/apps/opensiddur-tests/tests/transforms"
               destination="/db/data/tests"
               name="unflatten-parA.xml"/>
         <copy source="/db/apps/opensiddur-tests/tests/transforms"
               destination="/db/data/tests"
               name="unflatten-parB.xml"/>
         <copy source="/db/apps/opensiddur-tests/tests/transforms"
               destination="/db/data/tests"
               name="unflatten-par.xml"/>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/tests" name="unflatten-parA.xml"/>
         <remove-document collection="/db/data/tests" name="unflatten-parB.xml"/>
         <remove-document collection="/db/data/tests" name="unflatten-par.xml"/>
      </tearDown>
      <test>
        <task>Unflatten a parallel document</task>
        <code>
            let $d := doc("/db/data/tests/unflatten-par.xml")
            return format:unflatten($d, map {}, $d)
        </code>
         <xpath desc="p1 is entirely contained in a single parallel element">count(.//tei:TEI[contains(@jf:document, '/unflatten-parA')]//jf:unflattened//tei:p[@jf:id="p1"][count(descendant::tei:seg)=3]/ancestor::jf:parallel)=1</xpath>
         <xpath desc="p2 (break at beginning) is partially contained outside parallel and partially inside it">
        let $p := .//tei:TEI[contains(@jf:document, '/unflatten-parA')]//jf:unflattened//tei:p[@jf:part="p2"]
        return
            count($p)=2
            and not($p[1]/ancestor::jf:parallel)
            and $p[1]/descendant::tei:seg[@jf:id="A4"]
            and count($p[2]/ancestor::jf:parallel)=1
            and $p[2]/count(descendant::tei:seg)=2
            and $p[1]/@jf:part
            and $p[2]/@jf:part
    </xpath>
         <xpath desc="p3 (break at end) is partially contained outside parallel and partially inside it">
        let $p := .//tei:TEI[contains(@jf:document, '/unflatten-parA')]//jf:unflattened//tei:p[@jf:part="p3"]
        return
            count($p)=2
            and count($p[1]/ancestor::jf:parallel)=1
            and count($p[1]/descendant::tei:seg)=2
            and count($p[2]/ancestor::jf:parallel)=0
            and count($p[2]/descendant::tei:seg)=1
            and $p[1]/@jf:part
            and $p[2]/@jf:part
    </xpath>
         <xpath desc="p4 (break at beginning and end) is partially contained outside parallel and partially inside it">
        let $p := .//tei:TEI[contains(@jf:document, '/unflatten-parA')]//jf:unflattened//tei:p[@jf:part="p4"]
        return
            count($p)=3
            and $p[1]/descendant::tei:seg/@jf:id="A10"
            and count($p[2]/descendant::tei:seg)=2
            and count($p[2]/ancestor::jf:parallel)=1
            and $p[3]/descendant::tei:seg/@jf:id="A13"
            and (every $pp in $p satisfies $pp/@jf:part)
    </xpath>
         <xpath desc="p5 (broken up in the middle) is entirely contained within 2 parallel groups">
        let $p := .//tei:TEI[contains(@jf:document, '/unflatten-parA')]//jf:unflattened//tei:p[@jf:part="p5"]
        return
            count($p)=2
            and (every $pp in $p satisfies count($pp/ancestor::jf:parallel)=1 and count($pp/ancestor::jf:parallelGrp)=1)
            and not($p[1]/ancestor::jf:parallelGrp is $p[2]/ancestor::jf:parallelGrp)
            and count($p[1]/descendant::tei:seg)=2
            and count($p[2]/descendant::tei:seg)=2
            and (every $pp in $p satisfies $pp/@jf:part)
    </xpath>
      </test>
  </TestSet>
</TestSuite>