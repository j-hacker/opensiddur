<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Flatten transform</suiteName>
  <description>
      <p>Tests of flatten transform</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2013 Efraim Feinstein
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jf">http://jewishliturgy.org/ns/jlptei/flat/1.0</namespace>
  <imports>
    import module namespace flatten="http://jewishliturgy.org/transform/flatten"
      at "xmldb:exist:///db/apps/opensiddur-server/transforms/flatten.xqm";
    import module namespace format="http://jewishliturgy.org/modules/format"
      at "xmldb:exist:///db/apps/opensiddur-server/modules/format.xqm";
  </imports>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <TestSet>
      <testName>No concurrency</testName>
      <test>
         <task>acts as an identity transform</task>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/identity.xml"),
          map {}
        )
      </code>
         <expected desc="acts as an identity transform except streamText has a jf:id"
                   href="identity1.xml"/>
      </test>        
  </TestSet>
  <TestSet>
      <testName>Simple concurrency</testName>
      <test>
         <task>pointer to placeholder</task>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/pointer-to-placeholder.xml"),
          map {}
        )
      </code>
         <expected desc="pointer changed to placeholder" href="pointer-to-placeholder-flat.xml"/>
      </test>        
  </TestSet>
  <TestSet>
      <testName>pointer to single placeholder with inline no-children elements</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/inline1.xml"),
          map {}
        )
      </code>
         <expected desc="flattened" href="inline1-flat.xml"/>
         <xpath desc="assigned id for start/end are same">.//tei:ab[@jf:start]/@jf:start=.//tei:ab[@jf:end]/@jf:end</xpath>
      </test>
  </TestSet>
  <TestSet>
      <testName>Two labels in a row</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/inline2.xml"),
          map {}
        )
      </code>
         <expected desc="first label" xpath=".//tei:label[1]">
            <tei:label xmlns:tei="http://www.tei-c.org/ns/1.0"
                       xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                       jf:position="1"
                       jf:relative="-1"
                       jf:nchildren="-1"
                       jf:nlevels="3"
                       jf:nprecedents="1"
                       jf:layer-id="/db/apps/opensiddur-tests/tests/transforms/flatten/inline2.xml#div-layer">Label 1</tei:label>
         </expected>
         <expected desc="second label has an increased nprecedents" xpath=".//tei:label[2]">
            <tei:label xmlns:tei="http://www.tei-c.org/ns/1.0"
                       xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                       jf:position="1"
                       jf:relative="-1"
                       jf:nchildren="-1"
                       jf:nlevels="3"
                       jf:nprecedents="2"
                       jf:layer-id="/db/apps/opensiddur-tests/tests/transforms/flatten/inline2.xml#div-layer">Label 2</tei:label>
         </expected>    
      </test>
  </TestSet>
  <TestSet>
      <testName>Label following the pointer</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/inline3.xml"),
          map {}
        )
      </code>
         <expected desc="first label" xpath=".//tei:label[1]">
            <tei:label xmlns:tei="http://www.tei-c.org/ns/1.0"
                       xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                       jf:position="1"
                       jf:relative="-1"
                       jf:nchildren="-1"
                       jf:nlevels="3"
                       jf:nprecedents="1"
                       jf:layer-id="/db/apps/opensiddur-tests/tests/transforms/flatten/inline3.xml#div-layer">Label 1</tei:label>
         </expected>
         <expected desc="second label has positive relative position" xpath=".//tei:label[2]">
            <tei:label xmlns:tei="http://www.tei-c.org/ns/1.0"
                       xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
                       jf:position="1"
                       jf:relative="1"
                       jf:nchildren="1"
                       jf:nlevels="-3"
                       jf:nprecedents="3"
                       jf:layer-id="/db/apps/opensiddur-tests/tests/transforms/flatten/inline3.xml#div-layer">Label 2</tei:label>
         </expected>
      </test>
  </TestSet>
  <TestSet>
      <testName>Two pointers, labels following both and between</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/inline4.xml"),
          map {}
        )
      </code>
         <expected desc="flattened" href="inline4-flat.xml"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Simple suspend and continue with 2 levels</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/suspend1.xml"),
          map {}
        )
      </code>
         <expected desc="flattened" href="suspend1-flat.xml"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Suspend and continue with labels</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/suspend2.xml"),
          map {}
        )
      </code>
         <expected desc="flattened" href="suspend2-flat.xml"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Multi-level suspend and continue with unequal numbers of levels</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/suspend3.xml"),
          map {}
        )
      </code>
         <expected desc="flattened" href="suspend3-flat.xml"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Multi-level suspend and continue with end and start at the suspend position</testName>
      <test>
         <code>
        flatten:flatten-document(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/suspend4.xml"),
          map {}
        )
      </code>
         <expected desc="flattened" href="suspend4-flat.xml"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Flatten a parallel document</testName>
      <setup>
         <copy source="/db/apps/opensiddur-tests/tests/transforms"
               destination="/db/data/tests"
               name="flatten-parA.xml"/>
         <copy source="/db/apps/opensiddur-tests/tests/transforms"
               destination="/db/data/tests"
               name="flatten-parB.xml"/>
         <copy source="/db/apps/opensiddur-tests/tests/transforms"
               destination="/db/data/tests"
               name="flatten-par.xml"/>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/tests" name="flatten-parA.xml"/>
         <remove-document collection="/db/data/tests" name="flatten-parB.xml"/>
         <remove-document collection="/db/data/tests" name="flatten-par.xml"/>
      </tearDown>
      <test>
        <task>Flatten a parallel document with overlapping xml:id names</task>
        <code>
            let $d := doc("/db/data/tests/flatten-par.xml")
            return format:flatten($d, map {}, $d)
        </code>
        <xpath desc="parA reproduces its own streamText">.//tei:TEI[contains(@jf:document, '/flatten-parA')]//j:streamText/tei:seg[@jf:id="A1"]="A-1"</xpath>
        <xpath desc="parA has 1 flattened parallel layer">.//tei:TEI[contains(@jf:document, '/flatten-parA')]//j:concurrent[count(jf:layer)=1]/jf:layer[@type="parallel"]</xpath>
        <xpath desc="parA layer has flattened parallelGrps">.//tei:TEI[contains(@jf:document, '/flatten-parA')]//j:concurrent/jf:layer[@type="parallel"][count(jf:parallelGrp[@jf:start])=3][count(jf:parallel[@jf:start])=3][count(jf:placeholder[@jf:stream="/data/tests/flatten-parA#stream"])=6]</xpath>
        <xpath desc="parA layer placeholders point to their segs">every $ph in .//tei:TEI[contains(@jf:document, '/flatten-parA')]//j:concurrent/jf:layer[@type="parallel"]/jf:placeholder satisfies starts-with($ph/@jf:id, "A")</xpath>
        <xpath desc="parB reproduces its own streamText">.//tei:TEI[contains(@jf:document, '/flatten-parB')]//j:streamText/tei:seg[@jf:id="A1"]="B-1"</xpath>
        <xpath desc="parB has 1 flattened parallel layer and 2 flattened layers">.//tei:TEI[contains(@jf:document, '/flatten-parB')]//j:concurrent[count(jf:layer)=2]/jf:layer[@type="parallel"]</xpath>
        <xpath desc="one parB layer has flattened parallelGrps">.//tei:TEI[contains(@jf:document, '/flatten-parB')]//j:concurrent/jf:layer[@type="parallel"][count(jf:parallelGrp[@jf:start])=3][count(jf:parallel[@jf:start])=3][count(jf:placeholder[@jf:stream="/data/tests/flatten-parB#stream"])=7]</xpath>
        <xpath desc="one parB layer has flattened paragraphs">.//tei:TEI[contains(@jf:document, '/flatten-parB')]//j:concurrent/jf:layer[@type="p"][count(tei:p[@jf:start])=1][count(jf:placeholder[@jf:stream="/data/tests/flatten-parB#stream"])=9]</xpath>
        <xpath desc="parB layer placeholders point to their segs">every $ph in .//tei:TEI[contains(@jf:document, '/flatten-parB')]//j:concurrent/jf:layer[@type="parallel"]/jf:placeholder satisfies starts-with($ph/@jf:id, "A")</xpath>
        <xpath desc="parallel elements are prioritized">every $pe in .//jf:parallelGrp|.//jf:parallel satisfies $pe/@jf:nchildren=(-19,19)</xpath>
      </test>
      <test> 
        <task>Merge a document with parallels</task>
        <code>
            let $d := doc("/db/data/tests/flatten-par.xml")
            return format:merge($d, map {}, $d)
        </code>
        <xpath desc="parA has a merged element">exists(.//tei:TEI[contains(@jf:document, '/flatten-parA')]//jf:merged)</xpath>
        <xpath desc="parA merged element contains all the elements from the parA streamText">count(.//tei:TEI[contains(@jf:document, '/flatten-parA')]//jf:merged/jf:placeholder[contains(@jf:stream, 'parA')][starts-with(@jf:id,'A')])=9</xpath>
        <xpath desc="parA has a concurrent element that makes reference to its layers">exists(.//tei:TEI[contains(@jf:document, '/flatten-parA')]//jf:concurrent[count(jf:layer)=1]/jf:layer[count(node())=0])</xpath>
        <xpath desc="parB has a merged element">exists(.//tei:TEI[contains(@jf:document, '/flatten-parB')]//jf:merged)</xpath>
        <xpath desc="parB merged element contains all the elements from the parB streamText">count(.//tei:TEI[contains(@jf:document, '/flatten-parB')]//jf:merged/jf:placeholder[contains(@jf:stream,'parB')][starts-with(@jf:id,'A')])=9</xpath>
        <xpath desc="parB has a concurrent element that makes reference to its layers">every $layer in .//tei:TEI[contains(@jf:document, '/flatten-parB')]//jf:concurrent[count(jf:layer)=2]/jf:layer satisfies count($layer/node())=0</xpath>
      </test>
      <test> 
        <task>Resolve a document with parallels</task>
        <code>
            let $d := doc("/db/data/tests/flatten-par.xml")
            return format:resolve($d, map {}, $d)
        </code>
        <xpath desc="streamText has been removed">empty(.//j:streamText)</xpath>
        <xpath desc="parA merged element contains all the seg elements from the parA streamText">count(.//tei:TEI[contains(@jf:document, '/flatten-parA')]//jf:merged/tei:seg[contains(@jf:stream, 'parA')][starts-with(.,'A-')])=9</xpath>
        <xpath desc="parB merged element contains all the seg elements from the parB streamText">count(.//tei:TEI[contains(@jf:document, '/flatten-parB')]//jf:merged/tei:seg[contains(@jf:stream,'parB')][starts-with(.,'B-')])=9</xpath>
      </test>
  </TestSet>
  <TestSet>
      <testName>flatten:resolve-stream()</testName>
      <test>
         <code>
        flatten:resolve-stream(
          doc("/db/apps/opensiddur-tests/tests/transforms/flatten/resolve1.xml"),
          map {}
        )
      </code>
         <expected desc="placeholders are replaced by stream elements"
                   href="resolve1-resolved.xml"/>
      </test>
  </TestSet>
</TestSuite>