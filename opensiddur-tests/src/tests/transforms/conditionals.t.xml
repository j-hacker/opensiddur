<?xml version="1.0" encoding="utf-8"?>
<TestSuite
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:jf="http://jewishliturgy.org/ns/jlptei/flat/1.0"
  >
  <suiteName>Conditional evaluations transform</suiteName>
  <description>
    <p>Tests of conditional evaluation</p>
    <author>Efraim Feinstein</author>
    <copyright>Copyright 2014 Efraim Feinstein
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jf">http://jewishliturgy.org/ns/jlptei/flat/1.0</namespace>
  <imports>
    import module namespace cond="http://jewishliturgy.org/transform/conditionals"
      at "xmldb:exist:///db/apps/opensiddur-server/transforms/conditionals.xqm";
  </imports>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <functions><![CDATA[
    declare function local:wrap-result(
        $str as xs:string*
        ) as element() {
            element results {
              for $s in $str
              return
                  element result { $s }
            }
    };
  ]]></functions>
    <TestSet>
        <testName>tei:fs and tei:f</testName>
        <test>
            <task>condition checking 1 true value</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                      cond:evaluate(
                          <tei:fs type="FS">
                              <tei:f name="ONE"><j:yes/></tei:f>
                          </tei:fs>, 
                          $settings
                      ) 
                    )
            ]]></code>
            <expected desc="one yes result"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>condition checking 1 false value</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result(
                      cond:evaluate(
                          <tei:fs type="FS">
                              <tei:f name="ONE"><j:no/></tei:f>
                          </tei:fs>, 
                          $settings
                      ) 
                    )
            ]]></code>
            <expected desc="one no result"><results><result>NO</result></results></expected>
        </test>
        <test>
            <task>condition checking 1 maybe value</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>MAYBE</tei:string>
                    }
                }
                return
                    local:wrap-result(
                      cond:evaluate(
                          <tei:fs type="FS">
                              <tei:f name="ONE"><j:yes/></tei:f>
                          </tei:fs>, 
                          $settings
                      ) 
                    )
            ]]></code>
            <expected desc="one maybe result"><results><result>MAYBE</result></results></expected>
        </test>
        <test>
            <task>condition checking 1 true and 1 false value</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result(
                      cond:evaluate(
                          <tei:fs type="FS">
                              <tei:f name="ONE"><j:yes/></tei:f>
                              <tei:f name="TWO"><j:yes/></tei:f>
                          </tei:fs>, 
                          $settings
                      ) 
                    )
            ]]></code>
            <expected desc="two results"><results><result>YES</result><result>NO</result></results></expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:all</testName>
        <test>
            <task>all are YES</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:all>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:all>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="yes result"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>one NO</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:all>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:all>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="no result"><results><result>NO</result></results></expected>
        </test>
        <test>
            <task>one MAYBE</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>MAYBE</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:all>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:all>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="maybe result"><results><result>MAYBE</result></results></expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:any</testName>
        <test>
            <task>all are YES</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:any>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:any>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="yes result"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>one YES</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>NO</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:any>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:any>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="yes result"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>one MAYBE</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>MAYBE</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:any>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:any>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="maybe result"><results><result>MAYBE</result></results></expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:oneOf</testName>
        <test>
            <task>all are YES</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:oneOf>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:oneOf>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="no result"><results><result>NO</result></results></expected>
        </test>
        <test>
            <task>all are NO</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>NO</tei:string>,
                        "FS->TWO" := <tei:string>NO</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:oneOf>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:oneOf>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="no result"><results><result>NO</result></results></expected>
        </test>
        <test>
            <task>one YES</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>,
                        "FS->TWO" := <tei:string>NO</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:oneOf>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:oneOf>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="yes result"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>one MAYBE</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>MAYBE</tei:string>,
                        "FS->TWO" := <tei:string>NO</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:oneOf>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:oneOf>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="maybe result"><results><result>MAYBE</result></results></expected>
        </test>
        <test>
            <task>one YES, one MAYBE</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>MAYBE</tei:string>,
                        "FS->TWO" := <tei:string>YES</tei:string>,
                        "FS->THREE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:oneOf>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                    <tei:f name="TWO"><j:yes/></tei:f>
                                    <tei:f name="THREE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:oneOf>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="no result"><results><result>NO</result></results></expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>j:not</testName>
        <test>
            <task>not YES</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:not>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:not>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="no result"><results><result>NO</result></results></expected>
        </test>
        <test>
            <task>not NO</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:not>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:not>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="yes result"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>not MAYBE</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "FS->ONE" := <tei:string>MAYBE</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <j:not>
                                <tei:fs type="FS">
                                    <tei:f name="ONE"><j:yes/></tei:f>
                                </tei:fs>
                            </j:not>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="maybe result"><results><result>MAYBE</result></results></expected>
        </test>
    </TestSet>
    <TestSet>
        <testName>Default values</testName>
        <setup>
            <copy source="/db/apps/opensiddur-tests/tests/transforms" 
                  name="conditional1.xml" 
                  destination="/db/data/conditionals" /> 
        </setup>
        <tearDown>
            <remove-document collection="/db/data/conditionals" name="conditional1.xml" />
        </tearDown>
        <test>
            <task>Literal default value</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <tei:fs type="test:FS">
                                <tei:f name="DEFAULT_YES"><tei:default/></tei:f>
                            </tei:fs>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="default value yes"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>Conditional default value, condition evaluates true</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "test:FS->CONTROL" := <tei:string>NO</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <tei:fs type="test:FS">
                                <tei:f name="DEFAULT_IF"><j:yes/></tei:f>
                            </tei:fs>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="default value yes"><results><result>YES</result></results></expected>
        </test>
        <test>
            <task>Conditional default value, condition evaluates false</task>
            <code><![CDATA[
                let $settings := map {
                    "combine:settings" := map {
                        "test:FS->CONTROL" := <tei:string>YES</tei:string>
                    }
                }
                return
                    local:wrap-result( 
                        cond:evaluate(
                            <tei:fs type="test:FS">
                                <tei:f name="DEFAULT_IF"><j:yes/></tei:f>
                            </tei:fs>,
                            $settings
                        )
                    )
            ]]></code>
            <expected desc="default value no"><results><result>NO</result></results></expected>
        </test>
    </TestSet>
</TestSuite>
