<?xml version="1.0" encoding="UTF-8"?>
<TestSuite
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:r="http://jewishliturgy.org/ns/results/1.0">
  <suiteName>Conditional data API</suiteName>
  <description>
      <p>Test conditional data API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2013,2016 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- put test conditionals files into /db/data/conditionals
    conditionals do not have language information
     -->
    <create-collection parent="/db/data/conditionals" name="1900"/>
      <create-collection parent="/db/data/conditionals/1900" name="01"/>
      <!-- support files required for validity -->
    <store collection="/db/data/user" name="testuser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Test User</tei:name>
         </j:contributor>
      </store>
      <!-- existing resource with read/write access for testuser -->
    <copy source="/db/apps/opensiddur-tests/tests/api/data/conditionals"
            name="Existing.xml"
            destination="/db/data/conditionals/1900/01"/>
    
      <copy source="/db/apps/opensiddur-tests/tests/api/data/conditionals"
            name="Existing.xml"
            destination="/db/data/conditionals/1900/01"
            destination-name="NoAccess.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/conditionals"
            name="NoWriteAccess.xml"
            destination="/db/data/conditionals/1900/01"/>
      <!-- existing, valid resource with no read access -->
    <code>
      system:as-user("admin", $magic:password,
        let $collections := (
          "/db/data/conditionals/1900", 
          "/db/data/conditionals/1900/01"
          ) 
        let $document-uris := (
          "/db/data/conditionals/1900/01/Existing.xml"
          )
        let $no-access-uri := xs:anyURI("/db/data/conditionals/1900/01/NoAccess.xml")
        let $no-write-access-uri := xs:anyURI("/db/data/conditionals/1900/01/NoWriteAccess.xml")
        return (
          for $collection in $collections
          let $c-uri := xs:anyURI($collection)
          return (
            sm:chown($c-uri, "admin"),
            sm:chgrp($c-uri, "everyone"),
            sm:chmod($c-uri, "rwxrwxr-x")
          ),
          for $uri in $document-uris
          let $c-uri := xs:anyURI($uri)
          return (
            sm:chown($c-uri, "testuser"),
            sm:chgrp($c-uri, "everyone"),
            sm:chmod($c-uri, "rw-rw-r--")
          ),
          sm:chown($no-access-uri, "testuser2"),
          sm:chgrp($no-access-uri, "everyone"),
          sm:chmod($no-access-uri, "rw-------"),
          sm:chown($no-write-access-uri, "testuser2"),
          sm:chgrp($no-write-access-uri, "everyone"),
          sm:chmod($no-write-access-uri, "rw-r--r--")
      ))
    </code>
  </setup>
  <tearDown>
      <remove-collection collection="/db/data/conditionals/1900"/>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="a">http://jewishliturgy.org/ns/access/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="r">http://jewishliturgy.org/ns/results/1.0</namespace>
  <imports>
    import module namespace cnd="http://jewishliturgy.org/api/data/conditionals"
      at "xmldb:exist:///db/apps/opensiddur-server/api/data/conditionals.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
  </imports>
  <TestSet>
      <testName>cnd:get()</testName>
      <test>
         <task>Get an existing resource</task>
         <code>
      cnd:get("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      cnd:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      cnd:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>cnd:list()</testName>
      <test>
         <task>List all resources</task>
         <code>
        cnd:list("", 1, 100)
      </code>
         <xpath desc="returns at least 1 result">count(.//html:li[@class="result"])&gt;=1</xpath>
         <xpath desc="results do not include a pointer to nonexistent access API">
        exists(.//html:li[@class="result"]) and (
          every $li in .//html:li[@class="result"] 
          satisfies empty($li/html:a[@class="alt"][@property="access"])
        )
      </xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>List some resources</task>
         <code>
        cnd:list("", 1, 2)
      </code>
         <xpath desc="returns 2 results">count(.//html:li[@class="result"])=2</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>Respond to a query</task>
         <code>
        cnd:list("Query", 1, 100)
      </code>
         <xpath desc="returns 1 result (Existing)">count(.//html:ol[@class="results"]/html:li)=1</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>cnd:delete()</testName>
      <test>
         <task>Remove an existing resource</task>
         <code>
      cnd:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>Remove a nonexisting resource</task>
         <code>
      cnd:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Remove a resource without write access</task>
         <code>
      cnd:delete("NoWriteAccess")
      </code>
         <class href="../common.t.incl.xml#Forbidden"/>
      </test>
      <test ignore="yes">
         <task>Remove a resource that has external references</task>
         <code>
      cnd:delete("ExternalReference")
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>cnd:post()</testName>
      <tearDown>
         <code>
      for $document in 
        collection("/db/data/conditionals")//tei:titleStmt/tei:title[@type="main"][.="Valid"]/root(.)
      return xmldb:remove(
        util:collection-name($document),
        util:document-name($document)
        )
      </code>
      </tearDown>
      <test>
         <task>Post a valid resource</task>
         <code>
      cnd:post(doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Created"/>
         <expected desc="a change record has been added"
                   xpath="collection('/db/data/conditionals')[util:document-name(.)=tokenize($output//http:header[@name='Location']/@value,'/')[count(.)] || '.xml']//tei:revisionDesc/tei:change[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="created" who="/user/testuser"
                        when="..."/>
         </expected>
      </test>
      <test>
         <task>Post an invalid resource</task>
         <code>
      cnd:post(doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Invalid.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>cnd:put()</testName>
      <test>
         <task>Put a valid resource to an existing resource</task>
         <code>
      cnd:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Existing-After-Put.xml"))
      </code>
         <class href="../common.t.incl.xml#NoData"/>
         <expected desc="a change record has been added"
                   xpath="(collection('/db/data/conditionals')[descendant::tei:title[@type='main'][.='Existing']]//tei:revisionDesc/tei:change)[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="edited" who="/user/testuser"
                        when="..."/>
         </expected>
      </test>
      <test>
         <task>Put a valid resource to a nonexisting resource</task>
         <code>
      cnd:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Put an invalid resource</task>
         <code>
      cnd:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Invalid.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Unauthenticated</testName>
      <asUser/>
      <password/>
      <test>
         <task>cnd:get(): Get an existing resource</task>
         <code>
      cnd:get("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
      </test>
      <test>
         <task>cnd:get(): Get an existing resource with no read access</task>
         <code>
      cnd:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>cnd:get(): Get a nonexisting resource</task>
         <code>
      cnd:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>cnd:list(): Get a list of all resources</task>
         <code>
      cnd:list("", 1, 100)
      </code>
         <xpath desc="returns some results">count(.//html:ul[@class="results"]/html:li)&gt;=1</xpath>
         <xpath desc="does not list resource with no read access">empty(.//html:li[@class="result"]/html:a[@class="document"]/@href[contains(., "NoAccess")])</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>cnd:delete(): Remove an existing resource</task>
         <code>
      cnd:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>cnd:delete(): Remove a nonexisting resource</task>
         <code>
      cnd:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>cnd:post(): Post a resource</task>
         <code>
      cnd:post(doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>cnd:put(): Put an existing resource</task>
         <code>
      cnd:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Existing.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>cnd:put(): Put a nonexisting resource</task>
         <code>
      cnd:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/conditionals/Existing.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
    <testName>cnd:list() for searching conditional declarations</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/conditionals"
            name="type1.xml"
            destination="/db/data/conditionals/1900/01"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/conditionals"
            name="type2.xml"
            destination="/db/data/conditionals/1900/01"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/conditionals"
            name="xtype1x.xml"
            destination="/db/data/conditionals/1900/01"/>
    </setup>
    <test>
      <task>Search for feature type: exists</task>
      <code>
      cnd:list("type1", 1, 100, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="two records are returned">
        <r:conditional-results start="1" end="2" n-results="2">
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="type">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
              <tei:fDecl name="name2">
                <tei:fDescr>Second</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/xtype1x" match="type">
            <tei:fsDecl type="xtype1x">
               <tei:fsDescr>first type</tei:fsDescr>
               <tei:fDecl name="xname1x">
                  <tei:fDescr>First X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
               </tei:fDecl>
               <tei:fDecl name="xname2x">
                  <tei:fDescr>Second X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
        </r:conditional-results>
      </expected>
    </test>
    <test>
      <task>Search for something that does not exist</task>
      <code>
      cnd:list("doesnotexist", 1, 100, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="an empty list is returned">
        <r:conditional-results start="1" end="0" n-results="0"/>
      </expected>
    </test>
    <test>
      <task>List by match name: name exists</task>
      <code>
      cnd:list("name1", 1, 100, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="two records are returned">
        <r:conditional-results start="1" end="3" n-results="3" >
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="feature">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type2" match="feature">
            <tei:fsDecl type="type2">
              <tei:fsDescr>second type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First of second</tei:fDescr>
                <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/xtype1x" match="feature">
            <tei:fsDecl type="xtype1x">
               <tei:fsDescr>first type</tei:fsDescr>
               <tei:fDecl name="xname1x">
                  <tei:fDescr>First X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
               </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
        </r:conditional-results>
      </expected>
    </test>
    <test>
      <task>List by match to feature name: name exists, limit to 1 result</task>
      <code>
      cnd:list("name1", 1, 1, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="one record is returned">
        <r:conditional-results start="1" end="1" n-results="3">
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="feature">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
        </r:conditional-results>
      </expected>
    </test>
    <test>
      <task>List by inexact match to feature type: type exists</task>
      <code>
      cnd:list("type", 1, 100, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="two records are returned">
        <r:conditional-results start="1" end="3" n-results="3">
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="type">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
              <tei:fDecl name="name2">
                <tei:fDescr>Second</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type2" match="type">
            <tei:fsDecl type="type2">
               <tei:fsDescr>second type</tei:fsDescr>
               <tei:fDecl name="name1">
                  <tei:fDescr>First of second</tei:fDescr>
                  <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
               </tei:fDecl>
               <tei:fDecl name="name2">
                  <tei:fDescr>Second of second</tei:fDescr>
                  <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/xtype1x" match="type">
            <tei:fsDecl type="xtype1x">
               <tei:fsDescr>first type</tei:fsDescr>
               <tei:fDecl name="xname1x">
                  <tei:fDescr>First X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
               </tei:fDecl>
               <tei:fDecl name="xname2x">
                  <tei:fDescr>Second X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
        </r:conditional-results>
      </expected>
    </test>
    <test>
      <task>List by inexact match to feature name: name exists</task>
      <code>
      cnd:list("name1", 1, 100, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="three records are returned">
        <r:conditional-results start="1" end="3" n-results="3">
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="feature">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type2" match="feature">
            <tei:fsDecl type="type2">
              <tei:fsDescr>second type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First of second</tei:fDescr>
                <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/xtype1x" match="feature">
            <tei:fsDecl type="xtype1x">
               <tei:fsDescr>first type</tei:fsDescr>
               <tei:fDecl name="xname1x">
                  <tei:fDescr>First X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
               </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
        </r:conditional-results>
      </expected>
    </test>
    <test>
      <task>List by exact match to feature type and name: both exist</task>
      <code>
      cnd:list("type1 name1", 1, 100, "true")
      </code>
      <expected xpath="self::r:conditional-results" desc="records that match any of the terms are returned">
        <r:conditional-results start="1" end="5" n-results="5">
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="type">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
              <tei:fDecl name="name2">
                <tei:fDescr>Second</tei:fDescr>
                <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
         </r:conditional-result> 
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type1" match="feature">
            <tei:fsDecl type="type1">
              <tei:fsDescr>first type</tei:fsDescr>
              <tei:fDecl name="name1">
                <tei:fDescr>First</tei:fDescr>
                <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/type2" match="feature">
            <tei:fsDecl type="type2">
               <tei:fsDescr>second type</tei:fsDescr>
               <tei:fDecl name="name1">
                  <tei:fDescr>First of second</tei:fDescr>
                  <j:vSwitch xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0" type="yes-no-maybe"/>
               </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/xtype1x" match="type">
            <tei:fsDecl type="xtype1x">
               <tei:fsDescr>first type</tei:fsDescr>
               <tei:fDecl name="xname1x">
                  <tei:fDescr>First X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
               </tei:fDecl>
               <tei:fDecl name="xname2x">
                  <tei:fDescr>Second X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
              </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
          <r:conditional-result resource="/exist/restxq/api/data/conditionals/xtype1x" match="feature">
            <tei:fsDecl type="xtype1x">
               <tei:fsDescr>first type</tei:fsDescr>
               <tei:fDecl name="xname1x">
                  <tei:fDescr>First X</tei:fDescr>
                  <j:vSwitch type="yes-no-maybe"/>
               </tei:fDecl>
            </tei:fsDecl>
          </r:conditional-result>
        </r:conditional-results>
      </expected>
    </test>
  </TestSet>
</TestSuite>
