<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Bibliographic data API</suiteName>
  <description>
      <p>Test the bibliographic data API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2013 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- support files required for validity -->
    <store collection="/db/data/user" name="testuser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Test User</tei:name>
         </j:contributor>
      </store>
      <!-- existing resource with read/write access for testuser -->
    <copy source="/db/apps/opensiddur-tests/tests/api/data/sources" name="Existing.xml"
            destination="/db/data/sources"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/sources" name="Existing.xml"
            destination="/db/data/sources"
            destination-name="NoAccess.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/sources" name="Existing.xml"
            destination="/db/data/sources"
            destination-name="NoWriteAccess.xml"/>
      <code>
      system:as-user("admin", $magic:password,
        let $existing-uri := xs:anyURI("/db/data/sources/Existing.xml")
        let $no-access-uri := xs:anyURI("/db/data/sources/NoAccess.xml")
        let $no-write-access-uri := xs:anyURI("/db/data/sources/NoWriteAccess.xml")
        return (
          sm:chown($existing-uri, "testuser"),
          sm:chgrp($existing-uri, "everyone"),
          sm:chmod($existing-uri, "rw-rw-r--"),
          sm:chown($no-access-uri, "testuser2"),
          sm:chgrp($no-access-uri, "everyone"),
          sm:chmod($no-access-uri, "rw-------"),
          sm:chown($no-write-access-uri, "testuser2"),
          sm:chgrp($no-write-access-uri, "everyone"),
          sm:chmod($no-write-access-uri, "rw-r--r--")
      ))
    </code>
  </setup>
  <tearDown>
      <remove-document collection="/db/data/sources" name="Existing.xml"/>
      <remove-document collection="/db/data/sources" name="NoWriteAccess.xml"/>
      <!-- NoAccess has to be removed by admin -->
    <code>
      system:as-user("admin", $magic:password, 
          xmldb:remove("/db/data/sources", "NoAccess.xml")
      )
    </code>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <imports>
    import module namespace src="http://jewishliturgy.org/api/data/sources"
      at "xmldb:exist:///db/apps/opensiddur-server/api/data/sources.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
  </imports>
  <TestSet>
      <testName>src:get()</testName>
      <test>
         <task>Get an existing resource</task>
         <code>
      src:get("Existing")
      </code> 
         <xpath desc="Returns a bibliographic resource">exists(./tei:biblStruct)</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      src:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      src:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <!-- TODO: edit from here -->
  <TestSet>
      <testName>src:list()</testName>
      <test>
         <task>List all resources</task>
         <code>
        src:list("", 1, 100)
      </code>
         <xpath desc="returns at least 1 result">count(.//html:li[@class="result"])&gt;=1</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>List some resources</task>
         <code>
        src:list("", 1, 2)
      </code>
         <xpath desc="returns 2 results">count(.//html:li[@class="result"])=2</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>Respond to a query</task>
         <code>
        src:list("Existing", 1, 100)
      </code>
         <xpath desc="returns 2 results (Existing and NoWriteAccess)">count(.//html:ol[@class="results"]/html:li)=2</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>src:delete()</testName>
      <test>
         <task>Remove an existing resource</task>
         <code>
      src:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>Remove a nonexisting resource</task>
         <code>
      src:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Remove a resource without write access</task>
         <code>
      src:delete("NoWriteAccess")
      </code>
         <class href="../common.t.incl.xml#Forbidden"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>src:post()</testName>
      <tearDown>
         <code>
      let $document := 
        collection("/db/data/sources")//tei:title[.="Valid"]/root(.)
      where exists($document)
      return xmldb:remove(
        util:collection-name($document),
        util:document-name($document)
        )
      </code>
      </tearDown>
      <test>
         <task>Post a valid resource</task>
         <code>
      src:post(doc("/db/apps/opensiddur-tests/tests/api/data/sources/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Created"/>
      </test>
      <test>
         <task>Post an invalid resource</task>
         <code>
      src:post(document { &lt;tei:biblStruct&gt;&lt;tei:title&gt;Invalid&lt;/tei:title&gt;&lt;/tei:biblStruct&gt;} )
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>src:put()</testName>
      <test>
         <task>Put a valid resource to an existing resource</task>
         <code>
      src:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/sources/Existing-After-Put.xml"))
      </code>
         <class href="../common.t.incl.xml#NoData"/>
         <xpath desc="The new document has been saved">collection('/data/sources')[descendant::tei:title[.='Existing']]//tei:date/@when=1920</xpath>
      </test>
      <test>
         <task>Put a valid resource to a nonexisting resource</task>
         <code>
      src:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/sources/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Put an invalid resource</task>
         <code>
      src:put("Existing", document { &lt;tei:biblStruct&gt;&lt;tei:title&gt;Invalid&lt;/tei:title&gt;&lt;/tei:biblStruct&gt;})
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>Unauthenticated</testName>
      <asUser/>
      <password/>
      <test>
         <task>src:get(): Get an existing resource</task>
         <code>
      src:get("Existing")
      </code> 
         <xpath desc="Returns a bibliography resource">exists(./tei:biblStruct)</xpath>
      </test>
      <test>
         <task>src:get(): Get an existing resource with no read access</task>
         <code>
      src:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>src:get(): Get a nonexisting resource</task>
         <code>
      src:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>src:list(): Get a list of all resources</task>
         <code>
      src:list("", 1, 100)
      </code>
         <xpath desc="returns some results">count(.//html:ul[@class="results"]/html:li)&gt;=1</xpath>
         <xpath desc="does not list resource with no read access">empty(.//html:li[@class="result"]/html:a[@class="document"]/@href[contains(., "NoAccess")])</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>src:delete(): Remove an existing resource</task>
         <code>
      src:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>src:delete(): Remove a nonexisting resource</task>
         <code>
      src:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>src:post(): Post a resource</task>
         <code>
      src:post(doc("/db/apps/opensiddur-tests/tests/api/data/sources/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>src:put(): Put an existing resource</task>
         <code>
      src:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/sources/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>src:put(): Put a nonexisting resource</task>
         <code>
      src:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/sources/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
</TestSuite>
