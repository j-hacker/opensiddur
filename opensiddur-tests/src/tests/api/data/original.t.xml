<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Original text data API</suiteName>
  <description>
      <p>Test original data API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2014 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- put all tests into en/1900/01 -->
    <create-collection parent="/db/data/original/en" name="1900"/>
      <create-collection parent="/db/data/original/en/1900" name="01"/>
      <!-- support files required for validity -->
    <store collection="/db/data/user" name="testuser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Test User</tei:name>
         </j:contributor>
      </store>
      <!-- existing resource with read/write access for testuser -->
    <copy source="/db/apps/opensiddur-tests/tests/api/data/original" name="Existing.xml"
            destination="/db/data/original/en/1900/01"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/original" name="Existing.xml"
            destination="/db/data/original/en/1900/01"
            destination-name="NoAccess.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/original" name="Existing.xml"
            destination="/db/data/original/en/1900/01"
            destination-name="NoWriteAccess.xml"/>
      <!-- query result -->
    <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
            name="QueryResult.xml"
            destination="/db/data/original/en/1900/01"/>
      <!-- existing, valid resource with no read access -->
    <code>
      system:as-user("admin", $magic:password,
        let $collections := ("/db/data/original/en/1900", "/db/data/original/en/1900/01") 
        let $existing-uri := xs:anyURI("/db/data/original/en/1900/01/Existing.xml")
        let $no-access-uri := xs:anyURI("/db/data/original/en/1900/01/NoAccess.xml")
        let $no-write-access-uri := xs:anyURI("/db/data/original/en/1900/01/NoWriteAccess.xml")
        return (
          for $collection in $collections
          let $c-uri := xs:anyURI($collection)
          return (
            sm:chown($c-uri, "admin"),
            sm:chgrp($c-uri, "everyone"),
            sm:chmod($c-uri, "rwxrwxr-x")
          ),
          sm:chown($existing-uri, "testuser"),
          sm:chgrp($existing-uri, "everyone"),
          sm:chmod($existing-uri, "rw-rw-r--"),
          sm:chown($no-access-uri, "testuser2"),
          sm:chgrp($no-access-uri, "everyone"),
          sm:chmod($no-access-uri, "rw-------"),
          sm:chown($no-write-access-uri, "testuser2"),
          sm:chgrp($no-write-access-uri, "everyone"),
          sm:chmod($no-write-access-uri, "rw-r--r--")
      ))
    </code>
  </setup>
  <tearDown>
      <remove-collection collection="/db/data/original/en/1900"/>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="a">http://jewishliturgy.org/ns/access/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jf">http://jewishliturgy.org/ns/jlptei/flat/1.0</namespace>
  <imports>
    import module namespace orig="http://jewishliturgy.org/api/data/original"
      at "xmldb:exist:///db/apps/opensiddur-server/api/data/original.xqm";
    import module namespace format="http://jewishliturgy.org/modules/format"
      at "xmldb:exist:///db/apps/opensiddur-server/modules/format.xqm";
    import module namespace crest="http://jewishliturgy.org/modules/common-rest"
      at "xmldb:exist:///db/apps/opensiddur-server/api/modules/common-rest.xqm";
    import module namespace ridx="http://jewishliturgy.org/modules/refindex"
      at "xmldb:exist:///db/apps/opensiddur-server/api/modules/refindex.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
  </imports>
  <TestSet>
      <testName>orig:get()</testName>
      <test>
         <task>Get an existing resource</task>
         <code>
      orig:get("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      orig:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      orig:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>orig:get-flat()</testName>
      <tearDown>
         <remove-collection collection="/db/cache/flatten/original/en/1900"/>
         <remove-collection collection="/db/cache/merge/original/en/1900"/>
         <remove-collection collection="/db/cache/resolved/original/en/1900"/>
         <remove-collection collection="/db/cache/dependency/original/en/1900"/>
      </tearDown>
      <test>
         <task>Get an existing resource</task>
         <code>
      orig:get-flat("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
         <xpath desc="The returned resource is flattened">exists(./tei:TEI//jf:merged)</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      orig:get-flat("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      orig:get-flat("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>orig:get-combined()</testName>
      <setup>
         <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
               name="HasTransclude.xml"
               destination="/db/data/original/en/1900/01"/>
         <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
               name="Transcluded.xml"
               destination="/db/data/original/en/1900/01"/>
      </setup>
      <tearDown>
         <code>
      format:clear-caches("/db/data/original/en/1900/01/HasTransclude.xml"),
      format:clear-caches("/db/data/original/en/1900/01/Transcluded.xml")
      </code>
      </tearDown>
      <test>
         <task>Get a resource, transclude=false()</task>
         <code>
      orig:get-combined("HasTransclude", false())
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
         <xpath desc="The returned resource is unflattened">exists(./tei:TEI//jf:unflattened)</xpath>
         <xpath desc="Pointers are intact">exists(./tei:TEI//tei:ptr[ancestor::jf:unflattened])</xpath>
      </test>
      <test>
         <task>Get a resource, transclude=true()</task>
         <code>
        orig:get-combined("HasTransclude", true())
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
         <xpath desc="The returned resource is combined">exists(./tei:TEI//jf:combined)</xpath>
         <xpath desc="Pointers have been converted to jf:ptr">exists(./tei:TEI//jf:ptr[ancestor::jf:combined])</xpath>
         <xpath desc="Transcluded section is there">exists(./tei:TEI//tei:seg[@jf:id="tr_seg1"])</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      orig:get-combined("DoesNotExist", false())
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      orig:get-combined("NoAccess", false())
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>orig:get-combined-html()</testName>
      <setup>
         <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
               name="HasTransclude.xml"
               destination="/db/data/original/en/1900/01"/>
         <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
               name="Transcluded.xml"
               destination="/db/data/original/en/1900/01"/>
      </setup>
      <tearDown>
         <code>
      format:clear-caches("/db/data/original/en/1900/01/HasTransclude.xml"),
      format:clear-caches("/db/data/original/en/1900/01/Transcluded.xml")
      </code>
      </tearDown>
      <test>
         <task>Get a resource, transclude=false()</task>
         <code>
      orig:get-combined-html("HasTransclude", false())
      </code> 
         <xpath desc="Returns an HTML resource">exists(./html:html)</xpath>
      </test>
      <test>
         <task>Get a resource, transclude=true()</task>
         <code>
        orig:get-combined-html("HasTransclude", true())
      </code> 
         <xpath desc="Returns an HTML resource">exists(./html:html)</xpath>
         <xpath desc="The returned resource is combined">exists(./html:html//html:div[matches(@data-document,"^((/exist/restxq)?/api)?/data/original/Transcluded$")])</xpath>
         <xpath desc="Transcluded section is there">exists(./html:html//html:div[contains(@class,"id-tr_seg1")])</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      orig:get-combined-html("DoesNotExist", false())
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      orig:get-combined-html("NoAccess", false())
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>  
  <TestSet>
      <testName>orig:post-combined-job()</testName>
      <test>
         <task>Post a job on an existing document, transclude=false()</task>
         <code>
            orig:post-combined-job("Existing", false(), "html")
        </code> 
         <xpath desc="Returns status code 202">self::rest:response/http:response/@status=202</xpath>
         <xpath desc="Returns an HTTP Location header with a job-id">self::rest:response/http:response/http:header[@name='Location'][matches(@value, '/api/jobs/\d+-\d+')]</xpath>
      </test>
      <test>
         <task>Post a job for a nonexisting document</task>
         <code>
            orig:post-combined-job("DoesNotExist", false(), "html")
         </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Post a job with an invalid format</task>
         <code>
            orig:post-combined-job("Existing", false(), "invalid")
         </code> 
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Post a job for a resource with no read access</task>
         <code>
            orig:post-combined-job("NoAccess", false(), "html")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>  
  <TestSet>
      <testName>orig:list()</testName>
      <test>
         <task>List all resources</task>
         <code>
        orig:list("", 1, 100)
      </code>
         <xpath desc="returns at least 1 result">count(.//html:li[@class="result"])&gt;=1</xpath>
         <xpath desc="results include a pointer to access API">
        every $li in .//html:li[@class="result"] 
        satisfies exists($li/html:a[@class="alt"][@property="access"])
      </xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>List some resources</task>
         <code>
        orig:list("", 1, 2)
      </code>
         <xpath desc="returns 2 results">count(.//html:li[@class="result"])=2</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>Respond to a query</task>
         <code>
        orig:list("Query", 1, 100)
      </code>
         <xpath desc="returns 1 results">count(.//html:ol[@class="results"]/html:li)=1</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>orig:delete()</testName>
      <test>
         <task>Remove an existing resource</task>
         <code>
      orig:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>Remove a nonexisting resource</task>
         <code>
      orig:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Remove a resource without write access</task>
         <code>
      orig:delete("NoWriteAccess")
      </code>
         <class href="../common.t.incl.xml#Forbidden"/>
      </test>
  </TestSet>
  <TestSet>
    <testName>orig:delete() with internal reference</testName>
    <setup>
        <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
            name="ExternalReference.xml"
            destination="/db/data/original/en/1900/01"/>
        <code>
          system:as-user("admin", $magic:password,
            let $er-uri := xs:anyURI("/db/data/original/en/1900/01/ExternalReference.xml")
            return (
              sm:chown($er-uri, "testuser"),
              sm:chgrp($er-uri, "everyone"),
              sm:chmod($er-uri, "rw-r--r--"),
              ridx:reindex(doc("/db/data/original/en/1900/01/ExternalReference.xml"))
          ))
        </code>
    </setup>
    <tearDown>
        <code>
            system:as-user("admin", $magic:password, 
                ridx:remove("/db/data/original/en/1900/01", "ExternalReference.xml")
            )
        </code>
    </tearDown>
    <test>
      <task>Delete a resource with only an internal reference</task>
      <code>orig:delete("ExternalReference")</code>
      <class href="../common.t.incl.xml#NoData"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:delete() with external reference</testName>
    <setup>
        <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
            name="ExternalReference.xml"
            destination="/db/data/original/en/1900/01"/>
        <copy source="/db/apps/opensiddur-tests/tests/api/data/original"
            name="MakesExternalReference.xml"
            destination="/db/data/original/en/1900/01"/>
        <code>
          system:as-user("admin", $magic:password,
            let $er-uri := xs:anyURI("/db/data/original/en/1900/01/ExternalReference.xml")
            let $mer-uri := xs:anyURI("/db/data/original/en/1900/01/MakesExternalReference.xml")
            return (
              sm:chown($er-uri, "testuser"),
              sm:chgrp($er-uri, "everyone"),
              sm:chmod($er-uri, "rw-r--r--"),
              sm:chown($mer-uri, "testuser"),
              sm:chgrp($mer-uri, "everyone"),
              sm:chmod($mer-uri, "rw-r--r--"),
              ridx:reindex(doc("/db/data/original/en/1900/01/ExternalReference.xml")),
              ridx:reindex(doc("/db/data/original/en/1900/01/MakesExternalReference.xml"))
          ))
        </code>
    </setup>
    <tearDown>
        <code>
            system:as-user("admin", $magic:password, (
                ridx:remove("/db/data/original/en/1900/01", "ExternalReference.xml"),
                ridx:remove("/db/data/original/en/1900/01", "MakesExternalReference.xml")
                )
            )
        </code>
    </tearDown>
    <test>
      <task>Delete a resource with an external reference</task>
      <code>orig:delete("ExternalReference")</code>
      <class href="../common.t.incl.xml#BadRequest"/>
      <xpath desc="error message returns a reference to the document where the external reference is">
        count(.//documents/document)=1 and ends-with(.//documents/document,"/data/original/MakesExternalReference")
      </xpath> 
    </test>
  </TestSet>
  <TestSet>
      <testName>orig:post()</testName>
      <tearDown>
         <code>
      let $document := 
        collection("/db/data/original")//tei:titleStmt/tei:title[@type="main"][.="Valid"]/root(.)
      where exists($document)
      return xmldb:remove(
        util:collection-name($document),
        util:document-name($document)
        )
      </code>
      </tearDown>
      <test>
         <task>Post a valid resource</task>
         <code>
      orig:post(doc("/db/apps/opensiddur-tests/tests/api/data/original/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Created"/>
         <expected desc="a change record has been added"
                   xpath="collection('/db/data/original/en')[util:document-name(.)=tokenize($output//http:header[@name='Location']/@value,'/')[count(.)] || '.xml']//tei:revisionDesc/tei:change[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="created" who="/user/testuser"
                        when="..."/>
         </expected>
      </test>
      <test>
         <task>Post an invalid resource</task>
         <code>
      orig:post(doc("/db/apps/opensiddur-tests/tests/api/data/original/Invalid.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>orig:put()</testName>
      <test>
         <task>Put a valid resource to an existing resource</task>
         <code>
      orig:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/original/Existing-After-Put.xml"))
      </code>
         <class href="../common.t.incl.xml#NoData"/>
         <expected desc="a change record has been added"
                   xpath="(collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change)[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="edited" who="/user/testuser"
                        when="..."/>
         </expected>
         <xpath desc="There are 2 change records total">count(collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change)=2</xpath>
         <xpath desc="The first shows type='edited'">collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change[1]/@type="edited"</xpath>
         <xpath desc="The first shows who=testuser">collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change[1]/@who="/user/testuser"</xpath>
         <xpath desc="The first shows when">exists(collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change[1]/@when)</xpath>
      </test>
      <test>
         <task>Put a valid resource to a nonexisting resource</task>
         <code>
      orig:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/original/Valid.xml"))
      </code>
      </test>
      <test>
         <task>Put an invalid resource</task>
         <code>
      orig:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/original/Invalid.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Put a valid resource that is invalidated by an illegal change</task>
         <code>
      orig:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/original/Invalid-After-Put-Illegal-RevisionDesc.xml"))
      </code>
      </test>
  </TestSet>
  <TestSet>
      <testName>Unauthenticated</testName>
      <asUser/>
      <password/>
      <test>
         <task>orig:get(): Get an existing resource</task>
         <code>
      orig:get("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
      </test>
      <test>
         <task>orig:get(): Get an existing resource with no read access</task>
         <code>
      orig:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>orig:get(): Get a nonexisting resource</task>
         <code>
      orig:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>orig:list(): Get a list of all resources</task>
         <code>
      orig:list("", 1, 100)
      </code>
         <xpath desc="returns some results">count(.//html:ul[@class="results"]/html:li)&gt;=1</xpath>
         <xpath desc="does not list resource with no read access">empty(.//html:li[@class="result"]/html:a[@class="document"]/@href[contains(., "NoAccess")])</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>orig:delete(): Remove an existing resource</task>
         <code>
      orig:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>orig:delete(): Remove a nonexisting resource</task>
         <code>
      orig:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>orig:post(): Post a resource</task>
         <code>
      orig:post(doc("/db/apps/opensiddur-tests/tests/api/data/original/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>orig:put(): Put an existing resource</task>
         <code>
      orig:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/original/Existing.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>orig:put(): Put a nonexisting resource</task>
         <code>
      orig:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/original/Existing.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>orig:get-access()</task>
         <code>
      orig:get-access("Existing", ())
      </code>
         <xpath desc="an access structure is returned">self::a:access</xpath>
      </test>
      <test>
         <task>orig:put-access()</task>
         <code>
      orig:put-access("Existing", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="false"&gt;everyone&lt;/a:group&gt;
          &lt;a:world read="false" write="false"/&gt;
        &lt;/a:access&gt;
        })
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
  </TestSet> 
  <TestSet>
      <testName>orig:put-flat()</testName>
      <test>
         <task>Put a valid flattened resource to an existing resource</task>
         <code>
      orig:put-flat("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/original/Existing-Flat.xml"))
      </code>
         <class href="../common.t.incl.xml#NoData"/>
         <expected desc="a change record has been added"
                   xpath="(collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change)[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="edited" who="/user/testuser"
                        when="..."/>
         </expected>
         <xpath desc="There are 2 change records total">count(collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change)=2</xpath>
         <xpath desc="The first shows type='edited'">collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change[1]/@type="edited"</xpath>
         <xpath desc="The first shows who=testuser">collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change[1]/@who="/user/testuser"</xpath>
         <xpath desc="The first shows when">exists(collection('/db/data/original/en')[util:document-name(.)='Existing.xml']//tei:revisionDesc/tei:change[1]/@when)</xpath>
      </test>
      <test>
         <task>Put a valid resource to a nonexisting resource</task>
         <code>
      orig:put-flat("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/original/Valid-Flat.xml"))
      </code>
      </test>
      <test>
         <task>Put an invalid flattened resource</task>
         <code>
      orig:put-flat("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/original/Invalid-Flat.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>  
  <TestSet>
      <testName>orig:get-access()</testName>
      <test>
         <task>For an existing resource</task>
         <code>
      orig:get-access("Existing", ())
      </code>
         <xpath desc="returns an access structure">exists(./self::a:access)</xpath>
      </test>
      <test>
         <task>For a nonexistent resource</task>
         <code>
      orig:get-access("DoesNotExist", ())
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>orig:put-access()</testName>
      <test>
         <task>Set with a valid access structure</task>
         <code>
      orig:put-access("Existing", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="true"&gt;everyone&lt;/a:group&gt;
          &lt;a:world write="true" read="true"/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>With an invalid access structure</task>
         <code>
      orig:put-access("Existing", document{
        &lt;a:access&gt;
          &lt;a:invalid/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>For a resource with no write access</task>
         <code>
      orig:put-access("NoWriteAccess", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="false"&gt;testuser&lt;/a:group&gt;
          &lt;a:world write="false" read="false"/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#Forbidden"/>
      </test>
      <test>
         <task>For a nonexistent resource</task>
         <code>
      orig:put-access("DoesNotExist", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="false"&gt;testuser&lt;/a:group&gt;
          &lt;a:world write="false" read="false"/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>crest:record-change()</testName>
      <setup>
         <store collection="/db/data/tests" name="With-RevisionDesc-And-Change.xml">
            <tei:TEI xmlns:tei="http://www.tei-c.org/ns/1.0">
               <tei:teiHeader>
                  <tei:revisionDesc>
                     <tei:change who="/user/testuser" when="1900-01-01" type="created"/>
                  </tei:revisionDesc>
               </tei:teiHeader>
            </tei:TEI>
         </store>
         <store collection="/db/data/tests" name="With-RevisionDesc-And-Change-Log.xml">
            <tei:TEI xmlns:tei="http://www.tei-c.org/ns/1.0">
               <tei:teiHeader>
                  <tei:revisionDesc>
                     <tei:change>Change log</tei:change>
                  </tei:revisionDesc>
               </tei:teiHeader>
            </tei:TEI>
         </store>
         <store collection="/db/data/tests" name="With-Empty-RevisionDesc.xml">
            <tei:TEI xmlns:tei="http://www.tei-c.org/ns/1.0">
               <tei:teiHeader>
                  <tei:revisionDesc/>
               </tei:teiHeader>
            </tei:TEI>
         </store>
         <store collection="/db/data/tests" name="With-No-RevisionDesc.xml">
            <tei:TEI xmlns:tei="http://www.tei-c.org/ns/1.0">
               <tei:teiHeader>
                  <tei:publicationStmt/>
               </tei:teiHeader>
            </tei:TEI>
         </store>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/tests" name="With-RevisionDesc-And-Change.xml"/>
         <remove-document collection="/db/data/tests" name="With-RevisionDesc-And-Change-Log.xml"/>
         <remove-document collection="/db/data/tests" name="With-Empty-RevisionDesc.xml"/>
         <remove-document collection="/db/data/tests" name="With-No-RevisionDesc.xml"/>
      </tearDown>
      <test>
         <task>add an edit record with revisionDesc and existing change</task>
         <code>
      crest:record-change(doc("/db/data/tests/With-RevisionDesc-And-Change.xml"), "edited")
      </code>
         <expected xpath="doc('/db/data/tests/With-RevisionDesc-And-Change.xml')//tei:revisionDesc/tei:change[1]"
                   desc="change is recorded">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" who="/user/testuser" when="..."
                        type="edited"/>
         </expected>
      </test>
      <test>
         <task>add details to a record with revisionDesc and change log entry</task>
         <code>
      crest:record-change(doc("/db/data/tests/With-RevisionDesc-And-Change-Log.xml"), "edited")
      </code>
         <xpath desc="no change entry is inserted">count(doc('/db/data/tests/With-RevisionDesc-And-Change-Log.xml')//tei:revisionDesc/tei:change)=1</xpath>
         <expected xpath="doc('/db/data/tests/With-RevisionDesc-And-Change-Log.xml')//tei:revisionDesc/tei:change[1]"
                   desc="details are added">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" who="/user/testuser" when="..."
                        type="edited">Change log</tei:change>
         </expected>
      </test>
      <test>
         <task>add an edit record with empty revisionDesc</task>
         <code>
      crest:record-change(doc("/db/data/tests/With-Empty-RevisionDesc.xml"), "edited")
      </code>
         <expected xpath="doc('/db/data/tests/With-Empty-RevisionDesc.xml')//tei:revisionDesc"
                   desc="change is recorded in a new revisionDesc">
            <tei:revisionDesc xmlns:tei="http://www.tei-c.org/ns/1.0">
               <tei:change who="/user/testuser" when="..." type="edited"/>
            </tei:revisionDesc>    
         </expected>
      </test>
      <test>
         <task>add an edit record with no revisionDesc</task>
         <code>
      crest:record-change(doc("/db/data/tests/With-No-RevisionDesc.xml"), "created")
      </code>
         <expected xpath="doc('/db/data/tests/With-No-RevisionDesc.xml')//tei:revisionDesc"
                   desc="change is recorded in a new revisionDesc">
            <tei:revisionDesc xmlns:tei="http://www.tei-c.org/ns/1.0">
               <tei:change who="/user/testuser" when="..." type="created"/>
            </tei:revisionDesc>    
         </expected>
      </test>
  </TestSet>
</TestSuite>
