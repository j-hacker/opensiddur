<?xml version="1.0" encoding="UTF-8"?>
<TestSuite xmlns:tr="http://jewishliturgy.org/ns/tr/1.0">
  <suiteName>Transliteration API</suiteName>
  <description>
    <p>Test transliteration API function calls</p>
    <author>Efraim Feinstein</author>
    <copyright>Copyright 2012 Efraim Feinstein, 
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <imports>
  import module namespace tran="http://jewishliturgy.org/api/transliteration"
    at "xmldb:exist:///db/apps/opensiddur-server/api/data/transliteration.xqm";
  import module namespace data="http://jewishliturgy.org/modules/data"
    at "xmldb:exist:///db/apps/opensiddur-server/api/modules/data.xqm";
  import module namespace magic="http://jewishliturgy.org/magic"
    at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
  </imports>
  <namespace prefix="tr">http://jewishliturgy.org/ns/tr/1.0</namespace>
  <namespace prefix="output">http://www.w3.org/2010/xslt-xquery-serialization</namespace>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="a">http://jewishliturgy.org/ns/access/1.0</namespace>
  <variable name="valid" as="document-node()"><![CDATA[document {
    <tr:schema>
      <tr:title xml:lang="en">Valid</tr:title>
      <tr:description xml:lang="en">A minimal valid transliteration table for testing</tr:description>
      <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
      <tr:author xml:lang="en">Nobody</tr:author>
      <tr:table>
        <tr:lang in="en" out="en"/> 
        <tr:tr from="a" to="a"/>
      </tr:table>
    </tr:schema>
  }]]></variable>
  <variable name="invalid" as="document-node()"><![CDATA[document {
    <tr:not-a-table/>
  }]]></variable>
  <variable name="invalid-sch" as="document-node()"><![CDATA[
  document {
    <tr:schema>
      <tr:title xml:lang="en">Invalid</tr:title>
      <tr:description xml:lang="en">An invalid transliteration table for testing, invalid because it has two duplicate langs</tr:description>
      <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
      <tr:author xml:lang="en">Nobody</tr:author>
      <tr:table>
        <tr:lang in="en" out="en"/> 
        <tr:tr from="a" to="a"/>
      </tr:table>
      <tr:table>
        <tr:lang in="en" out="he"/> 
        <tr:tr from="a" to="a"/>
      </tr:table>
    </tr:schema>
  }
  ]]></variable>
  <setup>
    <create-collection parent="/db/data/transliteration" name="1900"/>
    <create-collection parent="/db/data/transliteration/1900" name="01"/>
    <store collection="/db/data/transliteration/1900/01" name="Test.xml">
      <tr:schema>
        <tr:title xml:lang="en">Test</tr:title>
        <tr:description xml:lang="en">A test</tr:description>
        <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
        <tr:author xml:lang="en">Nobody</tr:author>
        <tr:table>
          <tr:lang in="en" out="en"/>
          <tr:tr from="a" to="a"/>
        </tr:table>
      </tr:schema>
    </store>
    <store collection="/db/data/transliteration/1900/01" name="Test%202.xml">
      <tr:schema>
       	<tr:title xml:lang="en">Test 2</tr:title>
        <tr:description xml:lang="en">Another test</tr:description>
        <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
        <tr:author xml:lang="en">Nobody</tr:author>
        <tr:table>
          <tr:lang in="en" out="en"/>
          <tr:tr from="b" to="b"/>
        </tr:table>
      </tr:schema>
    </store>
    <store collection="/db/data/transliteration/1900/01" name="Mivchan.xml">
      <tr:schema>
        <tr:title xml:lang="en">Mivchan</tr:title>
        <tr:description xml:lang="en">Test in Hebrew</tr:description>
        <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
        <tr:author xml:lang="en">Nobody</tr:author>
        <tr:table>
          <tr:lang in="en" out="en"/>
          <tr:tr from="c" to="c"/>
        </tr:table>
      </tr:schema>
    </store>  
    <store collection="/db/data/transliteration/1900/01" name="Garbage.xml">
      <tr:schema>
        <tr:title xml:lang="en">Garbage</tr:title>
        <tr:description xml:lang="en">Just some garbage</tr:description>
        <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
        <tr:author xml:lang="en">Nobody</tr:author>
        <tr:table>
          <tr:lang in="en" out="en"/>
          <tr:tr from="d" to="d"/>
        </tr:table>
      </tr:schema>
    </store>
    <store collection="/db/data/transliteration/1900/01" name="NoWrite.xml">
      <tr:schema>
        <tr:title xml:lang="en">NoWrite</tr:title>
        <tr:description xml:lang="en">No write access</tr:description>
        <tr:copyright-license uri="http://creativecommons.org/publicdomain/zero/1.0" />
        <tr:author xml:lang="en">Nobody</tr:author>
        <tr:table>
          <tr:lang in="en" out="en"/>
          <tr:tr from="e" to="e"/>
        </tr:table>
      </tr:schema>
    </store>
    <code><![CDATA[
      system:as-user("admin", $magic:password, (
        let $uri := xs:anyURI("/db/data/transliteration/1900/01/NoWrite.xml")
        return (
          sm:chown($uri, "testuser2"),
          sm:chgrp($uri, "everyone"),
          sm:chmod($uri, "rw-r--r--")
      )))
    ]]></code>
  </setup>
  <tearDown>
    <remove-collection collection="/db/data/transliteration/1900"/>
  </tearDown>
  <TestSet>
    <testName>tran:get()</testName>
    <asUser>testuser</asUser>
    <password>testuser</password>
    <test>
      <task>Get an existing resource</task>
      <code><![CDATA[
        tran:get("Test")
      ]]></code>
      <xpath desc="returns a transliteration schema">tr:schema</xpath>
    </test>
    <test>
      <task>Get a non-existing resource</task>
      <code><![CDATA[
        tran:get("DoesNotExist")
      ]]></code>
      <xpath desc="returns a 404 error">self::rest:response/http:response/@status=404</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>tran:list()</testName>
    <test>
      <task>List all resources</task>
      <code><![CDATA[
        tran:list("", 1, 100)
      ]]></code>
      <xpath desc="returns at least 3 results">count(.//html:li[@class="result"])&gt;=3</xpath>
      <xpath desc="results include a pointer to access API">
        every $li in .//html:li[@class="result"] 
        satisfies exists($li/html:a[@class="alt"][@property="access"])
      </xpath>
      <class href="../common.t.incl.xml#SearchResults"/>
    </test>
    <test>
      <task>List some resources</task>
      <code><![CDATA[
        tran:list("", 1, 2)
      ]]></code>
      <xpath desc="returns 2 results">count(.//html:li[@class="result"])=2</xpath>
      <class href="../common.t.incl.xml#SearchResults"/>
    </test>
    <test>
      <task>Respond to a query</task>
      <code><![CDATA[
        tran:list("Test", 1, 100)
      ]]></code>
      <xpath desc="returns 3 results">count(.//html:ol[@class="results"]/html:li)=3</xpath>
      <class href="../common.t.incl.xml#SearchResults"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>tran:delete()</testName>
    <asUser>testuser</asUser>
    <password>testuser</password>
    <setup>
      <code><![CDATA[
        sm:add-user-ace(xs:anyURI("/data/transliteration/1900/01/Garbage.xml"), "testuser2", false(), "w")
      ]]></code>
    </setup>
    <test>
      <task>Delete a transliteration that does exist</task>
      <code><![CDATA[
        tran:delete("Garbage")
      ]]></code>
      <xpath desc="return value is 204">self::rest:response/http:response/@status=204</xpath>
      <xpath desc="data is removed">not(doc-available("/data/transliteration/1900/01/Garbage.xml"))</xpath>
    </test>
    <test>
      <task>Delete a transliteration that does not exist</task>
      <code><![CDATA[
        tran:delete("NotExist")
      ]]></code>
      <xpath desc="return value is 404">self::rest:response/http:response/@status=404</xpath>
    </test>
    <test>
      <task>Delete where no access is granted and user is logged in</task>
      <code><![CDATA[
        system:as-user("testuser2", "testuser2", tran:delete("Garbage"))
      ]]></code>
      <xpath desc="return value is 403">self::rest:response/http:response/@status=403</xpath>
    </test>
    <test ignore="yes">
      <task>Delete a transliteration that is referenced from elsewhere</task>
      <code><![CDATA[
        tran:delete("ExternalReference")
      ]]></code>
      <xpath desc="return value is 400">self::rest:response/http:response/@status=400</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>tran:post()</testName>
    <asUser>testuser</asUser>
    <password>testuser</password>
    <setup>
      <code><![CDATA[
        sm:insert-user-ace(xs:anyURI("/db/data/transliteration"), 0, "testuser2", false(), "w")
      ]]></code>
    </setup>
    <tearDown>
      <code><![CDATA[
        sm:remove-ace(xs:anyURI("/db/data/transliteration"), 0),
        let $created := collection("/db/data/transliteration")//tr:schema[tr:title="Valid"]
        where ($created)
        return
          let $month-collection := util:collection-name($created)
          let $year-collection := util:collection-name($month-collection)
          let $doc-name := util:document-name($created)
          let $remove-month-collection := count(collection($month-collection))=1
          let $remove-year-collection := count(collection($year-collection))=1
          return (
            xmldb:remove($month-collection, $doc-name),
            if ($remove-month-collection)
            then 
              xmldb:remove($month-collection)
            else (),
            if ($remove-year-collection)
            then
              xmldb:remove($year-collection)
            else ()
          )
      ]]>
      </code>
    </tearDown>
    <test>
      <task>Post a valid transliteration</task>
      <code><![CDATA[
      tran:post($valid)
      ]]></code>
      <xpath desc="return status code is 201">self::rest:response/http:response/@status=201</xpath>
      <xpath desc="A location header specifies where the document is stored">exists(self::rest:response/http:response/http:header[@name="Location"])</xpath>
      <xpath desc="A new document has been created at the location">exists(data:doc("transliteration", "Valid"))</xpath>
    </test>
    <test>
      <task>Post an invalid transliteration</task>
      <code><![CDATA[
      tran:post($invalid)
      ]]></code>
      <xpath desc="return status code is 400">self::rest:response/http:response/@status=400</xpath>
    </test>
    <test>
      <task>Post an invalid transliteration that is invalid because of the Schematron</task>
      <code><![CDATA[
      tran:post($invalid-sch)
      ]]></code>
      <xpath desc="return status code is 400">self::rest:response/http:response/@status=400</xpath>
    </test>
    <test>
      <task>Post a valid transliteration as an unauthorized user</task>
      <code><![CDATA[
      system:as-user("testuser2","testuser2",tran:post($valid))
      ]]></code>
      <xpath desc="return status code is 403">self::rest:response/http:response/@status=403</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>tran:put()</testName>
    <setup>
      <code><![CDATA[
        sm:add-user-ace(xs:anyURI("/db/data/transliteration/1900/01/Garbage.xml"), "testuser2", false(), "w")
      ]]></code>
    </setup>
    <test>
      <task>Put valid data to an existing resource</task>
      <code><![CDATA[
      tran:put("Garbage", $valid)
      ]]></code>
      <xpath desc="return status code is 204">self::rest:response/http:response/@status=204</xpath>
      <xpath desc="document data has been changed">data:doc("transliteration", "Garbage")//tr:title="Valid"</xpath>
    </test>
    <test>
      <task>Put data to a non-existing resource</task>
      <task>Put valid data to an existing resource</task>
      <code><![CDATA[
      tran:put("NotExist", $valid)
      ]]></code>
      <xpath desc="return status code is 404">self::rest:response/http:response/@status=404</xpath>
    </test>
    <test>
      <task>Put invalid data to an existing resource</task>
      <code><![CDATA[
      tran:put("Garbage", $invalid)
      ]]></code>
      <xpath desc="return status code is 400">self::rest:response/http:response/@status=400</xpath>
    </test>
    <test>
      <task>Put an invalid transliteration that is invalid because of the Schematron</task>
      <code><![CDATA[
      tran:put("Garbage", $invalid-sch)
      ]]></code>
      <xpath desc="return status code is 400">self::rest:response/http:response/@status=400</xpath>
    </test>
    <test>
      <task>Put valid data to an existing resource as an unauthorized user</task>
      <code><![CDATA[
      system:as-user("testuser2","testuser2",tran:put("Garbage", $valid))
      ]]></code>
      <xpath desc="return status code is 403">self::rest:response/http:response/@status=403</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>Actions as an unauthenticated user</testName>
    <asUser/>
    <password/>
    <test>
      <task>tran:get()</task>
      <code><![CDATA[
      tran:get("Test")
      ]]></code>
      <xpath desc="returns a transliteration schema">tr:schema</xpath>
    </test>
    <test>
      <task>tran:list()</task>
      <code><![CDATA[
      tran:list("", 1, 100)
      ]]></code>
      <xpath desc="returns some results">count(.//html:ul[@class="results"]/html:li)&gt;=1</xpath>
      <class href="../common.t.incl.xml#SearchResults"/>
    </test>
    <test>
      <task>tran:post()</task>
      <code><![CDATA[
      tran:post($valid)
      ]]></code>
      <class href="../common.t.incl.xml#Unauthorized"/>
    </test>
    <test>
      <task>tran:delete()</task>
      <code><![CDATA[
        tran:delete("Garbage")
      ]]></code>
      <class href="../common.t.incl.xml#Unauthorized"/>
    </test>
    <test>
      <task>tran:put()</task>
      <code><![CDATA[
      tran:put("Garbage", $valid)
      ]]></code>
      <class href="../common.t.incl.xml#Unauthorized"/>
    </test>
    <test>
      <task>tran:get-access()</task>
      <code><![CDATA[
      tran:get-access("Garbage", ())
      ]]></code>
      <xpath desc="an access structure is returned">self::a:access</xpath>
    </test>
    <test>
      <task>tran:put-access()</task>
      <code><![CDATA[
      tran:put-access("Garbage", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="false">everyone</a:group>
          <a:world read="false" write="false"/>
        </a:access>
        })
      ]]></code>
      <class href="../common.t.incl.xml#Unauthorized"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>tran:get-access()</testName>
    <test>
      <task>For an existing resource</task>
      <code><![CDATA[
      tran:get-access("Test", ())
      ]]></code>
      <xpath desc="returns an access structure">exists(./self::a:access)</xpath>
    </test>
    <test>
      <task>For a nonexistent resource</task>
      <code><![CDATA[
      tran:get-access("DoesNotExist", ())
      ]]></code>
      <class href="../common.t.incl.xml#NotFound"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>tran:put-access()</testName>
    <test>
      <task>Set with a valid access structure</task>
      <code><![CDATA[
      tran:put-access("Test", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="true">everyone</a:group>
          <a:world write="true" read="true"/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.incl.xml#NoData"/>
    </test>
    <test>
      <task>With an invalid access structure</task>
      <code><![CDATA[
      tran:put-access("Garbage", document{
        <a:access>
          <a:invalid/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.incl.xml#BadRequest"/>
    </test>
    <test>
      <task>For a resource with no write access</task>
      <code><![CDATA[
      tran:put-access("NoWrite", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="false">testuser</a:group>
          <a:world write="false" read="false"/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.incl.xml#Forbidden"/>
    </test>
    <test>
      <task>For a nonexistent resource</task>
      <code><![CDATA[
      tran:put-access("DoesNotExist", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="false">testuser</a:group>
          <a:world write="false" read="false"/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.incl.xml#NotFound"/>
    </test>
  </TestSet>
</TestSuite>
