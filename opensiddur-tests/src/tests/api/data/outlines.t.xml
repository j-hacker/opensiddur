<?xml version="1.0" encoding="UTF-8"?>
<TestSuite
  xmlns:ol="http://jewishliturgy.org/ns/outline/1.0"
  xmlns:olx="http://jewishliturgy.org/ns/outline/responses/1.0"
  >
  <suiteName>Outline data API</suiteName>
  <description>
      <p>Test the outline data API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2016 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- support files required for validity -->
    <store collection="/db/data/user" name="testuser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Test User</tei:name>
         </j:contributor>
      </store>
    <!-- existing resource with read/write access for testuser -->
    <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="Existing.xml"
            destination="/db/data/outlines"/>
      <code>
      system:as-user("admin", $magic:password,
        let $existing-uri := xs:anyURI("/db/data/outlines/Existing.xml")
        return (
          sm:chown($existing-uri, "testuser"),
          sm:chgrp($existing-uri, "everyone"),
          sm:chmod($existing-uri, "rw-rw-r--")
      ))
    </code>
  </setup>
  <tearDown>
      <remove-document collection="/db/data/outlines" name="Existing.xml"/>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="ol">http://jewishliturgy.org/ns/outline/1.0</namespace>
  <namespace prefix="olx">http://jewishliturgy.org/ns/outline/responses/1.0</namespace>
  <namespace prefix="http">http://expath.org/ns/http-client</namespace>
  <imports>
    import module namespace outl="http://jewishliturgy.org/api/data/outlines"
      at "xmldb:exist:///db/apps/opensiddur-server/api/data/outlines.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
    import module namespace data="http://jewishliturgy.org/modules/data"
      at "xmldb:exist:///db/apps/opensiddur-server/modules/data.xqm";
    import module namespace t="http://exist-db.org/xquery/testing/modified"
      at "xmldb:exist:///db/apps/opensiddur-tests/modules/test2.xqm";
  </imports>
  <TestSet>
      <testName>outl:get()</testName>
      <test>
         <task>Get an existing resource, no check</task>
         <code>
            outl:get("Existing", ())
         </code> 
         <xpath desc="Returns an outline resource">exists(./ol:outline)</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource, no check</task>
         <code>
        outl:get("DoesNotExist", ())
        </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
    <testName>outl:get() with check: identity</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" 
        destination="/db/data/outlines"
        name="TestEverythingOK.xml"/>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/outlines" name="TestEverythingOK.xml"/>
    </tearDown>
    <test>
        <task>For every item with no duplicate title, at any level, the item is returned as is.</task>
        <code>
            outl:get("TestEverythingOK", "1")
        </code>
        <expected desc="return an identity" href="/db/apps/opensiddur-tests/tests/api/data/outlines/TestEverythingOK.xml"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>outl:get() with check: logic</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/outlines"
        name="TestOutline.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleExistsOnce.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleExistsTwice.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleExistsTwice-1.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleAlreadyConfirmed.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleAlreadyConfirmedAndDuplicated.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleAlreadyConfirmedAndDuplicated-1.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleDuplicatedAndSubordinatesExistWithSamePointers.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="TitleDuplicatedAndSubordinatesExistWithDifferentPointers.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="SubOne.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="SubTwo.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines"
        destination="/db/data/original/en"
        name="HasAStatus.xml"/>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/outlines" name="TestOutline.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleExistsOnce.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleExistsTwice.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleExistsTwice-1.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleAlreadyConfirmed.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleAlreadyConfirmedAndDuplicated.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleAlreadyConfirmedAndDuplicated-1.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleDuplicatedAndSubordinatesExistWithSamePointers.xml"/>
      <remove-document collection="/db/data/original/en" name="TitleDuplicatedAndSubordinatesExistWithDifferentPointers.xml"/>
      <remove-document collection="/db/data/original/en" name="SubOne.xml"/>
      <remove-document collection="/db/data/original/en" name="SubTwo.xml"/>
      <remove-document collection="/db/data/original/en" name="HasAStatus.xml"/>
    </tearDown> 
    <test>
        <task>all logic</task>
        <code>
            outl:get("TestOutline", "1")
        </code>
        <expected desc="for each item without a duplicate title, return the item as-is" xpath="./ol:outline/ol:item[1]">
          <ol:item>
              <ol:title>TitleDoesNotExist</ol:title>
              <ol:from>1</ol:from>
              <ol:to>2</ol:to>
          </ol:item>
        </expected>
        <expected desc="for each item with a duplicate title external to the outline without a duplication confirmation, return an olx:sameAs with an olx:uri for each duplicate entry (title exists once)" xpath="./ol:outline/ol:item[2]">
          <ol:item>
              <ol:title>TitleExistsOnce</ol:title>
              <ol:from>3</ol:from>
              <ol:to>4</ol:to>
              <olx:sameAs>
                <olx:uri>/data/original/TitleExistsOnce</olx:uri>
              </olx:sameAs>
          </ol:item>
        </expected>
        <expected desc="for each item with a duplicate title external to the outline without a duplication confirmation, return an olx:sameAs with an olx:uri for each duplicate entry (title exists more than once)" xpath="./ol:outline/ol:item[3]">
          <ol:item>
              <ol:title>TitleExistsTwice</ol:title>
              <ol:from>5</ol:from>
              <ol:to>6</ol:to>
              <olx:sameAs>
                <olx:uri>/data/original/TitleExistsTwice</olx:uri>
              </olx:sameAs>
              <olx:sameAs>
                <olx:uri>/data/original/TitleExistsTwice-1</olx:uri>
              </olx:sameAs>
          </ol:item>
        </expected>
        <expected desc="for an item with a duplicate title that is already confirmed, the confirmation is maintained exactly" xpath="./ol:outline/ol:item[4]">
          <ol:item>
              <ol:title>TitleAlreadyConfirmed</ol:title>
              <ol:from>7</ol:from>
              <ol:to>8</ol:to>
              <olx:sameAs>
                  <olx:uri>/data/original/TitleAlreadyConfirmed</olx:uri>
                  <olx:yes/>
              </olx:sameAs>
          </ol:item>
        </expected>
        <expected desc="for an item with a duplicate title that is already confirmed and duplicated again, the confirmation is maintained exactly and the additional duplicate is recorded with a negative confirmation" xpath="./ol:outline/ol:item[5]">
          <ol:item>
              <ol:title>TitleAlreadyConfirmedAndDuplicated</ol:title>
              <ol:from>9</ol:from>
              <ol:to>10</ol:to>
              <olx:sameAs>
                  <olx:uri>/data/original/TitleAlreadyConfirmedAndDuplicated</olx:uri>
                  <olx:yes/>
              </olx:sameAs>
              <olx:sameAs>
                  <olx:uri>/data/original/TitleAlreadyConfirmedAndDuplicated-1</olx:uri>
                  <olx:no/>
              </olx:sameAs>
          </ol:item>
        </expected>
        <expected desc="Title already exists and has subordinates that are referenced and have the same pointers in the same order" xpath="./ol:outline/ol:item[6]">
          <ol:item>
            <ol:title>TitleDuplicatedAndSubordinatesExistWithSamePointers</ol:title>
            <ol:from>11</ol:from>
            <ol:to>12</ol:to>
            <olx:sameAs>
              <olx:uri>/data/original/TitleDuplicatedAndSubordinatesExistWithSamePointers</olx:uri>
            </olx:sameAs>
            <ol:item>
              <ol:title>SubOne</ol:title>
              <olx:sameAs>
                <olx:uri>/data/original/SubOne</olx:uri>
              </olx:sameAs>
            </ol:item>
            <ol:item>
              <ol:title>SubTwo</ol:title>
              <olx:sameAs>
                <olx:uri>/data/original/SubTwo</olx:uri>
              </olx:sameAs>
            </ol:item>
          </ol:item>
        </expected>
        <expected desc="Title already exists and has subordinates that are referenced and have the same pointers in different order" xpath="./ol:outline/ol:item[7]">
          <ol:item>
            <ol:title>TitleDuplicatedAndSubordinatesExistWithDifferentPointers</ol:title>
            <ol:from>13</ol:from>
            <ol:to>14</ol:to>
            <olx:sameAs>
              <olx:uri>/data/original/TitleDuplicatedAndSubordinatesExistWithDifferentPointers</olx:uri>
              <olx:warning>...</olx:warning>
            </olx:sameAs>
            <ol:item>
              <ol:title>SubTwo</ol:title>
              <olx:sameAs>
                <olx:uri>/data/original/SubTwo</olx:uri>
              </olx:sameAs>
            </ol:item>
            <ol:item>
              <ol:title>SubOne</ol:title>
              <olx:sameAs>
                <olx:uri>/data/original/SubOne</olx:uri>
              </olx:sameAs>
            </ol:item>
          </ol:item>
        </expected>
        <expected desc="if the document has a confirmed identity and a status with respect to the source, the status is returned" xpath="./ol:outline/ol:item[8]">
          <ol:item>
            <ol:title>HasAStatus</ol:title>
            <ol:from>15</ol:from>
            <ol:to>16</ol:to>
            <olx:sameAs>
              <olx:uri>/data/original/HasAStatus</olx:uri>
              <olx:yes/>
            </olx:sameAs>
            <olx:status>outlined</olx:status>
          </ol:item>
        </expected>
        <expected desc="if there is an internal duplicate title and one has items and the other does not, do nothing to the one that has items" xpath="./ol:outline/ol:item[9]">
          <ol:item>
            <ol:title>InternalDuplicate</ol:title>
            <ol:from>17</ol:from>
            <ol:to>18</ol:to>
            <ol:item>
              <ol:title>SubThree</ol:title>
            </ol:item>
            <ol:item>
              <ol:title>SubFour</ol:title>
            </ol:item>
          </ol:item>
        </expected>
        <expected desc="if there is an internal duplicate title and one has items and the other does not, do nothing to the one that has no items" xpath="./ol:outline/ol:item[10]">
          <ol:item>
            <ol:title>InternalDuplicate</ol:title>
            <ol:from>19</ol:from>
            <ol:to>20</ol:to>
          </ol:item>
        </expected>
        <expected desc="if there is an internal duplicate title and both have identical items, do nothing to the duplicate" xpath="./ol:outline/ol:item[11]">
          <ol:item>
            <ol:title>InternalDuplicate</ol:title>
            <ol:from>21</ol:from>
            <ol:to>22</ol:to>
            <ol:item>
              <ol:title>SubThree</ol:title>
            </ol:item>
            <ol:item>
              <ol:title>SubFour</ol:title>
            </ol:item>
          </ol:item>
        </expected>
        <expected desc="if there is an internal duplicate title and the items are not identical, flag olx:error on the first copy" xpath="./ol:outline/ol:item[12]">
          <ol:item>
            <ol:title>BadInternalDuplicate</ol:title>
            <ol:from>23</ol:from>
            <ol:to>24</ol:to>
            <olx:error>...</olx:error>
            <ol:item>
              <ol:title>SubFive</ol:title>
            </ol:item>
          </ol:item>
        </expected>
        <expected desc="if there is an internal duplicate title and the items are not identical, flag olx:error on the second copy" xpath="./ol:outline/ol:item[13]">
          <ol:item>
            <ol:title>BadInternalDuplicate</ol:title>
            <ol:from>25</ol:from>
            <ol:to>26</ol:to>
            <olx:error>...</olx:error>
            <ol:item>
              <ol:title>SubSix</ol:title>
            </ol:item>
          </ol:item>
        </expected>
        <xpath desc="the resulting file is valid">outl:validate(., ())</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>outl:post() with execute: olx:error</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineWithError.xml"
            destination="/db/data/outlines"/>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/outlines" name="TestOutlineWithError.xml"/>
    </tearDown>
    <test>
      <task>Outline file contains an olx:error after check</task>
      <code><![CDATA[ outl:post-execute("TestOutlineWithError") ]]></code>
      <class href="../common.t.incl.xml#BadRequest"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>outl:post() with execute: failed to confirm</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineWithUnconfirmed.xml"
            destination="/db/data/outlines"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="HasUnconfirmed.xml"
            destination="/db/data/original/en"/>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/outlines" name="TestOutlineWithUnconfirmed.xml"/>
      <remove-document collection="/db/data/original/en" name="HasUnconfirmed.xml"/>
    </tearDown>
    <test>
      <task>Outline file contains an unconfirmed olx:sameAs</task>
      <code><![CDATA[ outl:post-execute("TestOutlineWithUnconfirmed") ]]></code>
      <class href="../common.t.incl.xml#BadRequest"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>outl:post() with execute: executable outline</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineSource.xml"
            destination="/db/data/sources"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineExecutable.xml"
            destination="/db/data/outlines"/>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/sources" name="TestOutlineSource.xml"/>
      <remove-document collection="/db/data/outlines" name="TestOutlineExecutable.xml"/>
      <!--
      <remove-document collection="/db/data/original/en" name="TestOutlineExecutable.xml"/>
      <remove-document collection="/db/data/original/en" name="TestOutlineExecutableNewTitle.xml"/>
      -->
      <code>
        for $to-remove in ("TestOutlineExecutable", "TestOutlineExecutableNewTitle")
        let $doc := data:doc("/data/original/" || $to-remove)
        where exists($doc)
        return 
          let $collection := util:collection-name($doc)
          let $resource := util:document-name($doc)
          return try { xmldb:remove($collection, $resource) } catch * { () }
      </code>
    </tearDown>
    <test>
      <task>execute an executable outline</task>
      <code><![CDATA[ outl:post-execute("TestOutlineExecutable") ]]></code>
      <expected desc="Result is a copy of the rewritten outline" href="/db/apps/opensiddur-tests/tests/api/data/outlines/TestOutlineExecutableResult.xml"/>
      <xpath desc="the original outline file has been rewritten to correspond to the new data from execution">t:deep-equal-wildcard(doc("/db/data/outlines/TestOutlineExecutable.xml"), doc("/db/apps/opensiddur-tests/tests/api/data/outlines/TestOutlineExecutableResult.xml"))</xpath>
      <xpath desc="the outline main file exists">exists(data:doc("/data/original/TestOutlineExecutable"))</xpath>
      <xpath desc="the outline main file is placed in the correct collection for its language">contains(document-uri(data:doc("/data/original/TestOutlineExecutable")), "/en")</xpath>
      <xpath desc="the outline main file has the correct title">data:doc("/data/original/TestOutlineExecutable")//tei:titleStmt/tei:title[@type="main"]="TestOutlineExecutable"</xpath>
      <xpath desc="the outline main file references the correct xml:lang">data:doc("/data/original/TestOutlineExecutable")/tei:TEI/@xml:lang="en"</xpath>
      <xpath desc="the outline main file references the correct license">data:doc("/data/original/TestOutlineExecutable")//tei:availability/tei:licence/@target="http://www.creativecommons.org/publicdomain/zero/1.0"</xpath>
      <xpath desc="the outline main file references the correct source and status">data:doc("/data/original/TestOutlineExecutable")//tei:sourceDesc/tei:bibl[@j:docStatus="outlined"]/tei:ptr[@type="bibl"]/@target="/data/sources/TestOutlineSource"</xpath>
      <xpath desc="the outline main file has a streamText containing a pointer to the included file">data:doc("/data/original/TestOutlineExecutable")//j:streamText/tei:ptr/@target="/data/original/TestOutlineExecutableNewTitle#stream"</xpath>
      <xpath desc="the outline main file streamText filler has been removed">empty(data:doc("/data/original/TestOutlineExecutable")//j:streamText/tei:seg)</xpath>
      <xpath desc="the outline main file has 1 creation change record">count(data:doc("/data/original/TestOutlineExecutable")//tei:revisionDesc/tei:change[@type="created"])=1</xpath>
      <xpath desc="the outline main file has 1 edit change record">count(data:doc("/data/original/TestOutlineExecutable")//tei:revisionDesc/tei:change[@type="edited"])=1</xpath>
      <xpath desc="the outline included file exists">exists(data:doc("/data/original/TestOutlineExecutableNewTitle"))</xpath>
      <xpath desc="the outline included file is placed in the correct collection for its language">contains(document-uri(data:doc("/data/original/TestOutlineExecutableNewTitle")), "/en")</xpath>
      <xpath desc="the outline included file has the correct title">data:doc("/data/original/TestOutlineExecutableNewTitle")//tei:titleStmt/tei:title[@type="main"]="TestOutlineExecutableNewTitle"</xpath>
      <xpath desc="the outline included file references the correct xml:lang">data:doc("/data/original/TestOutlineExecutableNewTitle")/tei:TEI/@xml:lang="en"</xpath>
      <xpath desc="the outline included file references the correct license">data:doc("/data/original/TestOutlineExecutableNewTitle")//tei:availability/tei:licence/@target="http://www.creativecommons.org/publicdomain/zero/1.0"</xpath>
      <xpath desc="the outline included file references a contributor credit">data:doc("/data/original/TestOutlineExecutableNewTitle")//tei:titleStmt/tei:respStmt[tei:resp[@key="trc"][.="Transcribed by"]][tei:name[@ref="/user/testuser"][.="Test User"]]</xpath>
      <xpath desc="the outline included file references the correct source, status, and page numbers">data:doc("/data/original/TestOutlineExecutableNewTitle")//tei:sourceDesc/tei:bibl[@j:docStatus="outlined"][tei:biblScope[@unit="pages"][@from="1"][@to="2"]]/tei:ptr[@type="bibl"]/@target="/data/sources/TestOutlineSource"</xpath>
      <xpath desc="the outline included file has a streamText containing filler">count(data:doc("/data/original/TestOutlineExecutableNewTitle")//j:streamText/tei:seg)=2</xpath>
      <xpath desc="the outline included file has 1 creation change record">count(data:doc("/data/original/TestOutlineExecutableNewTitle")//tei:revisionDesc/tei:change[@type="created"])=1</xpath>
      <xpath desc="the outline included file has no edit change records">count(data:doc("/data/original/TestOutlineExecutableNewTitle")//tei:revisionDesc/tei:change[@type="edited"])=0</xpath>
    </test>
  </TestSet>
  <TestSet>
    <testName>outl:post-execute(): duplicate titles</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineSource.xml"
            destination="/db/data/sources"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineExecutableWithDuplicates.xml"
            destination="/db/data/outlines"/>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/sources" name="TestOutlineSource.xml"/>
      <remove-document collection="/db/data/outlines" name="TestOutlineExecutableWithDuplicates.xml"/>
      <code>
        for $to-remove in ("TestOutlineExecutableWithDuplicates", "TestOutlineExecutableDuplicate", "TestOutlineExecutableDuplicateWithItems", "TestSubOne", "TestSubTwo")
        let $doc := data:doc("/data/original/" || $to-remove)
        where exists($doc)
        return 
          let $collection := util:collection-name($doc)
          let $resource := util:document-name($doc)
          return try { xmldb:remove($collection, $resource) } catch * { () }
      </code>
    </tearDown>
    <test>
      <task>Execute an outline containing duplicates</task>
      <code><![CDATA[ outl:post-execute("TestOutlineExecutableWithDuplicates") ]]></code>
      <xpath desc="the outline main file exists">exists(data:doc("/data/original/TestOutlineExecutableWithDuplicates"))</xpath>
      <xpath desc="The main outline file references TestOutlineExecutableDuplicate 2x and TestOutlineExecutableDuplicateWithItems 2x"><![CDATA[
        let $d := data:doc("/data/original/TestOutlineExecutableWithDuplicates")
        let $st := $d//j:streamText
        return
          count($st/tei:ptr[@target='/data/original/TestOutlineExecutableDuplicate#stream'])=2 and 
          count($st/tei:ptr[@target='/data/original/TestOutlineExecutableDuplicateWithItems#stream'])=2
      ]]></xpath>
      <xpath desc="Documents with the title TestOutlineExecutableDuplicate exist only once">count(collection("/db/data/original/en")/tei:TEI[descendant::tei:titleStmt/tei:title[@type="main"][.="TestOutlineExecutableDuplicate"]])=1</xpath>
      <xpath desc="TestOutlineExecutableDuplicate has been written to once on creation, since it has no filler pointers">count(data:doc("/data/original/TestOutlineExecutableDuplicate")//tei:revisionDesc/tei:change)=1</xpath>
      <xpath desc="TestOutlineExecutableDuplicate references two different page ranges"><![CDATA[
      let $b := data:doc("/data/original/TestOutlineExecutableDuplicate")//tei:sourceDesc/tei:bibl
      return
        count($b/tei:biblScope)=2
        and exists($b/tei:biblScope[@unit='pages'][@from='1'][@to='2'])
        and exists($b/tei:biblScope[@unit='pages'][@from='3'][@to='4'])
      ]]></xpath>
      <xpath desc="Documents with the title TestOutlineExecutableDuplicateWithItems exist only once">count(collection("/db/data/original/en")/tei:TEI[descendant::tei:titleStmt/tei:title[@type="main"][.="TestOutlineExecutableDuplicateWithItems"]])=1</xpath>
      <xpath desc="TestOutlineExecutableDuplicateWithItems has a streamText that points to its two subordinates">
      let $st := data:doc("/data/original/TestOutlineExecutableDuplicateWithItems")//j:streamText
      return exists($st/tei:ptr[1]["/data/original/TestSubOne#stream"=@target])
          and exists($st/tei:ptr[2]["/data/original/TestSubTwo#stream"=@target])
      </xpath>
      <xpath desc="TestSubOne exists">exists(data:doc("/data/original/TestSubOne"))</xpath>
      <xpath desc="TestSubTwo exists">exists(data:doc("/data/original/TestSubTwo"))</xpath>
      <expected desc="The return outline contains the expected data and references" href="/db/apps/opensiddur-tests/tests/api/data/outlines/TestOutlineExecutableWithDuplicatesResult.xml"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>outl:post-execute(): external duplicate titles</testName>
    <setup>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineSource.xml"
            destination="/db/data/sources"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TestOutlineExecutableWithExternalDuplicates.xml"
            destination="/db/data/outlines"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TitleExistsOnce.xml"
            destination="/db/data/original/en"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TitleAlreadyConfirmedAndDuplicated.xml"
            destination="/db/data/original/en"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TitleDuplicatedAndSubordinatesExistWithSamePointers.xml"
            destination="/db/data/original/en"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TitleExistsOnceWithSource.xml"
            destination="/db/data/original/en"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/outlines" name="TitleExistsOnceWithSourceAndPages.xml"
            destination="/db/data/original/en"/>
      <code><![CDATA[
        system:as-user("admin", $magic:password, 
          for $doc in ("TitleExistsOnce", "TitleAlreadyConfirmedAndDuplicated", "TitleDuplicatedAndSubordinatesExistWithSamePointers", "TitleExistsOnceWithSource", "TitleExistsOnceWithSourceAndPages")
          let $uri := xs:anyURI("/db/data/original/en/" || $doc || ".xml")
          return (
            sm:chown($uri, "testuser"),
            sm:chgrp($uri, "everyone"),
            sm:chmod($uri, "rw-rw-r--")
          )
        )
      ]]></code>
    </setup>
    <tearDown>
      <remove-document collection="/db/data/sources" name="TestOutlineSource.xml"/>
      <remove-document collection="/db/data/outlines" name="TestOutlineExecutableWithExternalDuplicates.xml"/>
      <code>
        for $to-remove in ("TestOutlineExecutableWithExternalDuplicates", "TitleExistsOnce", "TitleExistsOnce-1", "TitleAlreadyConfirmedAndDuplicated", "TitleDuplicatedAndSubordinatesExistWithSamePointers", "TitleExistsOnceWithSource", "TitleExistsOnceWithSourceAndPages", "TitleExistsOnceWithSource-1", "TitleExistsOnceWithSourceAndPages-1", "SubOne", "SubTwo")
        let $doc := data:doc("/data/original/" || $to-remove)
        where exists($doc)
        return 
          let $collection := util:collection-name($doc)
          let $resource := util:document-name($doc)
          return try { xmldb:remove($collection, $resource) } catch * { () }
      </code>
    </tearDown>
    <test>
      <task>Execute an outline containing external duplicate references</task>
      <code><![CDATA[ outl:post-execute("TestOutlineExecutableWithExternalDuplicates") ]]></code>
      <xpath desc="the outline main file exists">exists(data:doc("/data/original/TestOutlineExecutableWithExternalDuplicates"))</xpath>
      <xpath desc="There is only file with the same title as the confirmed resource">count(collection("/db/data/original/en")//tei:titleStmt/tei:title[@type="main"][.="TitleAlreadyConfirmedAndDuplicated"])=1</xpath>
      <xpath desc="A reference to the source has been added to the confirmed resource">exists(data:doc("/data/original/TitleAlreadyConfirmedAndDuplicated")//tei:sourceDesc/tei:bibl[@j:docStatus="outlined"]/tei:ptr[@type="bibl"]["/data/sources/TestOutlineSource"=@target])</xpath>
      <xpath desc="A reference to the source's pages has been added to the confirmed resource">exists(data:doc("/data/original/TitleAlreadyConfirmedAndDuplicated")//tei:sourceDesc/tei:bibl[@j:docStatus="outlined"]/tei:biblScope[@unit="pages"][@from="1"][@to="2"])</xpath>
      <xpath desc="An edited by change record has been added to the confirmed resource">exists(data:doc("/data/original/TitleAlreadyConfirmedAndDuplicated")//tei:revisionDesc/tei:change[1][@type="edited"][contains(., "outline tool")])</xpath>
      <xpath desc="For each confirmed resource, a single olx:sameAs[olx:yes] record exists in the output outline">every $resource in ("TitleAlreadyConfirmedAndDuplicated", "TitleDuplicatedAndSubordinatesExistWithSamePointers", "TitleExistsOnceWithSource", "TitleExistsOnceWithSourceAndPages") satisfies count(.//ol:item[ol:title=$resource]/olx:sameAs[olx:yes])=1</xpath>
      <xpath desc="The text data in the confirmed resource has not been overwritten">data:doc("/data/original/TitleAlreadyConfirmedAndDuplicated")//j:streamText/tei:seg[1]="Test data."</xpath>
      <xpath desc="The confirmed negative duplicate file remains unchanged">t:deep-equal-wildcard(data:doc("/data/original/TitleExistsOnce"), doc("/db/apps/opensiddur-tests/tests/api/data/outlines/TitleExistsOnce.xml"))</xpath>
      <xpath desc="A second file with the same title and different URI as the confirmed negative file has been created">exists(data:doc("/data/original/TitleExistsOnce-1"))</xpath>
      <xpath desc="The second file is referenced in the returned outline">exists(./ol:outline/ol:item[ol:title="TitleExistsOnce"]/olx:sameAs[olx:yes]/olx:uri="/data/original/TitleExistsOnce-1")</xpath>
      <xpath desc="When the title is duplicated and sub-items exist, a reference to the source has been added to the file">exists(data:doc("/data/original/TitleDuplicatedAndSubordinatesExistWithSamePointers")//tei:sourceDesc/tei:bibl[tei:ptr[@type="bibl"]["/data/sources/TestOutlineSource"=@target]])</xpath>
      <xpath desc="When the title is confirmed and the source is already referenced, page numbers are added">exists(data:doc("/data/original/TitleExistsOnceWithSource")//tei:sourceDesc/tei:bibl[tei:ptr[@type="bibl"]["/data/sources/TestOutlineSource"=@target]][tei:biblScope[@unit="pages"][@from="11"][@to="12"]])</xpath>
      <xpath desc="When the title is confirmed and the source and pages already referenced, @j:docStatus is added to the tei:bibl and only 1 biblScope exists">count(data:doc("/data/original/TitleExistsOnceWithSourceAndPages")//tei:sourceDesc/tei:bibl[@j:docStatus="outlined"][tei:ptr/@target="/data/sources/TestOutlineSource"][count(tei:biblScope)=1])=1</xpath>
    </test>
  </TestSet>
  <TestSet>
      <testName>outl:list()</testName>
      <test>
         <task>List all resources</task>
         <code>
        outl:list("", 1, 100)
      </code>
         <xpath desc="returns at least 1 result">count(.//html:li[@class="result"])&gt;=1</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>List some resources</task>
         <code>
        outl:list("", 1, 1)
      </code>
         <xpath desc="returns exactly 1 result">count(.//html:li[@class="result"])=1</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>Respond to a query</task>
         <code>
        outl:list("Existing", 1, 100)
      </code>
         <xpath desc="returns 1 result (Existing)">count(.//html:ol[@class="results"]/html:li)=1</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>outl:delete()</testName>
      <test>
         <task>Remove an existing resource</task>
         <code>
      outl:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>Remove a nonexisting resource</task>
         <code>
      outl:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
</TestSuite>
