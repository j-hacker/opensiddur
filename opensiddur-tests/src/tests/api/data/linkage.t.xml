<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Linkage data API</suiteName>
  <description>
      <p>Test linkage data API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2012-2013 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- put test linkage files into /db/data/linkage/none -->
    <create-collection parent="/db/data/linkage/none" name="1900"/>
      <create-collection parent="/db/data/linkage/none/1900" name="01"/>
      <!-- put test linked files into /db/data/original/en|he/1900/01 -->
    <create-collection parent="/db/data/original/en" name="1900"/>
      <create-collection parent="/db/data/original/en/1900" name="01"/>
      <create-collection parent="/db/data/original/he" name="1900"/>
      <create-collection parent="/db/data/original/he/1900" name="01"/>
      <!-- support files required for validity -->
    <store collection="/db/data/user" name="testuser.xml">
         <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
            <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            <tei:name xmlns:tei="http://www.tei-c.org/ns/1.0">Test User</tei:name>
         </j:contributor>
      </store>
      <!-- existing resource with read/write access for testuser -->
    <copy source="/db/apps/opensiddur-tests/tests/api/data/linkage" name="Existing.xml"
            destination="/db/data/linkage/none/1900/01"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/linkage" name="A-he.xml"
            destination="/db/data/original/he/1900/01"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/linkage" name="B-en.xml"
            destination="/db/data/original/en/1900/01"/>
    
      <copy source="/db/apps/opensiddur-tests/tests/api/data/linkage" name="Existing.xml"
            destination="/db/data/linkage/none/1900/01"
            destination-name="NoAccess.xml"/>
      <copy source="/db/apps/opensiddur-tests/tests/api/data/linkage" name="Existing.xml"
            destination="/db/data/linkage/none/1900/01"
            destination-name="NoWriteAccess.xml"/>
      <!-- existing, valid resource with no read access -->
    <code>
      system:as-user("admin", $magic:password,
        let $collections := (
          "/db/data/original/en/1900", 
          "/db/data/original/en/1900/01",
          "/db/data/original/he/1900",
          "/db/data/original/he/1900/01",
          "/db/data/linkage/none/1900",
          "/db/data/linkage/none/1900/01") 
        let $document-uris := (
          "/db/data/linkage/none/1900/01/Existing.xml",
          "/db/data/original/en/1900/01/B-en.xml",
          "/db/data/original/he/1900/01/A-he.xml")
        let $no-access-uri := xs:anyURI("/data/linkage/none/1900/01/NoAccess.xml")
        let $no-write-access-uri := xs:anyURI("/data/linkage/none/1900/01/NoWriteAccess.xml")
        return (
          for $collection in $collections
          let $c-uri := xs:anyURI($collection)
          return (
            sm:chown($c-uri, "admin"),
            sm:chgrp($c-uri, "everyone"),
            sm:chmod($c-uri, "rwxrwxr-x")
          ),
          for $uri in $document-uris
          let $c-uri := xs:anyURI($uri)
          return (
            sm:chown($c-uri, "testuser"),
            sm:chgrp($c-uri, "everyone"),
            sm:chmod($c-uri, "rw-rw-r--")
          ),
          sm:chown($no-access-uri, "testuser2"),
          sm:chgrp($no-access-uri, "everyone"),
          sm:chmod($no-access-uri, "rw-------"),
          sm:chown($no-write-access-uri, "testuser2"),
          sm:chgrp($no-write-access-uri, "everyone"),
          sm:chmod($no-write-access-uri, "rw-r--r--")
      ))
    </code>
  </setup>
  <tearDown>
      <remove-collection collection="/db/data/original/en/1900"/>
      <remove-collection collection="/db/data/original/he/1900"/>
      <remove-collection collection="/db/data/linkage/none/1900"/>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="a">http://jewishliturgy.org/ns/access/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <imports>
    import module namespace lnk="http://jewishliturgy.org/api/data/linkage"
      at "xmldb:exist:///db/apps/opensiddur-server/api/data/linkage.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///db/apps/opensiddur-server/magic/magic.xqm";
  </imports>
  <TestSet>
      <testName>lnk:get()</testName>
      <test>
         <task>Get an existing resource</task>
         <code>
      lnk:get("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
      </test>
      <test>
         <task>Get a nonexisting resource</task>
         <code>
      lnk:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Get a resource with no read access</task>
         <code>
      lnk:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>lnk:list()</testName>
      <test>
         <task>List all resources</task>
         <code>
        lnk:list("", 1, 100)
      </code>
         <xpath desc="returns at least 1 result">count(.//html:li[@class="result"])&gt;=1</xpath>
         <xpath desc="results include a pointer to access API">
        every $li in .//html:li[@class="result"] 
        satisfies exists($li/html:a[@class="alt"][@property="access"])
      </xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>List some resources</task>
         <code>
        lnk:list("", 1, 2)
      </code>
         <xpath desc="returns 2 results">count(.//html:li[@class="result"])=2</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>Respond to a query</task>
         <code>
        lnk:list("Query", 1, 100)
      </code>
         <xpath desc="returns 2 results (Existing and NoWriteAccess)">count(.//html:ol[@class="results"]/html:li)=2</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>lnk:delete()</testName>
      <test>
         <task>Remove an existing resource</task>
         <code>
      lnk:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>Remove a nonexisting resource</task>
         <code>
      lnk:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Remove a resource without write access</task>
         <code>
      lnk:delete("NoWriteAccess")
      </code>
         <class href="../common.t.incl.xml#Forbidden"/>
      </test>
      <test ignore="yes">
         <task>Remove a resource that has external references</task>
         <code>
      lnk:delete("ExternalReference")
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>lnk:post()</testName>
      <tearDown>
         <code>
      let $document := 
        collection("/data/linkage")//tei:titleStmt/tei:title[@type="main"][.="Valid"]/root(.)
      where exists($document)
      return xmldb:remove(
        util:collection-name($document),
        util:document-name($document)
        )
      </code>
      </tearDown>
      <test>
         <task>Post a valid resource</task>
         <code>
      lnk:post(doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Created"/>
         <expected desc="a change record has been added"
                   xpath="collection('/db/data/linkage/none')[descendant::tei:title[@type='main'][.='Valid']]//tei:revisionDesc/tei:change[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="created" who="/user/testuser"
                        when="..."/>
         </expected>
      </test>
      <test>
         <task>Post an invalid resource</task>
         <code>
      lnk:post(doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Invalid.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>lnk:put()</testName>
      <test>
         <task>Put a valid resource to an existing resource</task>
         <code>
      lnk:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Existing-After-Put.xml"))
      </code>
         <class href="../common.t.incl.xml#NoData"/>
         <expected desc="a change record has been added"
                   xpath="(collection('/db/data/linkage/none')[descendant::tei:title[@type='main'][.='Existing']]//tei:revisionDesc/tei:change)[1]">
            <tei:change xmlns:tei="http://www.tei-c.org/ns/1.0" type="edited" who="/user/testuser"
                        when="..."/>
         </expected>
      </test>
      <test>
         <task>Put a valid resource to a nonexisting resource</task>
         <code>
      lnk:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>Put an invalid resource</task>
         <code>
      lnk:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Invalid.xml"))
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>Put a valid resource that is invalidated by an illegal change</task>
         <code>
      lnk:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Invalid-After-Put-Illegal-RevisionDesc.xml"))
      </code>
      </test>
  </TestSet>
  <TestSet>
      <testName>Unauthenticated</testName>
      <asUser/>
      <password/>
      <test>
         <task>lnk:get(): Get an existing resource</task>
         <code>
      lnk:get("Existing")
      </code> 
         <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
      </test>
      <test>
         <task>lnk:get(): Get an existing resource with no read access</task>
         <code>
      lnk:get("NoAccess")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>lnk:get(): Get a nonexisting resource</task>
         <code>
      lnk:get("DoesNotExist")
      </code> 
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>lnk:list(): Get a list of all resources</task>
         <code>
      lnk:list("", 1, 100)
      </code>
         <xpath desc="returns some results">count(.//html:ul[@class="results"]/html:li)&gt;=1</xpath>
         <xpath desc="does not list resource with no read access">empty(.//html:li[@class="result"]/html:a[@class="document"]/@href[contains(., "NoAccess")])</xpath>
         <class href="../common.t.incl.xml#SearchResults"/>
      </test>
      <test>
         <task>lnk:delete(): Remove an existing resource</task>
         <code>
      lnk:delete("Existing")
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>lnk:delete(): Remove a nonexisting resource</task>
         <code>
      lnk:delete("DoesNotExist")
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>lnk:post(): Post a resource</task>
         <code>
      lnk:post(doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Valid.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>lnk:put(): Put an existing resource</task>
         <code>
      lnk:put("Existing", doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Existing.xml"))
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
      <test>
         <task>lnk:put(): Put a nonexisting resource</task>
         <code>
      lnk:put("DoesNotExist", doc("/db/apps/opensiddur-tests/tests/api/data/linkage/Existing.xml"))
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
      <test>
         <task>lnk:get-access()</task>
         <code>
      lnk:get-access("Existing", ())
      </code>
         <xpath desc="an access structure is returned">self::a:access</xpath>
      </test>
      <test>
         <task>lnk:put-access()</task>
         <code>
      lnk:put-access("Existing", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="false"&gt;everyone&lt;/a:group&gt;
          &lt;a:world read="false" write="false"/&gt;
        &lt;/a:access&gt;
        })
      </code>
         <class href="../common.t.incl.xml#Unauthorized"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>lnk:get-access()</testName>
      <test>
         <task>For an existing resource</task>
         <code>
      lnk:get-access("Existing", ())
      </code>
         <xpath desc="returns an access structure">exists(./self::a:access)</xpath>
      </test>
      <test>
         <task>For a nonexistent resource</task>
         <code>
      lnk:get-access("DoesNotExist", ())
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>lnk:put-access()</testName>
      <test>
         <task>Set with a valid access structure</task>
         <code>
      lnk:put-access("Existing", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="true"&gt;everyone&lt;/a:group&gt;
          &lt;a:world write="true" read="true"/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#NoData"/>
      </test>
      <test>
         <task>With an invalid access structure</task>
         <code>
      lnk:put-access("Existing", document{
        &lt;a:access&gt;
          &lt;a:invalid/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#BadRequest"/>
      </test>
      <test>
         <task>For a resource with no write access</task>
         <code>
      lnk:put-access("NoWriteAccess", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="false"&gt;testuser&lt;/a:group&gt;
          &lt;a:world write="false" read="false"/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#Forbidden"/>
      </test>
      <test>
         <task>For a nonexistent resource</task>
         <code>
      lnk:put-access("DoesNotExist", document{
        &lt;a:access&gt;
          &lt;a:owner&gt;testuser&lt;/a:owner&gt;
          &lt;a:group write="false"&gt;testuser&lt;/a:group&gt;
          &lt;a:world write="false" read="false"/&gt;
        &lt;/a:access&gt;
      })
      </code>
         <class href="../common.t.incl.xml#NotFound"/>
      </test>
  </TestSet>
</TestSuite>