<?xml version="1.0" encoding="UTF-8"?>
<TestSuite xmlns:status="http://jewishliturgy.org/modules/status">
  <suiteName>Compilation jobs information API</suiteName>
  <description>
      <p>Test the compilation jobs list/get API</p>
      <author>Efraim Feinstein</author>
      <copyright>Copyright 2014 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <namespace prefix="jx">http://jewishliturgy.org/ns/jlp-processor</namespace>
  <namespace prefix="status">http://jewishliturgy.org/modules/status</namespace>
  <namespace prefix="http">http://expath.org/ns/http-client</namespace>
  <imports>
    import module namespace job="http://jewishliturgy.org/api/jobs"
      at "xmldb:exist:///db/apps/opensiddur-server/api/jobs.xqm";
  </imports>
  <TestSet>
      <testName>job:list()</testName>
      <setup>
        <store collection="/db/cache/status" name="1000-1000.status.xml">
            <status:job 
                user="testuser2" 
                resource="/exist/restxq/api/data/original/One"
                started="1900-01-01T00:00:01.1-08:00"
                completed="1900-01-01T00:01:01.1-08:00"
                state="complete"
                />
        </store>
        <store collection="/db/cache/status" name="1000-2000.status.xml">
            <status:job 
                user="testuser2" 
                resource="/exist/restxq/api/data/original/Two"
                started="1900-01-02T00:00:01.1-08:00"
                completed="1900-01-02T00:01:01.1-08:00"
                state="complete"
                />
        </store>
        <store collection="/db/cache/status" name="1000-3000.status.xml">
            <status:job 
                user="testuser2" 
                resource="/exist/restxq/api/data/original/Three"
                started="1900-01-03T00:00:01.1-08:00"
                state="working"
                />
        </store>
        <store collection="/db/cache/status" name="1000-4000.status.xml">
            <status:job 
                user="testuser2" 
                resource="/exist/restxq/api/data/original/Four"
                started="1900-01-04T00:00:01.1-08:00"
                failed="1900-01-04T00:01:01.1-08:00"
                state="failed"
                />
        </store>
        <store collection="/db/cache/status" name="1000-5000.status.xml">
            <status:job 
                user="testuser2" 
                resource="/exist/restxq/api/data/original/Five"
                started="1900-01-05T00:00:01.1-08:00"
                completed="1900-01-05T00:01:01.1-08:00"
                state="complete"
                />
        </store>
      </setup>
      <tearDown>
        <remove-document collection="/db/cache/status" name="1000-1000.status.xml"/>
        <remove-document collection="/db/cache/status" name="1000-2000.status.xml"/>
        <remove-document collection="/db/cache/status" name="1000-3000.status.xml"/>
        <remove-document collection="/db/cache/status" name="1000-4000.status.xml"/>
        <remove-document collection="/db/cache/status" name="1000-5000.status.xml"/>
      </tearDown>
      <test>
        <task>Return all jobs</task>
        <code>
            job:list((), (), (), (), 1, 100)[2]
        </code>
        <xpath desc="an HTML API results document is returned"><![CDATA[exists(self::html:html[descendant::html:ul[@class="results"]])]]></xpath>
        <xpath desc="at least 5 results are returned"><![CDATA[count(.//html:li[@class="result"]) >= 5]]></xpath> 
        <xpath desc="at most max-results are returned"><![CDATA[count(.//html:li[@class="result"]) <= 100]]></xpath>
        <xpath desc="results are returned in descending order of start time"><![CDATA[.//html:li[@class="result"][1]/html:span[@class="started"]/string() > .//html:li[@class="result"][2]/html:span[@class="started"]/string()]]></xpath> 
      </test>
      <test>
        <task>A nonexistent type returns an error</task>
        <code>
            job:list("typo", "testuser", (), (), 1, 100)[2]
        </code>
        <xpath desc="an error is returned"><![CDATA[exists(self::error)]]></xpath>
      </test>
      <test>
        <task>Return all jobs belonging to a user</task>
        <code>
            job:list("testuser2", (), (), (), 1, 100)
        </code>
        <xpath desc="5 results are returned">count(.//html:li[@class="result"])=5</xpath>
        <xpath desc="every result returns a pointer to an API">every $result in .//html:li[@class="result"] satisfies matches($result/html:a/@href, "^/exist/restxq/api/jobs/\d+-\d+$")</xpath>
        <xpath desc="every result returns a user name">every $result in .//html:li[@class="result"] satisfies $result/html:span[@class="user"]="testuser2"</xpath>
        <xpath desc="every result returns a state">every $result in .//html:li[@class="result"] satisfies $result/html:span[@class="state"]=("complete", "failed", "working")</xpath>
        <xpath desc="every result returns a start time">every $result in .//html:li[@class="result"] satisfies matches($result/html:span[@class="started"], '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?[+-]\d{2}:\d{2}')</xpath>
        <xpath desc="every completed of failed result returns a complete/failed time">every $result in .//html:li[@class="result"][html:span[@class="state"][not(.="working")]] satisfies matches($result/html:span[@class=("complete", "failed")], '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?[+-]\d{2}:\d{2}')</xpath>
      </test>
      <test>
        <task>Return all jobs belonging to a user in working state</task>
        <code>
            job:list("testuser2", "working", (), (), 1, 100)
        </code>
        <xpath desc="1 result is returned">count(.//html:li[@class="result"])=1</xpath>
        <xpath desc="the result's state is 'working'">.//html:li[@class="result"]/html:span[@class="state"]= "working"</xpath>
      </test>
      <test>
        <task>Return all jobs belonging to a user after a given date</task>
        <code>
            job:list("testuser2", (), "1900-01-02", (), 1, 100)
        </code>
        <xpath desc="4 results are returned">count(.//html:li[@class="result"])=4</xpath>
        <xpath desc="every result's start date is after $from">every $result in .//html:li[@class="result"]/html:span[@class="started"] satisfies $result &gt;= "1900-01-02"</xpath>
      </test>
      <test>
        <task>Return all jobs belonging to a user before a given date</task>
        <code>
            job:list("testuser2", (), (), "1900-01-04", 1, 100)
        </code>
        <xpath desc="3 results are returned">count(.//html:li[@class="result"])=3</xpath>
        <xpath desc="every result's start date is before $to">every $result in .//html:li[@class="result"]/html:span[@class="started"] satisfies $result &lt;= "1900-01-04"</xpath>
      </test>
    </TestSet>
    <TestSet>
        <testName>job:get-job()</testName>
        <setup>
            <store collection="/db/cache/status" name="1000-2000.status.xml">
                <status:job user="testuser2" state="complete" 
                    resource="/exist/restxq/api/data/original/Test"
                    started="1900-01-01T01:00:00.0-08:00" 
                    complete="1900-01-01T01:01:01.2-08:00">
                    <status:complete timestamp="1900-01-01T01:01:01.2-08:00"
                        resource="/exist/restxq/api/data/original/Test" />
                </status:job>
            </store>
        </setup>
        <tearDown>
            <remove-document collection="/db/cache/status" name="1000-2000.status.xml"/>
        </tearDown>
        <test>
            <task>Get an existing job</task>
            <code>
                job:get-job("1000-2000")
            </code>
            <xpath desc="returns a status document">.//status:job[@user="testuser2"][@resource="/exist/restxq/api/data/original/Test"]</xpath>
        </test>
        <test>
            <task>Get an nonexistent job</task>
            <code>
                job:get-job("1000-3000")
            </code>
            <class href="common.t.incl.xml#NotFound"/>
        </test>
    </TestSet>
</TestSuite>
