<?xml version="1.0" encoding="UTF-8"?>
<TestSuite>
  <suiteName>Data module</suiteName>
  <description>
      <p>Test the data module</p>
      <author>Efraim Feinstein</author>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <imports>
    import module namespace data="http://jewishliturgy.org/modules/data"
      at "xmldb:exist:///db/apps/opensiddur-server/modules/data.xqm";
  </imports>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <variable name="year" as="xs:string">xsl:format-number(year-from-date(current-date()), "0000")</variable>
  <variable name="month" as="xs:string">xsl:format-number(month-from-date(current-date()), "00")</variable>
  <TestSet>
      <setup>
         <store collection="/db/data/user" name="testuser.xml">
            <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
               <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            </j:contributor>
         </store>
         <create-collection parent="/db/data/original/en" name="1900"/>
         <create-collection parent="/db/data/original/en/1900" name="01"/>
         <store collection="/db/data/original/en/1900/01" name="test.xml">
            <tei:TEI xmlns:tei="http://www.tei-c.org/ns/1.0" xml:lang="en">
               <tei:teiHeader>
                  <tei:fileSpec>
                     <tei:titleStmt>
                        <tei:title>test</tei:title>
                     </tei:titleStmt>
                  </tei:fileSpec>
               </tei:teiHeader>
               <tei:text>
            Empty.
          </tei:text>
            </tei:TEI>
         </store>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/user" name="testuser.xml"/>
         <remove-collection collection="/db/data/original/en/1900"/>
      </tearDown>
      <testName>data:db-path-to-api()</testName>
      <test output="text">
         <task>In non-/data hierarchy</task>
         <code>
        data:db-path-to-api("/db/code/tests/api/data.t.xml")
      </code>
         <error desc="returns error:NOTIMPLEMENTED" code="error:NOTIMPLEMENTED"/>
      </test>
      <test output="text">
         <task>In /data/user hierarchy, user exists</task>
         <code>
        data:db-path-to-api("/db/data/user/testuser.xml")
      </code>
         <expected desc="API path">/exist/restxq/api/user/testuser</expected>
      </test>
      <test output="text">
         <task>In /data/user hierarchy, user does not exist</task>
         <code>
        data:db-path-to-api("/db/data/user/__doesnotexist__.xml")
      </code>
         <xpath desc="empty sequence">not($output)</xpath>
      </test>
      <test output="text">
         <task>In /data/original hierarchy, document exists</task>
         <code>
        data:db-path-to-api("/db/data/original/en/1900/01/test.xml")
      </code>
         <expected desc="API path">/exist/restxq/api/data/original/test</expected>
      </test>
      <test output="text">
         <task>In /data/original hierarchy, document does not exist</task>
         <code>
        data:db-path-to-api("/db/data/original/en/1900/01/doesnotexist.xml")
      </code>
         <xpath desc="empty sequence">not($output)</xpath>
      </test>
  </TestSet>
  <TestSet>
      <testName>data:api-path-to-db()</testName>
      <setup>
         <store collection="/db/data/user" name="testuser.xml">
            <j:contributor xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0">
               <tei:idno xmlns:tei="http://www.tei-c.org/ns/1.0">testuser</tei:idno>
            </j:contributor>
         </store>
         <create-collection parent="/db/data/original/en" name="1900"/>
         <create-collection parent="/db/data/original/en/1900" name="01"/>
         <store collection="/db/data/original/en/1900/01" name="test.xml">
            <tei:TEI xmlns:tei="http://www.tei-c.org/ns/1.0" xml:lang="en">
               <tei:teiHeader>
                  <tei:fileSpec>
                     <tei:titleStmt>
                        <tei:title>test</tei:title>
                     </tei:titleStmt>
                  </tei:fileSpec>
               </tei:teiHeader>
               <tei:text>
            Empty.
          </tei:text>
            </tei:TEI>
         </store>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/user" name="testuser.xml"/>
         <remove-collection collection="/db/data/original/en/1900"/>
      </tearDown>
      <test output="text">
         <task>user hierarchy, user exists</task>
         <code>
        data:api-path-to-db("/api/user/testuser")
      </code>
         <expected desc="db path">/db/data/user/testuser.xml</expected>
      </test>
      <test output="text">
         <task>user hierarchy, user does not exist</task>
         <code>
        data:api-path-to-db("/api/user/doesnotexists")
      </code>
         <xpath desc="empty return">not($output)</xpath>
      </test>
      <test output="text">
         <task>data hierarchy, document exists</task>
         <code>
        data:api-path-to-db("/api/data/original/test")
      </code>
         <expected desc="db path">/db/data/original/en/1900/01/test.xml</expected>
      </test>
      <test output="text">
         <task>data hierarchy, document does not exist</task>
         <code>
        data:api-path-to-db("/api/data/original/doesnotexist")
      </code>
         <xpath desc="empty return">not($output)</xpath>
      </test>
      <test output="text">
         <task>group hierarchy</task>
         <code>
        data:api-path-to-db("/api/group/everyone")
      </code>
         <error desc="returns error:NOTIMPLEMENTED" code="error:NOTIMPLEMENTED"/>
      </test>
  </TestSet>
  <TestSet>
      <testName>data:new-path(): no resource with the same title</testName>
      <test output="text">
         <task>No other resource with the same title</task>
         <code>
        data:new-path("tests", "Test Title")
      </code>
         <xpath desc="Return a URL encoded title with no number">$output=concat("/db/data/tests/", $year, "/", $month, "/Test%20Title.xml")</xpath> 
      </test>
  </TestSet>
  <TestSet>
      <testName>data:new-path(): one resource with the same title</testName>
      <setup>
         <store collection="/db/data/tests" name="Test%20Title.xml">
            <test/>
         </store>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/tests" name="Test%20Title.xml"/>
      </tearDown>
      <test output="text">
         <task>One other resource with the same title</task>
         <code>
        data:new-path("tests", "Test Title")
      </code>
         <xpath desc="Return a URL encoded title with a number 1">$output=concat("/db/data/tests/", $year, "/", $month, "/Test%20Title-1.xml")</xpath> 
      </test>
  </TestSet>
  <TestSet>
      <testName>data:new-path(): two resources with the same title</testName>
      <setup>
         <store collection="/db/data/tests" name="Test%20Title.xml">
            <test>1</test>
         </store>
         <store collection="/db/data/tests" name="Test%20Title-1.xml">
            <test>2</test>
         </store>
      </setup>
      <tearDown>
         <remove-document collection="/db/data/tests" name="Test%20Title.xml"/>
         <remove-document collection="/db/data/tests" name="Test%20Title-1.xml"/>
      </tearDown>    
      <test output="text">
         <task>Two other resource with the same title</task>
         <code>
        data:new-path("tests", "Test Title")
      </code>
         <xpath desc="Return a URL encoded title with a number 2">$output=concat("/db/data/tests/", $year, "/", $month, "/Test%20Title-2.xml")</xpath> 
      </test>
  </TestSet>
  <TestSet>
      <testName>data:doc(), 1 parameter</testName>
      <setup>
         <create-collection parent="/db/data/tests" name="doctest"/>
         <store collection="/db/data/tests/doctest" name="TestTitle.xml">
            <test>1</test>
         </store>
      </setup>
      <tearDown>
         <remove-collection collection="/db/data/tests/doctest"/>
      </tearDown>
      <test>
         <task>Document that does exist</task>
         <code>
      data:doc("/data/tests/TestTitle")
      </code>
         <expected desc="returns the document" xpath="*">
            <test>1</test>
         </expected>
      </test>
      <test output="text">
         <task>Document that does not exist</task>
         <code>
      data:doc("/data/tests/DoesNotExist")
      </code>
         <xpath desc="returns an empty sequence">not($output)</xpath>
      </test>
  </TestSet>
</TestSuite>